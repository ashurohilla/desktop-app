/*! For license information please see app.js.LICENSE.txt */
(()=>{var e,t,n={751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(667),l=n.n(s),c=new URL(n(630),n.b),u=a()(i()),d=l()(c);u.push([e.id,`/*\n! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com\n*/\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: "";\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured \`sans\` font-family by default.\n5. Use the user's configured \`sans\` font-feature-settings by default.\n6. Use the user's configured \`sans\` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5;\n  /* 1 */\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n  tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,\n    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  /* 4 */\n  font-feature-settings: normal;\n  /* 5 */\n  font-variation-settings: normal;\n  /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from \`html\` so users can set them as a class directly on the \`html\` element.\n*/\n\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured \`mono\` font family by default.\n2. Correct the odd \`em\` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n    "Liberation Mono", "Courier New", monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent \`sub\` and \`sup\` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional \`:invalid\` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to \`inherit\` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder,\ntextarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements \`display: block\` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add \`vertical-align: middle\` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n\n[hidden] {\n  display: none;\n}\n\n*,\n::before,\n::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n}\n\n.static {\n  position: static;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.relative {\n  position: relative;\n}\n\n.bottom-\\[30px\\] {\n  bottom: 30px;\n}\n\n.right-0 {\n  right: 0px;\n}\n\n.right-\\[35px\\] {\n  right: 35px;\n}\n\n.top-2 {\n  top: 0.5rem;\n}\n\n.\\!z-\\[99\\] {\n  z-index: 99 !important;\n}\n\n.z-40 {\n  z-index: 40;\n}\n\n.float-right {\n  float: right;\n}\n\n.float-left {\n  float: left;\n}\n\n.mx-3 {\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n}\n\n.mx-5 {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.my-8 {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n\n.mb-16 {\n  margin-bottom: 4rem;\n}\n\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n\n.mb-2\\.5 {\n  margin-bottom: 0.625rem;\n}\n\n.mb-3 {\n  margin-bottom: 0.75rem;\n}\n\n.mb-4 {\n  margin-bottom: 1rem;\n}\n\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n\n.mb-8 {\n  margin-bottom: 2rem;\n}\n\n.mb-9 {\n  margin-bottom: 2.25rem;\n}\n\n.ml-1 {\n  margin-left: 0.25rem;\n}\n\n.ml-1\\.5 {\n  margin-left: 0.375rem;\n}\n\n.ml-2 {\n  margin-left: 0.5rem;\n}\n\n.ml-3 {\n  margin-left: 0.75rem;\n}\n\n.mr-2 {\n  margin-right: 0.5rem;\n}\n\n.mr-8 {\n  margin-right: 2rem;\n}\n\n.mt-0 {\n  margin-top: 0px;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.mt-4 {\n  margin-top: 1rem;\n}\n\n.mt-8 {\n  margin-top: 2rem;\n}\n\n.block {\n  display: block;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n}\n\n.grid {\n  display: grid;\n}\n\n.hidden {\n  display: none;\n}\n\n.h-12 {\n  height: 3rem;\n}\n\n.h-16 {\n  height: 4rem;\n}\n\n.h-4 {\n  height: 1rem;\n}\n\n.h-\\[20px\\] {\n  height: 20px;\n}\n\n.h-\\[300px\\] {\n  height: 300px;\n}\n\n.h-\\[500px\\] {\n  height: 500px;\n}\n\n.h-\\[50px\\] {\n  height: 50px;\n}\n\n.h-\\[60px\\] {\n  height: 60px;\n}\n\n.h-\\[px\\] {\n  height: px;\n}\n\n.h-fit {\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.h-px {\n  height: 1px;\n}\n\n.h-screen {\n  height: 100vh;\n}\n\n.min-h-\\[20px\\] {\n  min-height: 20px;\n}\n\n.min-h-screen {\n  min-height: 100vh;\n}\n\n.w-4 {\n  width: 1rem;\n}\n\n.w-\\[100px\\] {\n  width: 100px;\n}\n\n.w-\\[200px\\] {\n  width: 200px;\n}\n\n.w-\\[20px\\] {\n  width: 20px;\n}\n\n.w-\\[60px\\] {\n  width: 60px;\n}\n\n.w-fit {\n  width: -moz-fit-content;\n  width: fit-content;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.w-max {\n  width: -moz-max-content;\n  width: max-content;\n}\n\n.min-w-\\[20px\\] {\n  min-width: 20px;\n}\n\n.max-w-\\[80\\%\\] {\n  max-width: 80%;\n}\n\n.max-w-full {\n  max-width: 100%;\n}\n\n.flex-1 {\n  flex: 1 1 0%;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.list-none {\n  list-style-type: none;\n}\n\n.appearance-none {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.grid-flow-row {\n  grid-auto-flow: row;\n}\n\n.grid-cols-1 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n.grid-cols-2 {\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n\n.flex-row {\n  flex-direction: row;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.items-end {\n  align-items: flex-end;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.gap-1 {\n  gap: 0.25rem;\n}\n\n.gap-2 {\n  gap: 0.5rem;\n}\n\n.gap-3 {\n  gap: 0.75rem;\n}\n\n.gap-4 {\n  gap: 1rem;\n}\n\n.rounded {\n  border-radius: 0.25rem;\n}\n\n.rounded-2xl {\n  border-radius: 1rem;\n}\n\n.rounded-\\[100px\\] {\n  border-radius: 100px;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n\n.rounded-\\[300px\\] {\n  border-radius: 300px;\n}\n\n.rounded-\\[400px\\] {\n  border-radius: 400px;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.\\!border-none {\n  border-style: none !important;\n}\n\n.\\!border-green-500 {\n  --tw-border-opacity: 1 !important;\n  border-color: rgb(34 197 94 / var(--tw-border-opacity)) !important;\n}\n\n.\\!border-red-500 {\n  --tw-border-opacity: 1 !important;\n  border-color: rgb(239 68 68 / var(--tw-border-opacity)) !important;\n}\n\n.border-\\[\\#6a53ff\\] {\n  --tw-border-opacity: 1;\n  border-color: rgb(106 83 255 / var(--tw-border-opacity));\n}\n\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n\n.border-gray-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n\n.border-green-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 197 94 / var(--tw-border-opacity));\n}\n\n.border-red-500 {\n  --tw-border-opacity: 1;\n  border-color: rgb(239 68 68 / var(--tw-border-opacity));\n}\n\n.\\!bg-gray-100 {\n  --tw-bg-opacity: 1 !important;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity)) !important;\n}\n\n.\\!bg-white {\n  --tw-bg-opacity: 1 !important;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity)) !important;\n}\n\n.bg-blue-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n}\n\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n.bg-green-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(187 247 208 / var(--tw-bg-opacity));\n}\n\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n.bg-white\\/0 {\n  background-color: rgb(255 255 255 / 0);\n}\n\n.bg-gradient-to-br {\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\n}\n\n.bg-cover {\n  background-size: cover;\n}\n\n.bg-center {\n  background-position: center;\n}\n\n.p-0 {\n  padding: 0px;\n}\n\n.p-3 {\n  padding: 0.75rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.px-36 {\n  padding-left: 9rem;\n  padding-right: 9rem;\n}\n\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n.px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.py-5 {\n  padding-top: 1.25rem;\n  padding-bottom: 1.25rem;\n}\n\n.py-6 {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\n\n.py-8 {\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n}\n\n.py-\\[12px\\] {\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\n.pl-3 {\n  padding-left: 0.75rem;\n}\n\n.pt-3 {\n  padding-top: 0.75rem;\n}\n\n.pt-8 {\n  padding-top: 2rem;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.align-baseline {\n  vertical-align: baseline;\n}\n\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n\n.text-\\[16px\\] {\n  font-size: 16px;\n}\n\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.font-medium {\n  font-weight: 500;\n}\n\n.font-normal {\n  font-weight: 400;\n}\n\n.italic {\n  font-style: italic;\n}\n\n.leading-tight {\n  line-height: 1.25;\n}\n\n.text-black {\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n\n.text-green-500 {\n  --tw-text-opacity: 1;\n  color: rgb(34 197 94 / var(--tw-text-opacity));\n}\n\n.text-red-500 {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.text-white\\/0 {\n  color: rgb(255 255 255 / 0);\n}\n\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\n    0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.shadow-2xl {\n  --tw-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);\n  --tw-shadow-colored: 0 25px 50px -12px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),\n    0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.transition {\n  transition-property: color, background-color, border-color,\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\n    -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color,\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\n    backdrop-filter;\n  transition-property: color, background-color, border-color,\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\n    backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.duration-200 {\n  transition-duration: 200ms;\n}\n\n.duration-\\[0\\.2s\\] {\n  transition-duration: 0.2s;\n}\n\n.placeholder\\:text-green-500::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(34 197 94 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-green-500::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(34 197 94 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-red-500::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-red-500::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(239 68 68 / var(--tw-text-opacity));\n}\n\n.checked\\:border-none:checked {\n  border-style: none;\n}\n\n.checked\\:bg-amber-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(245 158 11 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-blue-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-cyan-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(6 182 212 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-gray-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-green-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-indigo-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(99 102 241 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-lime-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(132 204 22 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-orange-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 115 22 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-pink-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(236 72 153 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-purple-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(168 85 247 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-red-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-teal-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(20 184 166 / var(--tw-bg-opacity));\n}\n\n.checked\\:bg-yellow-500:checked {\n  --tw-bg-opacity: 1;\n  background-color: rgb(234 179 8 / var(--tw-bg-opacity));\n}\n\n.checked\\:text-white:checked {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n.hover\\:cursor-pointer:hover {\n  cursor: pointer;\n}\n\n.hover\\:bg-blue-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-blue-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(29 78 216 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-gray-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-red-600:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n}\n\n.hover\\:text-blue-800:hover {\n  --tw-text-opacity: 1;\n  color: rgb(30 64 175 / var(--tw-text-opacity));\n}\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n:is(.dark .dark\\:\\!border-green-400) {\n  --tw-border-opacity: 1 !important;\n  border-color: rgb(74 222 128 / var(--tw-border-opacity)) !important;\n}\n\n:is(.dark .dark\\:\\!border-red-400) {\n  --tw-border-opacity: 1 !important;\n  border-color: rgb(248 113 113 / var(--tw-border-opacity)) !important;\n}\n\n:is(.dark .dark\\:\\!border-white\\/10) {\n  border-color: rgb(255 255 255 / 0.1) !important;\n}\n\n:is(.dark .dark\\:border-white\\/10) {\n  border-color: rgb(255 255 255 / 0.1);\n}\n\n:is(.dark .dark\\:\\!bg-white\\/5) {\n  background-color: rgb(255 255 255 / 0.05) !important;\n}\n\n:is(.dark .dark\\:\\!text-green-400) {\n  --tw-text-opacity: 1 !important;\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:\\!text-red-400) {\n  --tw-text-opacity: 1 !important;\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:text-gray-600) {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\n\n:is(.dark .dark\\:text-white) {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n:is(\n    .dark .dark\\:placeholder\\:\\!text-\\[rgba\\(255\\2c 255\\2c 255\\2c 0\\.15\\)\\]\n  )::-moz-placeholder {\n  color: rgba(255, 255, 255, 0.15) !important;\n}\n\n:is(\n    .dark .dark\\:placeholder\\:\\!text-\\[rgba\\(255\\2c 255\\2c 255\\2c 0\\.15\\)\\]\n  )::placeholder {\n  color: rgba(255, 255, 255, 0.15) !important;\n}\n\n:is(.dark .dark\\:placeholder\\:\\!text-green-400)::-moz-placeholder {\n  --tw-text-opacity: 1 !important;\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:placeholder\\:\\!text-green-400)::placeholder {\n  --tw-text-opacity: 1 !important;\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:placeholder\\:\\!text-red-400)::-moz-placeholder {\n  --tw-text-opacity: 1 !important;\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:placeholder\\:\\!text-red-400)::placeholder {\n  --tw-text-opacity: 1 !important;\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\n}\n\n:is(.dark .dark\\:checked\\:bg-amber-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(251 191 36 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-blue-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-cyan-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 211 238 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-gray-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-green-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(74 222 128 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-indigo-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(129 140 248 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-lime-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(163 230 53 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-orange-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(251 146 60 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-pink-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(244 114 182 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-purple-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(192 132 252 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-red-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-teal-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(45 212 191 / var(--tw-bg-opacity));\n}\n\n:is(.dark .dark\\:checked\\:bg-yellow-400:checked) {\n  --tw-bg-opacity: 1;\n  background-color: rgb(250 204 21 / var(--tw-bg-opacity));\n}\n\n@media (min-width: 640px) {\n  .sm\\:flex {\n    display: flex;\n  }\n}\n\n@media (min-width: 768px) {\n  .md\\:mx-0 {\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n  .md\\:block {\n    display: block;\n  }\n\n  .md\\:px-0 {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n\n  .md\\:pl-4 {\n    padding-left: 1rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .lg\\:mb-10 {\n    margin-bottom: 2.5rem;\n  }\n\n  .lg\\:w-\\[49vw\\] {\n    width: 49vw;\n  }\n\n  .lg\\:max-w-\\[65\\%\\] {\n    max-width: 65%;\n  }\n\n  .lg\\:items-center {\n    align-items: center;\n  }\n\n  .lg\\:justify-start {\n    justify-content: flex-start;\n  }\n\n  .lg\\:rounded-bl-\\[120px\\] {\n    border-bottom-left-radius: 120px;\n  }\n\n  .lg\\:pl-0 {\n    padding-left: 0px;\n  }\n\n  .lg\\:pt-10 {\n    padding-top: 2.5rem;\n  }\n}\n.loginimage {\n  width: 120px;\n  height: 120px;\n}\n\n/* \n.waves:hover {\n\tposition: absolute;\n\ttop:0px;\n\tleft: 0px;\n\tright: 0px;\n\tbottom: 0px;\n\tborder-radius: 100%;\n\tborder: solid white 5px;\n\tanimation-name: spread;\n\tanimation-duration: 2s;\n\tanimation-delay: 3s;\n  animation-duration: 1.3s;\n\tanimation-timing-function: ease-out;\n\tanimation-fill-mode: backwards;\n}\n\n@keyframes spread{\n\t0%{\n\t\ttransform: scale(0);\n\t\topacity: 1;\n\t}\n\t40%{\n\t\ttransform: scale(0);\n\t\topacity: 1;\n\t}\n\n\t100%{\n\t\ttransform: scale(1);\n\t\topacity: 0;\n\t}\n} */\n\n.loginbackground {\n  /* background-color: rgb(255, 139, 56); */\n  background-image: linear-gradient(\n    to bottom,\n    #051937,\n    #3c2d5e,\n    #7b3d7b,\n    #bf4b88,\n    #ff6086\n  );\n}\n.backgroundimage {\n  width: 500px;\n  height: 500px;\n  flex: auto;\n  justify-content: center;\n  align-items: center;\n  margin-top: 150px;\n}\n.navtext {\n  font-size: x-large;\n  color: white;\n  font-family: sans-serif;\n  border: 2px solid white;\n}\n\n.mainback {\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n      to bottom,\n      rgba(255, 255, 255, 0.15) 0%,\n      rgba(0, 0, 0, 0.15) 100%\n    ),\n    radial-gradient(\n        at top center,\n        rgba(255, 255, 255, 0.4) 0%,\n        rgba(0, 0, 0, 0.4) 120%\n      )\n      #989898;\n}\n.maindiv{\n margin-top: 80px;\n}\n.images {\n  justify-content: center;\n  align-items: center;\n}\n\n.loggedout {\n  width: 100%;\n  height: 100%;\n  z-index: -1; /* Place the background behind the content */\n  background-size: cover; /* Adjust this as needed */\n  background: url(${d}) no-repeat center center fixed;\n}\n\n@media (min-width: 1280px) {\n  .xl\\:max-w-\\[420px\\] {\n    max-width: 420px;\n  }\n\n  .xl\\:rounded-bl-\\[200px\\] {\n    border-bottom-left-radius: 200px;\n  }\n}\n\n@media (min-width: 1536px) {\n  .\\32xl\\:w-\\[44vw\\] {\n    width: 44vw;\n  }\n}\n\n.textcolor {\n  color: #0f0f11;\n}\n\n.buttoncolor {\n  background-image: linear-gradient(\n    to right,\n    #051937,\n    #262b66,\n    #5b3791,\n    #9e38b2,\n    #e823c6\n  );\n}\n/* .endreportt {\n  font-weight: 300;\n  width: 200px;\n  height: 200px;\n} */\n.reportbutton {\n  background-color: black;\n  color: white;\n  padding-left: 10px;\n  padding-right: 10px;\n  padding-bottom: 5px;\n  padding-top: 5px;\n  border: 2px solid white;\n  border-radius: 10px;\n  width: 100px;\n  margin-top: 10px;\n}\n.inputform {\n  width: 300px;\n  height: 100px;\n  font-size: medium;\n  font-family: sans-serif;\n}\n\n.hidden {\n  display: none;\n}\n\n.visible {\n  display: block; /* or any other appropriate display value */\n}\n\n.textcolor {\n  color: white;\n}\n.marginfooter {\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  \n}\n.totalwidht{\n  height: 100vh;\n}\n\n.marginbat {\n  margin-top: 30px;\n}\n.footercolor {\n  justify-content: center;\n  align-items: center;\n  left: 0;\n  height: 60px;\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.1); /* Transparent white */\n  -webkit-backdrop-filter: blur(10px);\n          backdrop-filter: blur(10px); /* Apply a blur effect */ \n}\n\n.footerimage {\n  margin-left: 50px;\n  margin-right: 50px;\n}\n.loginnew {\n  background: black;\n  height: 100vh;\n  \n}\n.dianabtn {\n  color: white;\n}\n.backgroundimage {\n  mix-blend-mode: normal;\n}\n\n.signinbutton{\n  display: flex;\n  justify-content: center;\n  width: 160px;\n  align-items: center;\n}\n.heading{\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n}\n.widthbutton{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.imputWidth{\n  width: 500px;\n  justify-content: center;\n}\n\n.buttonsize{\n  width:100px;\n}\n.linked{\n\n  margin-right: 10px;\n  margin-top: 70px;\n}\n.pt-6{\npadding-top: 10px;\n}\n.pt-2{\n  padding-top: 5px;\n  margin-left: 5px;\n}\n.pl-2{\n  padding-left: 6px;\n  padding-right: 2px;\n}\n\n.text-newbuttoncolor{\n  display: flex;\n  padding-top: 29px;\n  font-size: x-large;\n  background: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6 );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n    /* color: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6  ); */\n  \n  \n\n}\n.text-buttoncolor{\n  font-size: medium;\n  background: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6 );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n    /* color: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6  ); */\n  \n  \n\n}\n\n.postiondiv{\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.bg-mainback {\n  background-color: #818080;\n  box-shadow: 20px;\n  box-shadow: #696868;\n}\n.logoutbutton{\n  color: red;\n  font-size: medium;\n\n}\n.backimageset{\n  z-index: -500;\n}\n.navigationbar{\n  top: 0;\n  left: 0;\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.1); /* Transparent white */\n  -webkit-backdrop-filter: blur(5px);\n          backdrop-filter: blur(5px); /* Apply a blur effect */\n  z-index: 1000; /* Adjust the z-index to place the navbar above other content */\n}\n.backgoundcolor{\n  position: absolute;\n  inset: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(118, 118, 118, 0.8);\n  z-index: 10;\n}`,"",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;;CAEC;;AAED;;;CAGC;;AAED;;;EAGE,sBAAsB;EACtB,MAAM;EACN,eAAe;EACf,MAAM;EACN,mBAAmB;EACnB,MAAM;EACN,qBAAqB;EACrB,MAAM;AACR;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;;;;;;CAOC;;AAED;EACE,gBAAgB;EAChB,MAAM;EACN,MAAM;EACN,gBAAgB;EAChB,MAAM;EACN,cAAc;EACd,WAAW;EACX,MAAM;EACN;;gFAE8E;EAC9E,MAAM;EACN,6BAA6B;EAC7B,MAAM;EACN,+BAA+B;EAC/B,MAAM;AACR;;AAEA;;;CAGC;;AAED;EACE,SAAS;EACT,MAAM;EACN,oBAAoB;EACpB,MAAM;AACR;;AAEA;;;;CAIC;;AAED;EACE,SAAS;EACT,MAAM;EACN,cAAc;EACd,MAAM;EACN,qBAAqB;EACrB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,yCAAyC;EACzC,iCAAiC;AACnC;;AAEA;;CAEC;;AAED;;;;;;EAME,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;;CAEC;;AAED;EACE,cAAc;EACd,wBAAwB;AAC1B;;AAEA;;CAEC;;AAED;;EAEE,mBAAmB;AACrB;;AAEA;;;CAGC;;AAED;;;;EAIE;+CAC6C;EAC7C,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,cAAc;AAChB;;AAEA;;CAEC;;AAED;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;;;CAIC;;AAED;EACE,cAAc;EACd,MAAM;EACN,qBAAqB;EACrB,MAAM;EACN,yBAAyB;EACzB,MAAM;AACR;;AAEA;;;;CAIC;;AAED;;;;;EAKE,oBAAoB;EACpB,MAAM;EACN,eAAe;EACf,MAAM;EACN,oBAAoB;EACpB,MAAM;EACN,oBAAoB;EACpB,MAAM;EACN,cAAc;EACd,MAAM;EACN,SAAS;EACT,MAAM;EACN,UAAU;EACV,MAAM;AACR;;AAEA;;CAEC;;AAED;;EAEE,oBAAoB;AACtB;;AAEA;;;CAGC;;AAED;;;;EAIE,0BAA0B;EAC1B,MAAM;EACN,6BAA6B;EAC7B,MAAM;EACN,sBAAsB;EACtB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,aAAa;AACf;;AAEA;;CAEC;;AAED;EACE,gBAAgB;AAClB;;AAEA;;CAEC;;AAED;EACE,wBAAwB;AAC1B;;AAEA;;CAEC;;AAED;;EAEE,YAAY;AACd;;AAEA;;;CAGC;;AAED;EACE,6BAA6B;EAC7B,MAAM;EACN,oBAAoB;EACpB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,wBAAwB;AAC1B;;AAEA;;;CAGC;;AAED;EACE,0BAA0B;EAC1B,MAAM;EACN,aAAa;EACb,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,kBAAkB;AACpB;;AAEA;;CAEC;;AAED;;;;;;;;;;;;;EAaE,SAAS;AACX;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;;;EAGE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;;CAEC;;AAED;EACE,gBAAgB;AAClB;;AAEA;;;CAGC;;AAED;;EAEE,UAAU;EACV,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;EAEE,UAAU;EACV,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AANA;;EAEE,UAAU;EACV,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;;CAEC;;AAED;;EAEE,eAAe;AACjB;;AAEA;;CAEC;;AAED;EACE,eAAe;AACjB;;AAEA;;;;CAIC;;AAED;;;;;;;EAOE,cAAc;EACd,MAAM;EACN,sBAAsB;EACtB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,eAAe;EACf,YAAY;AACd;;AAEA,wEAAwE;;AAExE;EACE,aAAa;AACf;;AAEA;;;EAGE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,cAAc;EACd,cAAc;EACd,cAAc;EACd,eAAe;EACf,eAAe;EACf,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,sCAAsC;EACtC,6BAA6B;EAC7B,4BAA4B;EAC5B,2BAA2B;EAC3B,cAAc;EACd,mBAAmB;EACnB,qBAAqB;EACrB,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;EACjB,2BAA2B;EAC3B,4BAA4B;EAC5B,sCAAsC;EACtC,kCAAkC;EAClC,2BAA2B;EAC3B,sBAAsB;EACtB,8BAA8B;EAC9B,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,sBAAsB;EACtB,uBAAuB;EACvB,wBAAwB;EACxB,qBAAqB;AACvB;;AAEA;EACE,wBAAwB;EACxB,wBAAwB;EACxB,mBAAmB;EACnB,mBAAmB;EACnB,cAAc;EACd,cAAc;EACd,cAAc;EACd,eAAe;EACf,eAAe;EACf,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,sCAAsC;EACtC,6BAA6B;EAC7B,4BAA4B;EAC5B,2BAA2B;EAC3B,cAAc;EACd,mBAAmB;EACnB,qBAAqB;EACrB,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;EACjB,2BAA2B;EAC3B,4BAA4B;EAC5B,sCAAsC;EACtC,kCAAkC;EAClC,2BAA2B;EAC3B,sBAAsB;EACtB,8BAA8B;EAC9B,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,sBAAsB;EACtB,uBAAuB;EACvB,wBAAwB;EACxB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,wBAAwB;EACxB,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,gDAAgD;AAClD;;AAEA;EACE,gDAAgD;AAClD;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,iCAAiC;EACjC,kEAAkE;AACpE;;AAEA;EACE,iCAAiC;EACjC,kEAAkE;AACpE;;AAEA;EACE,sBAAsB;EACtB,wDAAwD;AAC1D;;AAEA;EACE,sBAAsB;EACtB,yDAAyD;AAC3D;;AAEA;EACE,sBAAsB;EACtB,yDAAyD;AAC3D;;AAEA;EACE,sBAAsB;EACtB,uDAAuD;AACzD;;AAEA;EACE,sBAAsB;EACtB,uDAAuD;AACzD;;AAEA;EACE,6BAA6B;EAC7B,oEAAoE;AACtE;;AAEA;EACE,6BAA6B;EAC7B,oEAAoE;AACtE;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,sDAAsD;AACxD;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,4EAA4E;AAC9E;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,oBAAoB;EACpB,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,oBAAoB;EACpB,0CAA0C;AAC5C;;AAEA;EACE,oBAAoB;EACpB,+CAA+C;AACjD;;AAEA;EACE,oBAAoB;EACpB,gDAAgD;AAClD;;AAEA;EACE,oBAAoB;EACpB,6CAA6C;AAC/C;;AAEA;EACE,oBAAoB;EACpB,6CAA6C;AAC/C;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,oBAAoB;EACpB,gDAAgD;AAClD;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,0EAA0E;EAC1E;yCACuC;EACvC;sDACoD;AACtD;;AAEA;EACE,gDAAgD;EAChD,6DAA6D;EAC7D;sDACoD;AACtD;;AAEA;EACE,6EAA6E;EAC7E;yCACuC;EACvC;sDACoD;AACtD;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE;;2BAEyB;EACzB;;mBAEiB;EACjB;;4CAE0C;EAC1C,wDAAwD;EACxD,0BAA0B;AAC5B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,oBAAoB;EACpB,gDAAgD;AAClD;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,kBAAkB;EAClB,sDAAsD;AACxD;;AAEA;EACE,kBAAkB;EAClB,uDAAuD;AACzD;;AAEA;EACE,oBAAoB;EACpB,8CAA8C;AAChD;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,iCAAiC;EACjC,mEAAmE;AACrE;;AAEA;EACE,iCAAiC;EACjC,oEAAoE;AACtE;;AAEA;EACE,+CAA+C;AACjD;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oDAAoD;AACtD;;AAEA;EACE,+BAA+B;EAC/B,0DAA0D;AAC5D;;AAEA;EACE,+BAA+B;EAC/B,2DAA2D;AAC7D;;AAEA;EACE,oBAAoB;EACpB,6CAA6C;AAC/C;;AAEA;EACE,oBAAoB;EACpB,gDAAgD;AAClD;;AAEA;;;EAGE,2CAA2C;AAC7C;;AAEA;;;EAGE,2CAA2C;AAC7C;;AAEA;EACE,+BAA+B;EAC/B,0DAA0D;AAC5D;;AAEA;EACE,+BAA+B;EAC/B,0DAA0D;AAC5D;;AAEA;EACE,+BAA+B;EAC/B,2DAA2D;AAC7D;;AAEA;EACE,+BAA+B;EAC/B,2DAA2D;AAC7D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,yDAAyD;AAC3D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE,kBAAkB;EAClB,wDAAwD;AAC1D;;AAEA;EACE;IACE,aAAa;EACf;AACF;;AAEA;EACE;IACE,gBAAgB;IAChB,iBAAiB;EACnB;;EAEA;IACE,cAAc;EAChB;;EAEA;IACE,iBAAiB;IACjB,kBAAkB;EACpB;;EAEA;IACE,kBAAkB;EACpB;AACF;;AAEA;EACE;IACE,qBAAqB;EACvB;;EAEA;IACE,WAAW;EACb;;EAEA;IACE,cAAc;EAChB;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,gCAAgC;EAClC;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,mBAAmB;EACrB;AACF;AACA;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;;AAEH;EACE,yCAAyC;EACzC;;;;;;;GAOC;AACH;AACA;EACE,YAAY;EACZ,aAAa;EACb,UAAU;EACV,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,uBAAuB;EACvB,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ;;;;;;;;;;aAUW;AACb;AACA;CACC,gBAAgB;AACjB;AACA;EACE,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,WAAW,EAAE,4CAA4C;EACzD,sBAAsB,EAAE,0BAA0B;EAClD,iFAAiF;AACnF;;AAEA;EACE;IACE,gBAAgB;EAClB;;EAEA;IACE,gCAAgC;EAClC;AACF;;AAEA;EACE;IACE,WAAW;EACb;AACF;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;;;;;;;GAOC;AACH;AACA;;;;GAIG;AACH;EACE,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,gBAAgB;AAClB;AACA;EACE,YAAY;EACZ,aAAa;EACb,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc,EAAE,2CAA2C;AAC7D;;AAEA;EACE,YAAY;AACd;AACA;EACE,eAAe;EACf,SAAS;EACT,WAAW;;AAEb;AACA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;AACA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,OAAO;EACP,YAAY;EACZ,WAAW;EACX,0CAA0C,EAAE,sBAAsB;EAClE,mCAA2B;UAA3B,2BAA2B,EAAE,wBAAwB;AACvD;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,iBAAiB;EACjB,aAAa;;AAEf;AACA;EACE,YAAY;AACd;AACA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;AAClB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,uBAAuB;AACzB;;AAEA;EACE,WAAW;AACb;AACA;;EAEE,kBAAkB;EAClB,gBAAgB;AAClB;AACA;AACA,iBAAiB;AACjB;AACA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,kBAAkB;EAClB,gFAAgF;EAChF,6BAA6B;EAC7B,oCAAoC;IAClC,kFAAkF;;;;AAItF;AACA;EACE,iBAAiB;EACjB,gFAAgF;EAChF,6BAA6B;EAC7B,oCAAoC;IAClC,kFAAkF;;;;AAItF;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,MAAM;AACR;AACA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,UAAU;EACV,iBAAiB;;AAEnB;AACA;EACE,aAAa;AACf;AACA;EACE,MAAM;EACN,OAAO;EACP,WAAW;EACX,0CAA0C,EAAE,sBAAsB;EAClE,kCAA0B;UAA1B,0BAA0B,EAAE,wBAAwB;EACpD,aAAa,EAAE,+DAA+D;AAChF;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,0CAA0C;EAC1C,WAAW;AACb",sourcesContent:['/*\r\n! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com\r\n*/\r\n\r\n/*\r\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\r\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\r\n*/\r\n\r\n*,\r\n::before,\r\n::after {\r\n  box-sizing: border-box;\r\n  /* 1 */\r\n  border-width: 0;\r\n  /* 2 */\r\n  border-style: solid;\r\n  /* 2 */\r\n  border-color: #e5e7eb;\r\n  /* 2 */\r\n}\r\n\r\n::before,\r\n::after {\r\n  --tw-content: "";\r\n}\r\n\r\n/*\r\n1. Use a consistent sensible line-height in all browsers.\r\n2. Prevent adjustments of font size after orientation changes in iOS.\r\n3. Use a more readable tab size.\r\n4. Use the user\'s configured `sans` font-family by default.\r\n5. Use the user\'s configured `sans` font-feature-settings by default.\r\n6. Use the user\'s configured `sans` font-variation-settings by default.\r\n*/\r\n\r\nhtml {\r\n  line-height: 1.5;\r\n  /* 1 */\r\n  /* 2 */\r\n  -moz-tab-size: 4;\r\n  /* 3 */\r\n  -o-tab-size: 4;\r\n  tab-size: 4;\r\n  /* 3 */\r\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,\r\n    "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif,\r\n    "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\r\n  /* 4 */\r\n  font-feature-settings: normal;\r\n  /* 5 */\r\n  font-variation-settings: normal;\r\n  /* 6 */\r\n}\r\n\r\n/*\r\n1. Remove the margin in all browsers.\r\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\r\n*/\r\n\r\nbody {\r\n  margin: 0;\r\n  /* 1 */\r\n  line-height: inherit;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\n1. Add the correct height in Firefox.\r\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\r\n3. Ensure horizontal rules are visible by default.\r\n*/\r\n\r\nhr {\r\n  height: 0;\r\n  /* 1 */\r\n  color: inherit;\r\n  /* 2 */\r\n  border-top-width: 1px;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\nAdd the correct text decoration in Chrome, Edge, and Safari.\r\n*/\r\n\r\nabbr:where([title]) {\r\n  -webkit-text-decoration: underline dotted;\r\n  text-decoration: underline dotted;\r\n}\r\n\r\n/*\r\nRemove the default font size and weight for headings.\r\n*/\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  font-size: inherit;\r\n  font-weight: inherit;\r\n}\r\n\r\n/*\r\nReset links to optimize for opt-in styling instead of opt-out.\r\n*/\r\n\r\na {\r\n  color: inherit;\r\n  text-decoration: inherit;\r\n}\r\n\r\n/*\r\nAdd the correct font weight in Edge and Safari.\r\n*/\r\n\r\nb,\r\nstrong {\r\n  font-weight: bolder;\r\n}\r\n\r\n/*\r\n1. Use the user\'s configured `mono` font family by default.\r\n2. Correct the odd `em` font sizing in all browsers.\r\n*/\r\n\r\ncode,\r\nkbd,\r\nsamp,\r\npre {\r\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\r\n    "Liberation Mono", "Courier New", monospace;\r\n  /* 1 */\r\n  font-size: 1em;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nAdd the correct font size in all browsers.\r\n*/\r\n\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n\r\n/*\r\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\r\n*/\r\n\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\n\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n\r\nsup {\r\n  top: -0.5em;\r\n}\r\n\r\n/*\r\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\r\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\r\n3. Remove gaps between table borders by default.\r\n*/\r\n\r\ntable {\r\n  text-indent: 0;\r\n  /* 1 */\r\n  border-color: inherit;\r\n  /* 2 */\r\n  border-collapse: collapse;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\n1. Change the font styles in all browsers.\r\n2. Remove the margin in Firefox and Safari.\r\n3. Remove default padding in all browsers.\r\n*/\r\n\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  font-family: inherit;\r\n  /* 1 */\r\n  font-size: 100%;\r\n  /* 1 */\r\n  font-weight: inherit;\r\n  /* 1 */\r\n  line-height: inherit;\r\n  /* 1 */\r\n  color: inherit;\r\n  /* 1 */\r\n  margin: 0;\r\n  /* 2 */\r\n  padding: 0;\r\n  /* 3 */\r\n}\r\n\r\n/*\r\nRemove the inheritance of text transform in Edge and Firefox.\r\n*/\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none;\r\n}\r\n\r\n/*\r\n1. Correct the inability to style clickable types in iOS and Safari.\r\n2. Remove default button styles.\r\n*/\r\n\r\nbutton,\r\n[type="button"],\r\n[type="reset"],\r\n[type="submit"] {\r\n  -webkit-appearance: button;\r\n  /* 1 */\r\n  background-color: transparent;\r\n  /* 2 */\r\n  background-image: none;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nUse the modern Firefox focus style for all focusable elements.\r\n*/\r\n\r\n:-moz-focusring {\r\n  outline: auto;\r\n}\r\n\r\n/*\r\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\r\n*/\r\n\r\n:-moz-ui-invalid {\r\n  box-shadow: none;\r\n}\r\n\r\n/*\r\nAdd the correct vertical alignment in Chrome and Firefox.\r\n*/\r\n\r\nprogress {\r\n  vertical-align: baseline;\r\n}\r\n\r\n/*\r\nCorrect the cursor style of increment and decrement buttons in Safari.\r\n*/\r\n\r\n::-webkit-inner-spin-button,\r\n::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n\r\n/*\r\n1. Correct the odd appearance in Chrome and Safari.\r\n2. Correct the outline style in Safari.\r\n*/\r\n\r\n[type="search"] {\r\n  -webkit-appearance: textfield;\r\n  /* 1 */\r\n  outline-offset: -2px;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nRemove the inner padding in Chrome and Safari on macOS.\r\n*/\r\n\r\n::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/*\r\n1. Correct the inability to style clickable types in iOS and Safari.\r\n2. Change font properties to `inherit` in Safari.\r\n*/\r\n\r\n::-webkit-file-upload-button {\r\n  -webkit-appearance: button;\r\n  /* 1 */\r\n  font: inherit;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nAdd the correct display in Chrome and Safari.\r\n*/\r\n\r\nsummary {\r\n  display: list-item;\r\n}\r\n\r\n/*\r\nRemoves the default spacing and border for appropriate elements.\r\n*/\r\n\r\nblockquote,\r\ndl,\r\ndd,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\nhr,\r\nfigure,\r\np,\r\npre {\r\n  margin: 0;\r\n}\r\n\r\nfieldset {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nlegend {\r\n  padding: 0;\r\n}\r\n\r\nol,\r\nul,\r\nmenu {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/*\r\nPrevent resizing textareas horizontally by default.\r\n*/\r\n\r\ntextarea {\r\n  resize: vertical;\r\n}\r\n\r\n/*\r\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\r\n2. Set the default placeholder color to the user\'s configured gray 400 color.\r\n*/\r\n\r\ninput::-moz-placeholder,\r\ntextarea::-moz-placeholder {\r\n  opacity: 1;\r\n  /* 1 */\r\n  color: #9ca3af;\r\n  /* 2 */\r\n}\r\n\r\ninput::placeholder,\r\ntextarea::placeholder {\r\n  opacity: 1;\r\n  /* 1 */\r\n  color: #9ca3af;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nSet the default cursor for buttons.\r\n*/\r\n\r\nbutton,\r\n[role="button"] {\r\n  cursor: pointer;\r\n}\r\n\r\n/*\r\nMake sure disabled buttons don\'t get the pointer cursor.\r\n*/\r\n\r\n:disabled {\r\n  cursor: default;\r\n}\r\n\r\n/*\r\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\r\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\r\n   This can trigger a poorly considered lint error in some tools but is included by design.\r\n*/\r\n\r\nsvg,\r\nvideo,\r\ncanvas,\r\naudio,\r\niframe,\r\nembed,\r\nobject {\r\n  display: block;\r\n  /* 1 */\r\n  vertical-align: middle;\r\n  /* 2 */\r\n}\r\n\r\n/*\r\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\r\n*/\r\n\r\nvideo {\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n/* Make elements with the HTML hidden attribute stay hidden by default */\r\n\r\n[hidden] {\r\n  display: none;\r\n}\r\n\r\n*,\r\n::before,\r\n::after {\r\n  --tw-border-spacing-x: 0;\r\n  --tw-border-spacing-y: 0;\r\n  --tw-translate-x: 0;\r\n  --tw-translate-y: 0;\r\n  --tw-rotate: 0;\r\n  --tw-skew-x: 0;\r\n  --tw-skew-y: 0;\r\n  --tw-scale-x: 1;\r\n  --tw-scale-y: 1;\r\n  --tw-pan-x: ;\r\n  --tw-pan-y: ;\r\n  --tw-pinch-zoom: ;\r\n  --tw-scroll-snap-strictness: proximity;\r\n  --tw-gradient-from-position: ;\r\n  --tw-gradient-via-position: ;\r\n  --tw-gradient-to-position: ;\r\n  --tw-ordinal: ;\r\n  --tw-slashed-zero: ;\r\n  --tw-numeric-figure: ;\r\n  --tw-numeric-spacing: ;\r\n  --tw-numeric-fraction: ;\r\n  --tw-ring-inset: ;\r\n  --tw-ring-offset-width: 0px;\r\n  --tw-ring-offset-color: #fff;\r\n  --tw-ring-color: rgb(59 130 246 / 0.5);\r\n  --tw-ring-offset-shadow: 0 0 #0000;\r\n  --tw-ring-shadow: 0 0 #0000;\r\n  --tw-shadow: 0 0 #0000;\r\n  --tw-shadow-colored: 0 0 #0000;\r\n  --tw-blur: ;\r\n  --tw-brightness: ;\r\n  --tw-contrast: ;\r\n  --tw-grayscale: ;\r\n  --tw-hue-rotate: ;\r\n  --tw-invert: ;\r\n  --tw-saturate: ;\r\n  --tw-sepia: ;\r\n  --tw-drop-shadow: ;\r\n  --tw-backdrop-blur: ;\r\n  --tw-backdrop-brightness: ;\r\n  --tw-backdrop-contrast: ;\r\n  --tw-backdrop-grayscale: ;\r\n  --tw-backdrop-hue-rotate: ;\r\n  --tw-backdrop-invert: ;\r\n  --tw-backdrop-opacity: ;\r\n  --tw-backdrop-saturate: ;\r\n  --tw-backdrop-sepia: ;\r\n}\r\n\r\n::backdrop {\r\n  --tw-border-spacing-x: 0;\r\n  --tw-border-spacing-y: 0;\r\n  --tw-translate-x: 0;\r\n  --tw-translate-y: 0;\r\n  --tw-rotate: 0;\r\n  --tw-skew-x: 0;\r\n  --tw-skew-y: 0;\r\n  --tw-scale-x: 1;\r\n  --tw-scale-y: 1;\r\n  --tw-pan-x: ;\r\n  --tw-pan-y: ;\r\n  --tw-pinch-zoom: ;\r\n  --tw-scroll-snap-strictness: proximity;\r\n  --tw-gradient-from-position: ;\r\n  --tw-gradient-via-position: ;\r\n  --tw-gradient-to-position: ;\r\n  --tw-ordinal: ;\r\n  --tw-slashed-zero: ;\r\n  --tw-numeric-figure: ;\r\n  --tw-numeric-spacing: ;\r\n  --tw-numeric-fraction: ;\r\n  --tw-ring-inset: ;\r\n  --tw-ring-offset-width: 0px;\r\n  --tw-ring-offset-color: #fff;\r\n  --tw-ring-color: rgb(59 130 246 / 0.5);\r\n  --tw-ring-offset-shadow: 0 0 #0000;\r\n  --tw-ring-shadow: 0 0 #0000;\r\n  --tw-shadow: 0 0 #0000;\r\n  --tw-shadow-colored: 0 0 #0000;\r\n  --tw-blur: ;\r\n  --tw-brightness: ;\r\n  --tw-contrast: ;\r\n  --tw-grayscale: ;\r\n  --tw-hue-rotate: ;\r\n  --tw-invert: ;\r\n  --tw-saturate: ;\r\n  --tw-sepia: ;\r\n  --tw-drop-shadow: ;\r\n  --tw-backdrop-blur: ;\r\n  --tw-backdrop-brightness: ;\r\n  --tw-backdrop-contrast: ;\r\n  --tw-backdrop-grayscale: ;\r\n  --tw-backdrop-hue-rotate: ;\r\n  --tw-backdrop-invert: ;\r\n  --tw-backdrop-opacity: ;\r\n  --tw-backdrop-saturate: ;\r\n  --tw-backdrop-sepia: ;\r\n}\r\n\r\n.static {\r\n  position: static;\r\n}\r\n\r\n.fixed {\r\n  position: fixed;\r\n}\r\n\r\n.absolute {\r\n  position: absolute;\r\n}\r\n\r\n.relative {\r\n  position: relative;\r\n}\r\n\r\n.bottom-\\[30px\\] {\r\n  bottom: 30px;\r\n}\r\n\r\n.right-0 {\r\n  right: 0px;\r\n}\r\n\r\n.right-\\[35px\\] {\r\n  right: 35px;\r\n}\r\n\r\n.top-2 {\r\n  top: 0.5rem;\r\n}\r\n\r\n.\\!z-\\[99\\] {\r\n  z-index: 99 !important;\r\n}\r\n\r\n.z-40 {\r\n  z-index: 40;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.float-left {\r\n  float: left;\r\n}\r\n\r\n.mx-3 {\r\n  margin-left: 0.75rem;\r\n  margin-right: 0.75rem;\r\n}\r\n\r\n.mx-5 {\r\n  margin-left: 1.25rem;\r\n  margin-right: 1.25rem;\r\n}\r\n\r\n.mx-auto {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.my-8 {\r\n  margin-top: 2rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.mb-16 {\r\n  margin-bottom: 4rem;\r\n}\r\n\r\n.mb-2 {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.mb-2\\.5 {\r\n  margin-bottom: 0.625rem;\r\n}\r\n\r\n.mb-3 {\r\n  margin-bottom: 0.75rem;\r\n}\r\n\r\n.mb-4 {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.mb-6 {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.mb-8 {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.mb-9 {\r\n  margin-bottom: 2.25rem;\r\n}\r\n\r\n.ml-1 {\r\n  margin-left: 0.25rem;\r\n}\r\n\r\n.ml-1\\.5 {\r\n  margin-left: 0.375rem;\r\n}\r\n\r\n.ml-2 {\r\n  margin-left: 0.5rem;\r\n}\r\n\r\n.ml-3 {\r\n  margin-left: 0.75rem;\r\n}\r\n\r\n.mr-2 {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.mr-8 {\r\n  margin-right: 2rem;\r\n}\r\n\r\n.mt-0 {\r\n  margin-top: 0px;\r\n}\r\n\r\n.mt-2 {\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.mt-8 {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.block {\r\n  display: block;\r\n}\r\n\r\n.inline-block {\r\n  display: inline-block;\r\n}\r\n\r\n.flex {\r\n  display: flex;\r\n}\r\n\r\n.grid {\r\n  display: grid;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.h-12 {\r\n  height: 3rem;\r\n}\r\n\r\n.h-16 {\r\n  height: 4rem;\r\n}\r\n\r\n.h-4 {\r\n  height: 1rem;\r\n}\r\n\r\n.h-\\[20px\\] {\r\n  height: 20px;\r\n}\r\n\r\n.h-\\[300px\\] {\r\n  height: 300px;\r\n}\r\n\r\n.h-\\[500px\\] {\r\n  height: 500px;\r\n}\r\n\r\n.h-\\[50px\\] {\r\n  height: 50px;\r\n}\r\n\r\n.h-\\[60px\\] {\r\n  height: 60px;\r\n}\r\n\r\n.h-\\[px\\] {\r\n  height: px;\r\n}\r\n\r\n.h-fit {\r\n  height: -moz-fit-content;\r\n  height: fit-content;\r\n}\r\n\r\n.h-full {\r\n  height: 100%;\r\n}\r\n\r\n.h-px {\r\n  height: 1px;\r\n}\r\n\r\n.h-screen {\r\n  height: 100vh;\r\n}\r\n\r\n.min-h-\\[20px\\] {\r\n  min-height: 20px;\r\n}\r\n\r\n.min-h-screen {\r\n  min-height: 100vh;\r\n}\r\n\r\n.w-4 {\r\n  width: 1rem;\r\n}\r\n\r\n.w-\\[100px\\] {\r\n  width: 100px;\r\n}\r\n\r\n.w-\\[200px\\] {\r\n  width: 200px;\r\n}\r\n\r\n.w-\\[20px\\] {\r\n  width: 20px;\r\n}\r\n\r\n.w-\\[60px\\] {\r\n  width: 60px;\r\n}\r\n\r\n.w-fit {\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n}\r\n\r\n.w-full {\r\n  width: 100%;\r\n}\r\n\r\n.w-max {\r\n  width: -moz-max-content;\r\n  width: max-content;\r\n}\r\n\r\n.min-w-\\[20px\\] {\r\n  min-width: 20px;\r\n}\r\n\r\n.max-w-\\[80\\%\\] {\r\n  max-width: 80%;\r\n}\r\n\r\n.max-w-full {\r\n  max-width: 100%;\r\n}\r\n\r\n.flex-1 {\r\n  flex: 1 1 0%;\r\n}\r\n\r\n.cursor-pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.list-none {\r\n  list-style-type: none;\r\n}\r\n\r\n.appearance-none {\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n}\r\n\r\n.grid-flow-row {\r\n  grid-auto-flow: row;\r\n}\r\n\r\n.grid-cols-1 {\r\n  grid-template-columns: repeat(1, minmax(0, 1fr));\r\n}\r\n\r\n.grid-cols-2 {\r\n  grid-template-columns: repeat(2, minmax(0, 1fr));\r\n}\r\n\r\n.flex-row {\r\n  flex-direction: row;\r\n}\r\n\r\n.flex-col {\r\n  flex-direction: column;\r\n}\r\n\r\n.flex-wrap {\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.items-end {\r\n  align-items: flex-end;\r\n}\r\n\r\n.items-center {\r\n  align-items: center;\r\n}\r\n\r\n.justify-center {\r\n  justify-content: center;\r\n}\r\n\r\n.justify-between {\r\n  justify-content: space-between;\r\n}\r\n\r\n.gap-1 {\r\n  gap: 0.25rem;\r\n}\r\n\r\n.gap-2 {\r\n  gap: 0.5rem;\r\n}\r\n\r\n.gap-3 {\r\n  gap: 0.75rem;\r\n}\r\n\r\n.gap-4 {\r\n  gap: 1rem;\r\n}\r\n\r\n.rounded {\r\n  border-radius: 0.25rem;\r\n}\r\n\r\n.rounded-2xl {\r\n  border-radius: 1rem;\r\n}\r\n\r\n.rounded-\\[100px\\] {\r\n  border-radius: 100px;\r\n}\r\n\r\n.rounded-full {\r\n  border-radius: 9999px;\r\n}\r\n\r\n.rounded-md {\r\n  border-radius: 0.375rem;\r\n}\r\n\r\n.rounded-xl {\r\n  border-radius: 0.75rem;\r\n}\r\n\r\n.rounded-\\[300px\\] {\r\n  border-radius: 300px;\r\n}\r\n\r\n.rounded-\\[400px\\] {\r\n  border-radius: 400px;\r\n}\r\n\r\n.border {\r\n  border-width: 1px;\r\n}\r\n\r\n.\\!border-none {\r\n  border-style: none !important;\r\n}\r\n\r\n.\\!border-green-500 {\r\n  --tw-border-opacity: 1 !important;\r\n  border-color: rgb(34 197 94 / var(--tw-border-opacity)) !important;\r\n}\r\n\r\n.\\!border-red-500 {\r\n  --tw-border-opacity: 1 !important;\r\n  border-color: rgb(239 68 68 / var(--tw-border-opacity)) !important;\r\n}\r\n\r\n.border-\\[\\#6a53ff\\] {\r\n  --tw-border-opacity: 1;\r\n  border-color: rgb(106 83 255 / var(--tw-border-opacity));\r\n}\r\n\r\n.border-gray-200 {\r\n  --tw-border-opacity: 1;\r\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\r\n}\r\n\r\n.border-gray-300 {\r\n  --tw-border-opacity: 1;\r\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\r\n}\r\n\r\n.border-green-500 {\r\n  --tw-border-opacity: 1;\r\n  border-color: rgb(34 197 94 / var(--tw-border-opacity));\r\n}\r\n\r\n.border-red-500 {\r\n  --tw-border-opacity: 1;\r\n  border-color: rgb(239 68 68 / var(--tw-border-opacity));\r\n}\r\n\r\n.\\!bg-gray-100 {\r\n  --tw-bg-opacity: 1 !important;\r\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity)) !important;\r\n}\r\n\r\n.\\!bg-white {\r\n  --tw-bg-opacity: 1 !important;\r\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity)) !important;\r\n}\r\n\r\n.bg-blue-500 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-gray-200 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-gray-500 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-gray-600 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-green-200 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(187 247 208 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-red-500 {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-white {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\r\n}\r\n\r\n.bg-white\\/0 {\r\n  background-color: rgb(255 255 255 / 0);\r\n}\r\n\r\n.bg-gradient-to-br {\r\n  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\r\n}\r\n\r\n.bg-cover {\r\n  background-size: cover;\r\n}\r\n\r\n.bg-center {\r\n  background-position: center;\r\n}\r\n\r\n.p-0 {\r\n  padding: 0px;\r\n}\r\n\r\n.p-3 {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.px-2 {\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n}\r\n\r\n.px-3 {\r\n  padding-left: 0.75rem;\r\n  padding-right: 0.75rem;\r\n}\r\n\r\n.px-36 {\r\n  padding-left: 9rem;\r\n  padding-right: 9rem;\r\n}\r\n\r\n.px-4 {\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n}\r\n\r\n.px-5 {\r\n  padding-left: 1.25rem;\r\n  padding-right: 1.25rem;\r\n}\r\n\r\n.px-6 {\r\n  padding-left: 1.5rem;\r\n  padding-right: 1.5rem;\r\n}\r\n\r\n.px-8 {\r\n  padding-left: 2rem;\r\n  padding-right: 2rem;\r\n}\r\n\r\n.py-2 {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.py-5 {\r\n  padding-top: 1.25rem;\r\n  padding-bottom: 1.25rem;\r\n}\r\n\r\n.py-6 {\r\n  padding-top: 1.5rem;\r\n  padding-bottom: 1.5rem;\r\n}\r\n\r\n.py-8 {\r\n  padding-top: 2rem;\r\n  padding-bottom: 2rem;\r\n}\r\n\r\n.py-\\[12px\\] {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n}\r\n\r\n.pl-3 {\r\n  padding-left: 0.75rem;\r\n}\r\n\r\n.pt-3 {\r\n  padding-top: 0.75rem;\r\n}\r\n\r\n.pt-8 {\r\n  padding-top: 2rem;\r\n}\r\n\r\n.text-center {\r\n  text-align: center;\r\n}\r\n\r\n.align-baseline {\r\n  vertical-align: baseline;\r\n}\r\n\r\n.text-3xl {\r\n  font-size: 1.875rem;\r\n  line-height: 2.25rem;\r\n}\r\n\r\n.text-4xl {\r\n  font-size: 2.25rem;\r\n  line-height: 2.5rem;\r\n}\r\n\r\n.text-\\[16px\\] {\r\n  font-size: 16px;\r\n}\r\n\r\n.text-base {\r\n  font-size: 1rem;\r\n  line-height: 1.5rem;\r\n}\r\n\r\n.text-sm {\r\n  font-size: 0.875rem;\r\n  line-height: 1.25rem;\r\n}\r\n\r\n.text-xl {\r\n  font-size: 1.25rem;\r\n  line-height: 1.75rem;\r\n}\r\n\r\n.text-xs {\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n}\r\n\r\n.font-bold {\r\n  font-weight: 700;\r\n}\r\n\r\n.font-medium {\r\n  font-weight: 500;\r\n}\r\n\r\n.font-normal {\r\n  font-weight: 400;\r\n}\r\n\r\n.italic {\r\n  font-style: italic;\r\n}\r\n\r\n.leading-tight {\r\n  line-height: 1.25;\r\n}\r\n\r\n.text-black {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(0 0 0 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-blue-500 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(59 130 246 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-gray-500 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(107 114 128 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-gray-600 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(75 85 99 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-gray-700 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(55 65 81 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-green-500 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(34 197 94 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-red-500 {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(239 68 68 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-white {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(255 255 255 / var(--tw-text-opacity));\r\n}\r\n\r\n.text-white\\/0 {\r\n  color: rgb(255 255 255 / 0);\r\n}\r\n\r\n.shadow {\r\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\r\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),\r\n    0 1px 2px -1px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n}\r\n\r\n.shadow-2xl {\r\n  --tw-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);\r\n  --tw-shadow-colored: 0 25px 50px -12px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n}\r\n\r\n.shadow-md {\r\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\r\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),\r\n    0 2px 4px -2px var(--tw-shadow-color);\r\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\r\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\r\n}\r\n\r\n.outline-none {\r\n  outline: 2px solid transparent;\r\n  outline-offset: 2px;\r\n}\r\n\r\n.transition {\r\n  transition-property: color, background-color, border-color,\r\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\r\n    -webkit-backdrop-filter;\r\n  transition-property: color, background-color, border-color,\r\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\r\n    backdrop-filter;\r\n  transition-property: color, background-color, border-color,\r\n    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,\r\n    backdrop-filter, -webkit-backdrop-filter;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transition-duration: 150ms;\r\n}\r\n\r\n.duration-200 {\r\n  transition-duration: 200ms;\r\n}\r\n\r\n.duration-\\[0\\.2s\\] {\r\n  transition-duration: 0.2s;\r\n}\r\n\r\n.placeholder\\:text-green-500::-moz-placeholder {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(34 197 94 / var(--tw-text-opacity));\r\n}\r\n\r\n.placeholder\\:text-green-500::placeholder {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(34 197 94 / var(--tw-text-opacity));\r\n}\r\n\r\n.placeholder\\:text-red-500::-moz-placeholder {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(239 68 68 / var(--tw-text-opacity));\r\n}\r\n\r\n.placeholder\\:text-red-500::placeholder {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(239 68 68 / var(--tw-text-opacity));\r\n}\r\n\r\n.checked\\:border-none:checked {\r\n  border-style: none;\r\n}\r\n\r\n.checked\\:bg-amber-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(245 158 11 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-blue-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-cyan-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(6 182 212 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-gray-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-green-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-indigo-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(99 102 241 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-lime-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(132 204 22 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-orange-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(249 115 22 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-pink-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(236 72 153 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-purple-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(168 85 247 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-red-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-teal-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(20 184 166 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:bg-yellow-500:checked {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(234 179 8 / var(--tw-bg-opacity));\r\n}\r\n\r\n.checked\\:text-white:checked {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(255 255 255 / var(--tw-text-opacity));\r\n}\r\n\r\n.hover\\:cursor-pointer:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.hover\\:bg-blue-600:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\r\n}\r\n\r\n.hover\\:bg-blue-700:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(29 78 216 / var(--tw-bg-opacity));\r\n}\r\n\r\n.hover\\:bg-gray-700:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\r\n}\r\n\r\n.hover\\:bg-red-600:hover {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity));\r\n}\r\n\r\n.hover\\:text-blue-800:hover {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(30 64 175 / var(--tw-text-opacity));\r\n}\r\n\r\n.focus\\:outline-none:focus {\r\n  outline: 2px solid transparent;\r\n  outline-offset: 2px;\r\n}\r\n\r\n:is(.dark .dark\\:\\!border-green-400) {\r\n  --tw-border-opacity: 1 !important;\r\n  border-color: rgb(74 222 128 / var(--tw-border-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:\\!border-red-400) {\r\n  --tw-border-opacity: 1 !important;\r\n  border-color: rgb(248 113 113 / var(--tw-border-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:\\!border-white\\/10) {\r\n  border-color: rgb(255 255 255 / 0.1) !important;\r\n}\r\n\r\n:is(.dark .dark\\:border-white\\/10) {\r\n  border-color: rgb(255 255 255 / 0.1);\r\n}\r\n\r\n:is(.dark .dark\\:\\!bg-white\\/5) {\r\n  background-color: rgb(255 255 255 / 0.05) !important;\r\n}\r\n\r\n:is(.dark .dark\\:\\!text-green-400) {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:\\!text-red-400) {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:text-gray-600) {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(75 85 99 / var(--tw-text-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:text-white) {\r\n  --tw-text-opacity: 1;\r\n  color: rgb(255 255 255 / var(--tw-text-opacity));\r\n}\r\n\r\n:is(\r\n    .dark .dark\\:placeholder\\:\\!text-\\[rgba\\(255\\2c 255\\2c 255\\2c 0\\.15\\)\\]\r\n  )::-moz-placeholder {\r\n  color: rgba(255, 255, 255, 0.15) !important;\r\n}\r\n\r\n:is(\r\n    .dark .dark\\:placeholder\\:\\!text-\\[rgba\\(255\\2c 255\\2c 255\\2c 0\\.15\\)\\]\r\n  )::placeholder {\r\n  color: rgba(255, 255, 255, 0.15) !important;\r\n}\r\n\r\n:is(.dark .dark\\:placeholder\\:\\!text-green-400)::-moz-placeholder {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:placeholder\\:\\!text-green-400)::placeholder {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(74 222 128 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:placeholder\\:\\!text-red-400)::-moz-placeholder {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:placeholder\\:\\!text-red-400)::placeholder {\r\n  --tw-text-opacity: 1 !important;\r\n  color: rgb(248 113 113 / var(--tw-text-opacity)) !important;\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-amber-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(251 191 36 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-blue-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(96 165 250 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-cyan-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(34 211 238 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-gray-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(156 163 175 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-green-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(74 222 128 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-indigo-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(129 140 248 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-lime-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(163 230 53 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-orange-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(251 146 60 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-pink-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(244 114 182 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-purple-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(192 132 252 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-red-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(248 113 113 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-teal-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(45 212 191 / var(--tw-bg-opacity));\r\n}\r\n\r\n:is(.dark .dark\\:checked\\:bg-yellow-400:checked) {\r\n  --tw-bg-opacity: 1;\r\n  background-color: rgb(250 204 21 / var(--tw-bg-opacity));\r\n}\r\n\r\n@media (min-width: 640px) {\r\n  .sm\\:flex {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .md\\:mx-0 {\r\n    margin-left: 0px;\r\n    margin-right: 0px;\r\n  }\r\n\r\n  .md\\:block {\r\n    display: block;\r\n  }\r\n\r\n  .md\\:px-0 {\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n  }\r\n\r\n  .md\\:pl-4 {\r\n    padding-left: 1rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .lg\\:mb-10 {\r\n    margin-bottom: 2.5rem;\r\n  }\r\n\r\n  .lg\\:w-\\[49vw\\] {\r\n    width: 49vw;\r\n  }\r\n\r\n  .lg\\:max-w-\\[65\\%\\] {\r\n    max-width: 65%;\r\n  }\r\n\r\n  .lg\\:items-center {\r\n    align-items: center;\r\n  }\r\n\r\n  .lg\\:justify-start {\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .lg\\:rounded-bl-\\[120px\\] {\r\n    border-bottom-left-radius: 120px;\r\n  }\r\n\r\n  .lg\\:pl-0 {\r\n    padding-left: 0px;\r\n  }\r\n\r\n  .lg\\:pt-10 {\r\n    padding-top: 2.5rem;\r\n  }\r\n}\r\n.loginimage {\r\n  width: 120px;\r\n  height: 120px;\r\n}\r\n\r\n/* \r\n.waves:hover {\r\n\tposition: absolute;\r\n\ttop:0px;\r\n\tleft: 0px;\r\n\tright: 0px;\r\n\tbottom: 0px;\r\n\tborder-radius: 100%;\r\n\tborder: solid white 5px;\r\n\tanimation-name: spread;\r\n\tanimation-duration: 2s;\r\n\tanimation-delay: 3s;\r\n  animation-duration: 1.3s;\r\n\tanimation-timing-function: ease-out;\r\n\tanimation-fill-mode: backwards;\r\n}\r\n\r\n@keyframes spread{\r\n\t0%{\r\n\t\ttransform: scale(0);\r\n\t\topacity: 1;\r\n\t}\r\n\t40%{\r\n\t\ttransform: scale(0);\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t100%{\r\n\t\ttransform: scale(1);\r\n\t\topacity: 0;\r\n\t}\r\n} */\r\n\r\n.loginbackground {\r\n  /* background-color: rgb(255, 139, 56); */\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    #051937,\r\n    #3c2d5e,\r\n    #7b3d7b,\r\n    #bf4b88,\r\n    #ff6086\r\n  );\r\n}\r\n.backgroundimage {\r\n  width: 500px;\r\n  height: 500px;\r\n  flex: auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 150px;\r\n}\r\n.navtext {\r\n  font-size: x-large;\r\n  color: white;\r\n  font-family: sans-serif;\r\n  border: 2px solid white;\r\n}\r\n\r\n.mainback {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(\r\n      to bottom,\r\n      rgba(255, 255, 255, 0.15) 0%,\r\n      rgba(0, 0, 0, 0.15) 100%\r\n    ),\r\n    radial-gradient(\r\n        at top center,\r\n        rgba(255, 255, 255, 0.4) 0%,\r\n        rgba(0, 0, 0, 0.4) 120%\r\n      )\r\n      #989898;\r\n}\r\n.maindiv{\r\n margin-top: 80px;\r\n}\r\n.images {\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.loggedout {\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -1; /* Place the background behind the content */\r\n  background-size: cover; /* Adjust this as needed */\r\n  background: url(\'./assests/images/bganimation.gif\') no-repeat center center fixed;\r\n}\r\n\r\n@media (min-width: 1280px) {\r\n  .xl\\:max-w-\\[420px\\] {\r\n    max-width: 420px;\r\n  }\r\n\r\n  .xl\\:rounded-bl-\\[200px\\] {\r\n    border-bottom-left-radius: 200px;\r\n  }\r\n}\r\n\r\n@media (min-width: 1536px) {\r\n  .\\32xl\\:w-\\[44vw\\] {\r\n    width: 44vw;\r\n  }\r\n}\r\n\r\n.textcolor {\r\n  color: #0f0f11;\r\n}\r\n\r\n.buttoncolor {\r\n  background-image: linear-gradient(\r\n    to right,\r\n    #051937,\r\n    #262b66,\r\n    #5b3791,\r\n    #9e38b2,\r\n    #e823c6\r\n  );\r\n}\r\n/* .endreportt {\r\n  font-weight: 300;\r\n  width: 200px;\r\n  height: 200px;\r\n} */\r\n.reportbutton {\r\n  background-color: black;\r\n  color: white;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  padding-bottom: 5px;\r\n  padding-top: 5px;\r\n  border: 2px solid white;\r\n  border-radius: 10px;\r\n  width: 100px;\r\n  margin-top: 10px;\r\n}\r\n.inputform {\r\n  width: 300px;\r\n  height: 100px;\r\n  font-size: medium;\r\n  font-family: sans-serif;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.visible {\r\n  display: block; /* or any other appropriate display value */\r\n}\r\n\r\n.textcolor {\r\n  color: white;\r\n}\r\n.marginfooter {\r\n  position: fixed;\r\n  bottom: 0;\r\n  width: 100%;\r\n  \r\n}\r\n.totalwidht{\r\n  height: 100vh;\r\n}\r\n\r\n.marginbat {\r\n  margin-top: 30px;\r\n}\r\n.footercolor {\r\n  justify-content: center;\r\n  align-items: center;\r\n  left: 0;\r\n  height: 60px;\r\n  width: 100%;\r\n  background-color: rgba(255, 255, 255, 0.1); /* Transparent white */\r\n  backdrop-filter: blur(10px); /* Apply a blur effect */ \r\n}\r\n\r\n.footerimage {\r\n  margin-left: 50px;\r\n  margin-right: 50px;\r\n}\r\n.loginnew {\r\n  background: black;\r\n  height: 100vh;\r\n  \r\n}\r\n.dianabtn {\r\n  color: white;\r\n}\r\n.backgroundimage {\r\n  mix-blend-mode: normal;\r\n}\r\n\r\n.signinbutton{\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 160px;\r\n  align-items: center;\r\n}\r\n.heading{\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 30px;\r\n}\r\n.widthbutton{\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.imputWidth{\r\n  width: 500px;\r\n  justify-content: center;\r\n}\r\n\r\n.buttonsize{\r\n  width:100px;\r\n}\r\n.linked{\r\n\r\n  margin-right: 10px;\r\n  margin-top: 70px;\r\n}\r\n.pt-6{\r\npadding-top: 10px;\r\n}\r\n.pt-2{\r\n  padding-top: 5px;\r\n  margin-left: 5px;\r\n}\r\n.pl-2{\r\n  padding-left: 6px;\r\n  padding-right: 2px;\r\n}\r\n\r\n.text-newbuttoncolor{\r\n  display: flex;\r\n  padding-top: 29px;\r\n  font-size: x-large;\r\n  background: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6 );\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n    /* color: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6  ); */\r\n  \r\n  \r\n\r\n}\r\n.text-buttoncolor{\r\n  font-size: medium;\r\n  background: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6 );\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n    /* color: -webkit-linear-gradient(#051937, #262b66, #262b66, #9e38b2,#e823c6  ); */\r\n  \r\n  \r\n\r\n}\r\n\r\n.postiondiv{\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n}\r\n.bg-mainback {\r\n  background-color: #818080;\r\n  box-shadow: 20px;\r\n  box-shadow: #696868;\r\n}\r\n.logoutbutton{\r\n  color: red;\r\n  font-size: medium;\r\n\r\n}\r\n.backimageset{\r\n  z-index: -500;\r\n}\r\n.navigationbar{\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: rgba(255, 255, 255, 0.1); /* Transparent white */\r\n  backdrop-filter: blur(5px); /* Apply a blur effect */\r\n  z-index: 1000; /* Adjust the z-index to place the navbar above other content */\r\n}\r\n.backgoundcolor{\r\n  position: absolute;\r\n  inset: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(118, 118, 118, 0.8);\r\n  z-index: 10;\r\n}'],sourceRoot:""}]);const h=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,f=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(f){var i=p(n);i&&i!==f&&e(t,i,r)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),g=l(n),m=0;m<a.length;++m){var A=a[m];if(!(o[A]||r&&r[A]||g&&g[A]||s&&s[A])){var b=h(n,A);try{c(t,A,b)}catch(e){}}}}return t}},703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),i=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)a.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},f={};function g(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var A=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!d.call(f,e)||!d.call(p,e)&&(h.test(e)?f[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(A,b);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(A,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(A,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),E=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),B=Symbol.for("react.provider"),S=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),z=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var M=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var I,N=Object.assign;function L(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var F=!1;function j(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function U(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case E:return"Portal";case k:return"Profiler";case x:return"StrictMode";case z:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return N({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){K(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return N({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function he(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pe).forEach((function(e){fe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var Ae=N({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(Ae[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ce=null,xe=null;function ke(e){if(e=yi(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=wi(t),Ee(e.stateNode,e.type,t))}}function Be(e){Ce?xe?xe.push(e):xe=[e]:Ce=e}function Se(){if(Ce){var e=Ce,t=xe;if(xe=Ce=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function _e(e,t){return e(t)}function ze(){}var Pe=!1;function Oe(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return _e(e,t,n)}finally{Pe=!1,(null!==Ce||null!==xe)&&(ze(),Se())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=wi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Me=!1;if(u)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Me=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ue){Me=!1}function Re(e,t,n,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ie=!1,Ne=null,Le=!1,Fe=null,je={onError:function(e){Ie=!0,Ne=e}};function Ue(e,t,n,r,i,o,a,s,l){Ie=!1,Ne=null,Re.apply(je,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(qe(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return $e(i),e;if(a===r)return $e(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ve(e);if(null!==t)return t;e=e.sibling}return null}var Ye=i.unstable_scheduleCallback,Ge=i.unstable_cancelCallback,Qe=i.unstable_shouldYield,Xe=i.unstable_requestPaint,Ke=i.unstable_now,Je=i.unstable_getCurrentPriorityLevel,Ze=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,ot=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=dt(s):0!=(o&=a)&&(r=dt(o))}else 0!=(a=n&~i)?r=dt(a):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(o=t&-t)||16===i&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-at(t)),r|=e[n],t&=~i;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function At(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function bt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var yt=0;function vt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Et,Ct,xt,kt,Bt=!1,St=[],_t=null,zt=null,Pt=null,Ot=new Map,Dt=new Map,Mt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":zt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function It(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==t&&null!==(t=yi(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Nt(e){var t=bi(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void kt(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=yi(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ve=r,n.target.dispatchEvent(r),ve=null,t.shift()}return!0}function Ft(e,t,n){Lt(e)&&n.delete(t)}function jt(){Bt=!1,null!==_t&&Lt(_t)&&(_t=null),null!==zt&&Lt(zt)&&(zt=null),null!==Pt&&Lt(Pt)&&(Pt=null),Ot.forEach(Ft),Dt.forEach(Ft)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Bt||(Bt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,jt)))}function qt(e){function t(t){return Ut(t,e)}if(0<St.length){Ut(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Ut(_t,e),null!==zt&&Ut(zt,e),null!==Pt&&Ut(Pt,e),Ot.forEach(t),Dt.forEach(t),n=0;n<Mt.length;n++)(r=Mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Mt.length&&null===(n=Mt[0]).blockedOn;)Nt(n),null===n.blockedOn&&Mt.shift()}var Wt=v.ReactCurrentBatchConfig,$t=!0;function Ht(e,t,n,r){var i=yt,o=Wt.transition;Wt.transition=null;try{yt=1,Yt(e,t,n,r)}finally{yt=i,Wt.transition=o}}function Vt(e,t,n,r){var i=yt,o=Wt.transition;Wt.transition=null;try{yt=4,Yt(e,t,n,r)}finally{yt=i,Wt.transition=o}}function Yt(e,t,n,r){if($t){var i=Qt(e,t,n,r);if(null===i)$r(e,t,r,Gt,n),Rt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return _t=It(_t,e,t,n,r,i),!0;case"dragenter":return zt=It(zt,e,t,n,r,i),!0;case"mouseover":return Pt=It(Pt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Ot.set(o,It(Ot.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Dt.set(o,It(Dt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Tt.indexOf(e)){for(;null!==i;){var o=yi(i);if(null!==o&&wt(o),null===(o=Qt(e,t,n,r))&&$r(e,t,r,Gt,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Gt=null;function Qt(e,t,n,r){if(Gt=null,null!==(e=bi(e=we(r))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,i="value"in Kt?Kt.value:Kt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Zt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return N(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(cn),dn=N({},cn,{view:0,detail:0}),hn=on(dn),pn=N({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),fn=on(pn),gn=on(N({},pn,{dataTransfer:0})),mn=on(N({},dn,{relatedTarget:0})),An=on(N({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=N({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=on(bn),vn=on(N({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function kn(){return xn}var Bn=N({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Sn=on(Bn),_n=on(N({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),zn=on(N({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Pn=on(N({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=N({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=on(On),Mn=[9,13,27,32],Tn=u&&"CompositionEvent"in window,Rn=null;u&&"documentMode"in document&&(Rn=document.documentMode);var In=u&&"TextEvent"in window&&!Rn,Nn=u&&(!Tn||Rn&&8<Rn&&11>=Rn),Ln=String.fromCharCode(32),Fn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Be(r),0<(t=Vr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Yn=null;function Gn(e){Lr(e,0)}function Qn(e){if(Y(vi(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(u){var Jn;if(u){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Kn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Vn&&(Vn.detachEvent("onpropertychange",nr),Yn=Vn=null)}function nr(e){if("value"===e.propertyName&&Qn(Yn)){var t=[];Hn(t,Yn,e,we(e)),Oe(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Vn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Yn)}function or(e,t){if("click"===e)return Qn(t)}function ar(e,t){if("input"===e||"change"===e)return Qn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!d.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function fr(e){var t=hr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=ur(n,o);var a=ur(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=u&&"documentMode"in document&&11>=document.documentMode,mr=null,Ar=null,br=null,yr=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==G(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=Vr(Ar,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Cr={},xr={};function kr(e){if(Cr[e])return Cr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Cr[e]=n[t];return e}u&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Br=kr("animationend"),Sr=kr("animationiteration"),_r=kr("animationstart"),zr=kr("transitionend"),Pr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Pr.set(e,t),l(t,[e])}for(var Mr=0;Mr<Or.length;Mr++){var Tr=Or[Mr];Dr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}Dr(Br,"onAnimationEnd"),Dr(Sr,"onAnimationIteration"),Dr(_r,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(zr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Nr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,l,c){if(Ue.apply(this,arguments),Ie){if(!Ie)throw Error(o(198));var u=Ne;Ie=!1,Ne=null,Le||(Le=!0,Fe=u)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Nr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Nr(i,s,c),o=l}}}if(Le)throw e=Fe,Le=!1,Fe=null,e}function Fr(e,t){var n=t[gi];void 0===n&&(n=t[gi]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Ur]){e[Ur]=!0,a.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,jr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Xt(t)){case 1:var i=Ht;break;case 4:i=Vt;break;default:i=Yt}n=i.bind(null,t,n,e),i=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=bi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}Oe((function(){var r=o,i=we(n),a=[];e:{var s=Pr.get(e);if(void 0!==s){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Sn;break;case"focusin":c="focus",l=mn;break;case"focusout":c="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=fn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=zn;break;case Br:case Sr:case _r:l=An;break;case zr:l=Pn;break;case"scroll":l=hn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_n}var u=0!=(4&t),d=!u&&"scroll"===e,h=u?null!==s?s+"Capture":null:s;u=[];for(var p,f=r;null!==f;){var g=(p=f).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==h&&null!=(g=De(f,h))&&u.push(Hr(f,g,p))),d)break;f=f.return}0<u.length&&(s=new l(s,c,null,n,i),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===ve||!(c=n.relatedTarget||n.fromElement)||!bi(c)&&!c[fi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?bi(c):null)&&(c!==(d=qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=fn,g="onMouseLeave",h="onMouseEnter",f="mouse","pointerout"!==e&&"pointerover"!==e||(u=_n,g="onPointerLeave",h="onPointerEnter",f="pointer"),d=null==l?s:vi(l),p=null==c?s:vi(c),(s=new u(g,f+"leave",l,n,i)).target=d,s.relatedTarget=p,g=null,bi(i)===r&&((u=new u(h,f+"enter",c,n,i)).target=p,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(h=c,f=0,p=u=l;p;p=Yr(p))f++;for(p=0,g=h;g;g=Yr(g))p++;for(;0<f-p;)u=Yr(u),f--;for(;0<p-f;)h=Yr(h),p--;for(;f--;){if(u===h||null!==h&&u===h.alternate)break e;u=Yr(u),h=Yr(h)}u=null}else u=null;null!==l&&Gr(a,s,l,u,!1),null!==c&&null!==d&&Gr(a,d,c,u,!0)}if("select"===(l=(s=r?vi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if($n(s))if(Kn)m=ar;else{m=ir;var A=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=or);switch(m&&(m=m(e,r))?Hn(a,m,n,i):(A&&A(e,s,r),"focusout"===e&&(A=s._wrapperState)&&A.controlled&&"number"===s.type&&ee(s,"number",s.value)),A=r?vi(r):window,e){case"focusin":($n(A)||"true"===A.contentEditable)&&(mr=A,Ar=r,br=null);break;case"focusout":br=Ar=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,vr(a,n,i);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":vr(a,n,i)}var b;if(Tn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else qn?jn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Nn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==y?"onCompositionEnd"===y&&qn&&(b=en()):(Jt="value"in(Kt=i)?Kt.value:Kt.textContent,qn=!0)),0<(A=Vr(r,y)).length&&(y=new vn(y,e,null,n,i),a.push({event:y,listeners:A}),(b||null!==(b=Un(n)))&&(y.data=b))),(b=In?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Fn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Tn&&jn(e,t)?(e=en(),Zt=Jt=Kt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(i=new vn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=b)}Lr(a,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=De(e,n))&&r.unshift(Hr(e,o,i)),null!=(o=De(e,t))&&r.push(Hr(e,o,i))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=De(n,o))&&a.unshift(Hr(n,l,s)):i||null!=(l=De(n,o))&&a.push(Hr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Xr,"")}function Jr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(e){return oi.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);qt(t)}function ci(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ui(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var di=Math.random().toString(36).slice(2),hi="__reactFiber$"+di,pi="__reactProps$"+di,fi="__reactContainer$"+di,gi="__reactEvents$"+di,mi="__reactListeners$"+di,Ai="__reactHandles$"+di;function bi(e){var t=e[hi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fi]||n[hi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ui(e);null!==e;){if(n=e[hi])return n;e=ui(e)}return t}n=(e=n).parentNode}return null}function yi(e){return!(e=e[hi]||e[fi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function vi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wi(e){return e[pi]||null}var Ei=[],Ci=-1;function xi(e){return{current:e}}function ki(e){0>Ci||(e.current=Ei[Ci],Ei[Ci]=null,Ci--)}function Bi(e,t){Ci++,Ei[Ci]=e.current,e.current=t}var Si={},_i=xi(Si),zi=xi(!1),Pi=Si;function Oi(e,t){var n=e.type.contextTypes;if(!n)return Si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Di(e){return null!=e.childContextTypes}function Mi(){ki(zi),ki(_i)}function Ti(e,t,n){if(_i.current!==Si)throw Error(o(168));Bi(_i,t),Bi(zi,n)}function Ri(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(o(108,W(e)||"Unknown",i));return N({},n,r)}function Ii(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Si,Pi=_i.current,Bi(_i,e),Bi(zi,zi.current),!0}function Ni(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ri(e,t,Pi),r.__reactInternalMemoizedMergedChildContext=e,ki(zi),ki(_i),Bi(_i,e)):ki(zi),Bi(zi,n)}var Li=null,Fi=!1,ji=!1;function Ui(e){null===Li?Li=[e]:Li.push(e)}function qi(){if(!ji&&null!==Li){ji=!0;var e=0,t=yt;try{var n=Li;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Li=null,Fi=!1}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),Ye(Ze,qi),t}finally{yt=t,ji=!1}}return null}var Wi=[],$i=0,Hi=null,Vi=0,Yi=[],Gi=0,Qi=null,Xi=1,Ki="";function Ji(e,t){Wi[$i++]=Vi,Wi[$i++]=Hi,Hi=e,Vi=t}function Zi(e,t,n){Yi[Gi++]=Xi,Yi[Gi++]=Ki,Yi[Gi++]=Qi,Qi=e;var r=Xi;e=Ki;var i=32-at(r)-1;r&=~(1<<i),n+=1;var o=32-at(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Xi=1<<32-at(t)+i|n<<i|r,Ki=o+e}else Xi=1<<o|n<<i|r,Ki=e}function eo(e){null!==e.return&&(Ji(e,1),Zi(e,1,0))}function to(e){for(;e===Hi;)Hi=Wi[--$i],Wi[$i]=null,Vi=Wi[--$i],Wi[$i]=null;for(;e===Qi;)Qi=Yi[--Gi],Yi[Gi]=null,Ki=Yi[--Gi],Yi[Gi]=null,Xi=Yi[--Gi],Yi[Gi]=null}var no=null,ro=null,io=!1,oo=null;function ao(e,t){var n=Dc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ci(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qi?{id:Xi,overflow:Ki}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Dc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function co(e){if(io){var t=ro;if(t){var n=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ci(n.nextSibling);var r=no;t&&so(e,t)?ao(r,n):(e.flags=-4097&e.flags|2,io=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,io=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function ho(e){if(e!==no)return!1;if(!io)return uo(e),io=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ro)){if(lo(e))throw po(),Error(o(418));for(;t;)ao(e,t),t=ci(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ci(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ci(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ci(e.nextSibling)}function fo(){ro=no=null,io=!1}function go(e){null===oo?oo=[e]:oo.push(e)}var mo=v.ReactCurrentBatchConfig;function Ao(e,t){if(e&&e.defaultProps){for(var n in t=N({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var bo=xi(null),yo=null,vo=null,wo=null;function Eo(){wo=vo=yo=null}function Co(e){var t=bo.current;ki(bo),e._currentValue=t}function xo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t){yo=e,wo=vo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(vs=!0),e.firstContext=null)}function Bo(e){var t=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:t,next:null},null===vo){if(null===yo)throw Error(o(308));vo=e,yo.dependencies={lanes:0,firstContext:e}}else vo=vo.next=e;return t}var So=null;function _o(e){null===So?So=[e]:So.push(e)}function zo(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,_o(t)):(n.next=i.next,i.next=n),t.interleaved=n,Po(e,r)}function Po(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Oo=!1;function Do(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Mo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function To(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ro(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&zl)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Po(e,n)}return null===(i=r.interleaved)?(t.next=t,_o(r)):(t.next=i.next,i.next=t),r.interleaved=t,Po(e,n)}function Io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}function No(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Lo(e,t,n,r){var i=e.updateQueue;Oo=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?o=c:a.next=c,a=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var d=i.baseState;for(a=0,u=c=l=null,s=o;;){var h=s.lane,p=s.eventTime;if((r&h)===h){null!==u&&(u=u.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var f=e,g=s;switch(h=t,p=n,g.tag){case 1:if("function"==typeof(f=g.payload)){d=f.call(p,d,h);break e}d=f;break e;case 3:f.flags=-65537&f.flags|128;case 0:if(null==(h="function"==typeof(f=g.payload)?f.call(p,d,h):f))break e;d=N({},d,h);break e;case 2:Oo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(h=i.effects)?i.effects=[s]:h.push(s))}else p={eventTime:p,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=p,l=d):u=u.next=p,a|=h;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(h=s).next,h.next=null,i.lastBaseUpdate=h,i.shared.pending=null}}if(null===u&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(t=i.shared.interleaved)){i=t;do{a|=i.lane,i=i.next}while(i!==t)}else null===o&&(i.shared.lanes=0);Nl|=a,e.lanes=a,e.memoizedState=d}}function Fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var jo=(new r.Component).refs;function Uo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:N({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var qo={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),i=nc(e),o=To(r,i);o.payload=t,null!=n&&(o.callback=n),null!==(t=Ro(e,o,i))&&(rc(t,e,i,r),Io(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),i=nc(e),o=To(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Ro(e,o,i))&&(rc(t,e,i,r),Io(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),i=To(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Ro(e,i,r))&&(rc(t,e,r,n),Io(t,e,r))}};function Wo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function $o(e,t,n){var r=!1,i=Si,o=t.contextType;return"object"==typeof o&&null!==o?o=Bo(o):(i=Di(t)?Pi:_i.current,o=(r=null!=(r=t.contextTypes))?Oi(e,i):Si),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=qo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ho(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&qo.enqueueReplaceState(t,t.state,null)}function Vo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=jo,Do(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=Bo(o):(o=Di(t)?Pi:_i.current,i.context=Oi(e,o)),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Uo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&qo.enqueueReplaceState(i,i.state,null),Lo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Yo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=i.refs;t===jo&&(t=i.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qo(e){return(0,e._init)(e._payload)}function Xo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tc(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Lc(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){var o=n.type;return o===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===D&&Qo(o)===t.type)?((r=i(t,n.props)).ref=Yo(e,t,n),r.return=e,r):((r=Rc(n.type,n.key,n.props,null,e.mode,r)).ref=Yo(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fc(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Ic(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Rc(t.type,t.key,t.props,null,e.mode,n)).ref=Yo(e,null,t),n.return=e,n;case E:return(t=Fc(t,e.mode,n)).return=e,t;case D:return h(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Ic(t,e.mode,n,null)).return=e,t;Go(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?c(e,t,n,r):null;case E:return n.key===i?u(e,t,n,r):null;case D:return p(e,t,(i=n._init)(n._payload),r)}if(te(n)||R(n))return null!==i?null:d(e,t,n,r,null);Go(e,n)}return null}function f(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case E:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case D:return f(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||R(r))return d(t,e=e.get(n)||null,r,i,null);Go(t,r)}return null}function g(i,o,s,l){for(var c=null,u=null,d=o,g=o=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var A=p(i,d,s[g],l);if(null===A){null===d&&(d=m);break}e&&d&&null===A.alternate&&t(i,d),o=a(A,o,g),null===u?c=A:u.sibling=A,u=A,d=m}if(g===s.length)return n(i,d),io&&Ji(i,g),c;if(null===d){for(;g<s.length;g++)null!==(d=h(i,s[g],l))&&(o=a(d,o,g),null===u?c=d:u.sibling=d,u=d);return io&&Ji(i,g),c}for(d=r(i,d);g<s.length;g++)null!==(m=f(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),o=a(m,o,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),io&&Ji(i,g),c}function m(i,s,l,c){var u=R(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var d=u=null,g=s,m=s=0,A=null,b=l.next();null!==g&&!b.done;m++,b=l.next()){g.index>m?(A=g,g=null):A=g.sibling;var y=p(i,g,b.value,c);if(null===y){null===g&&(g=A);break}e&&g&&null===y.alternate&&t(i,g),s=a(y,s,m),null===d?u=y:d.sibling=y,d=y,g=A}if(b.done)return n(i,g),io&&Ji(i,m),u;if(null===g){for(;!b.done;m++,b=l.next())null!==(b=h(i,b.value,c))&&(s=a(b,s,m),null===d?u=b:d.sibling=b,d=b);return io&&Ji(i,m),u}for(g=r(i,g);!b.done;m++,b=l.next())null!==(b=f(g,i,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=a(b,s,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(i,e)})),io&&Ji(i,m),u}return function e(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===C&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var c=a.key,u=o;null!==u;){if(u.key===c){if((c=a.type)===C){if(7===u.tag){n(r,u.sibling),(o=i(u,a.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===D&&Qo(c)===u.type){n(r,u.sibling),(o=i(u,a.props)).ref=Yo(r,u,a),o.return=r,r=o;break e}n(r,u);break}t(r,u),u=u.sibling}a.type===C?((o=Ic(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Rc(a.type,a.key,a.props,null,r.mode,l)).ref=Yo(r,o,a),l.return=r,r=l)}return s(r);case E:e:{for(u=a.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fc(a,r.mode,l)).return=r,r=o}return s(r);case D:return e(r,o,(u=a._init)(a._payload),l)}if(te(a))return g(r,o,a,l);if(R(a))return m(r,o,a,l);Go(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Lc(a,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var Ko=Xo(!0),Jo=Xo(!1),Zo={},ea=xi(Zo),ta=xi(Zo),na=xi(Zo);function ra(e){if(e===Zo)throw Error(o(174));return e}function ia(e,t){switch(Bi(na,t),Bi(ta,e),Bi(ea,Zo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ki(ea),Bi(ea,t)}function oa(){ki(ea),ki(ta),ki(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(Bi(ta,e),Bi(ea,n))}function sa(e){ta.current===e&&(ki(ea),ki(ta))}var la=xi(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ua=[];function da(){for(var e=0;e<ua.length;e++)ua[e]._workInProgressVersionPrimary=null;ua.length=0}var ha=v.ReactCurrentDispatcher,pa=v.ReactCurrentBatchConfig,fa=0,ga=null,ma=null,Aa=null,ba=!1,ya=!1,va=0,wa=0;function Ea(){throw Error(o(321))}function Ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function xa(e,t,n,r,i,a){if(fa=a,ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ha.current=null===e||null===e.memoizedState?ss:ls,e=n(r,i),ya){a=0;do{if(ya=!1,va=0,25<=a)throw Error(o(301));a+=1,Aa=ma=null,t.updateQueue=null,ha.current=cs,e=n(r,i)}while(ya)}if(ha.current=as,t=null!==ma&&null!==ma.next,fa=0,Aa=ma=ga=null,ba=!1,t)throw Error(o(300));return e}function ka(){var e=0!==va;return va=0,e}function Ba(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Aa?ga.memoizedState=Aa=e:Aa=Aa.next=e,Aa}function Sa(){if(null===ma){var e=ga.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===Aa?ga.memoizedState:Aa.next;if(null!==t)Aa=t,ma=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===Aa?ga.memoizedState=Aa=e:Aa=Aa.next=e}return Aa}function _a(e,t){return"function"==typeof t?t(e):t}function za(e){var t=Sa(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ma,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,c=null,u=a;do{var d=u.lane;if((fa&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var h={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=h,s=r):c=c.next=h,ga.lanes|=d,Nl|=d}u=u.next}while(null!==u&&u!==a);null===c?s=r:c.next=l,sr(r,t.memoizedState)||(vs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{a=i.lane,ga.lanes|=a,Nl|=a,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Pa(e){var t=Sa(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);sr(a,t.memoizedState)||(vs=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Oa(){}function Da(e,t){var n=ga,r=Sa(),i=t(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,vs=!0),r=r.queue,$a(Ra.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==Aa&&1&Aa.memoizedState.tag){if(n.flags|=2048,Fa(9,Ta.bind(null,n,r,i,t),void 0,null),null===Pl)throw Error(o(349));0!=(30&fa)||Ma(n,t,i)}return i}function Ma(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ta(e,t,n,r){t.value=n,t.getSnapshot=r,Ia(t)&&Na(e)}function Ra(e,t,n){return n((function(){Ia(t)&&Na(e)}))}function Ia(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Na(e){var t=Po(e,1);null!==t&&rc(t,e,1,-1)}function La(e){var t=Ba();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_a,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,ga,e),[t.memoizedState,e]}function Fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ja(){return Sa().memoizedState}function Ua(e,t,n,r){var i=Ba();ga.flags|=e,i.memoizedState=Fa(1|t,n,void 0,void 0===r?null:r)}function qa(e,t,n,r){var i=Sa();r=void 0===r?null:r;var o=void 0;if(null!==ma){var a=ma.memoizedState;if(o=a.destroy,null!==r&&Ca(r,a.deps))return void(i.memoizedState=Fa(t,n,o,r))}ga.flags|=e,i.memoizedState=Fa(1|t,n,o,r)}function Wa(e,t){return Ua(8390656,8,e,t)}function $a(e,t){return qa(2048,8,e,t)}function Ha(e,t){return qa(4,2,e,t)}function Va(e,t){return qa(4,4,e,t)}function Ya(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ga(e,t,n){return n=null!=n?n.concat([e]):null,qa(4,4,Ya.bind(null,t,e),n)}function Qa(){}function Xa(e,t){var n=Sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ca(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ka(e,t){var n=Sa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ca(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ja(e,t,n){return 0==(21&fa)?(e.baseState&&(e.baseState=!1,vs=!0),e.memoizedState=n):(sr(n,t)||(n=gt(),ga.lanes|=n,Nl|=n,e.baseState=!0),t)}function Za(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{yt=n,pa.transition=r}}function es(){return Sa().memoizedState}function ts(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?is(t,n):null!==(n=zo(e,t,n,r))&&(rc(n,e,r,tc()),os(n,t,r))}function ns(e,t,n){var r=nc(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))is(t,i);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=t.interleaved;return null===l?(i.next=i,_o(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=zo(e,t,i,r))&&(rc(n,e,r,i=tc()),os(n,t,r))}}function rs(e){var t=e.alternate;return e===ga||null!==t&&t===ga}function is(e,t){ya=ba=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function os(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}var as={readContext:Bo,useCallback:Ea,useContext:Ea,useEffect:Ea,useImperativeHandle:Ea,useInsertionEffect:Ea,useLayoutEffect:Ea,useMemo:Ea,useReducer:Ea,useRef:Ea,useState:Ea,useDebugValue:Ea,useDeferredValue:Ea,useTransition:Ea,useMutableSource:Ea,useSyncExternalStore:Ea,useId:Ea,unstable_isNewReconciler:!1},ss={readContext:Bo,useCallback:function(e,t){return Ba().memoizedState=[e,void 0===t?null:t],e},useContext:Bo,useEffect:Wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ua(4194308,4,Ya.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ua(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ua(4,2,e,t)},useMemo:function(e,t){var n=Ba();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ba();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,ga,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ba().memoizedState=e},useState:La,useDebugValue:Qa,useDeferredValue:function(e){return Ba().memoizedState=e},useTransition:function(){var e=La(!1),t=e[0];return e=Za.bind(null,e[1]),Ba().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ga,i=Ba();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Pl)throw Error(o(349));0!=(30&fa)||Ma(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Wa(Ra.bind(null,r,a,e),[e]),r.flags|=2048,Fa(9,Ta.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Ba(),t=Pl.identifierPrefix;if(io){var n=Ki;t=":"+t+"R"+(n=(Xi&~(1<<32-at(Xi)-1)).toString(32)+n),0<(n=va++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ls={readContext:Bo,useCallback:Xa,useContext:Bo,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Va,useMemo:Ka,useReducer:za,useRef:ja,useState:function(){return za(_a)},useDebugValue:Qa,useDeferredValue:function(e){return Ja(Sa(),ma.memoizedState,e)},useTransition:function(){return[za(_a)[0],Sa().memoizedState]},useMutableSource:Oa,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1},cs={readContext:Bo,useCallback:Xa,useContext:Bo,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Va,useMemo:Ka,useReducer:Pa,useRef:ja,useState:function(){return Pa(_a)},useDebugValue:Qa,useDeferredValue:function(e){var t=Sa();return null===ma?t.memoizedState=e:Ja(t,ma.memoizedState,e)},useTransition:function(){return[Pa(_a)[0],Sa().memoizedState]},useMutableSource:Oa,useSyncExternalStore:Da,useId:es,unstable_isNewReconciler:!1};function us(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function hs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function fs(e,t,n){(n=To(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,Vl=r),hs(0,t)},n}function gs(e,t,n){(n=To(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){hs(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){hs(0,t),"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Bc.bind(null,e,t,n),t.then(e,e))}function As(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bs(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=To(-1,1)).tag=2,Ro(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var ys=v.ReactCurrentOwner,vs=!1;function ws(e,t,n,r){t.child=null===e?Jo(t,null,n,r):Ko(t,e.child,n,r)}function Es(e,t,n,r,i){n=n.render;var o=t.ref;return ko(t,i),r=xa(e,t,n,r,o,i),n=ka(),null===e||vs?(io&&n&&eo(t),t.flags|=1,ws(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Hs(e,t,i))}function Cs(e,t,n,r,i){if(null===e){var o=n.type;return"function"!=typeof o||Mc(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Rc(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,xs(e,t,o,r,i))}if(o=e.child,0==(e.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return Hs(e,t,i)}return t.flags|=1,(e=Tc(o,r)).ref=t.ref,e.return=t,t.child=e}function xs(e,t,n,r,i){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===t.ref){if(vs=!1,t.pendingProps=r=o,0==(e.lanes&i))return t.lanes=e.lanes,Hs(e,t,i);0!=(131072&e.flags)&&(vs=!0)}}return Ss(e,t,n,r,i)}function ks(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Bi(Tl,Ml),Ml|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Bi(Tl,Ml),Ml|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Bi(Tl,Ml),Ml|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Bi(Tl,Ml),Ml|=r;return ws(e,t,i,n),t.child}function Bs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ss(e,t,n,r,i){var o=Di(n)?Pi:_i.current;return o=Oi(t,o),ko(t,i),n=xa(e,t,n,r,o,i),r=ka(),null===e||vs?(io&&r&&eo(t),t.flags|=1,ws(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Hs(e,t,i))}function _s(e,t,n,r,i){if(Di(n)){var o=!0;Ii(t)}else o=!1;if(ko(t,i),null===t.stateNode)$s(e,t),$o(t,n,r),Vo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?Bo(c):Oi(t,c=Di(n)?Pi:_i.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&Ho(t,a,r,c),Oo=!1;var h=t.memoizedState;a.state=h,Lo(t,r,a,i),l=t.memoizedState,s!==r||h!==l||zi.current||Oo?("function"==typeof u&&(Uo(t,n,u,r),l=t.memoizedState),(s=Oo||Wo(t,n,s,r,h,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Mo(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Ao(t.type,s),a.props=c,d=t.pendingProps,h=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Bo(l):Oi(t,l=Di(n)?Pi:_i.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||h!==l)&&Ho(t,a,r,l),Oo=!1,h=t.memoizedState,a.state=h,Lo(t,r,a,i);var f=t.memoizedState;s!==d||h!==f||zi.current||Oo?("function"==typeof p&&(Uo(t,n,p,r),f=t.memoizedState),(c=Oo||Wo(t,n,c,r,h,f,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),r=!1)}return zs(e,t,n,r,o,i)}function zs(e,t,n,r,i,o){Bs(e,t);var a=0!=(128&t.flags);if(!r&&!a)return i&&Ni(t,n,!1),Hs(e,t,o);r=t.stateNode,ys.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ko(t,e.child,null,o),t.child=Ko(t,null,s,o)):ws(e,t,s,o),t.memoizedState=r.state,i&&Ni(t,n,!0),t.child}function Ps(e){var t=e.stateNode;t.pendingContext?Ti(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ti(0,t.context,!1),ia(e,t.containerInfo)}function Os(e,t,n,r,i){return fo(),go(i),t.flags|=256,ws(e,t,n,r),t.child}var Ds,Ms,Ts,Rs,Is={dehydrated:null,treeContext:null,retryLane:0};function Ns(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,t,n){var r,i=t.pendingProps,a=la.current,s=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Bi(la,1&a),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Nc(l,i,0,null),e=Ic(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Ns(n),t.memoizedState=Is,e):Fs(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,i,a,s){if(n)return 256&t.flags?(t.flags&=-257,js(e,t,s,r=ds(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,i=t.mode,r=Nc({mode:"visible",children:r.children},i,0,null),(a=Ic(a,i,s,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Ko(t,e.child,null,s),t.child.memoizedState=Ns(s),t.memoizedState=Is,a);if(0==(1&t.mode))return js(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,js(e,t,s,r=ds(a=Error(o(419)),r,void 0))}if(l=0!=(s&e.childLanes),vs||l){if(null!==(r=Pl)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,Po(e,i),rc(r,e,i,-1))}return mc(),js(e,t,s,r=ds(Error(o(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=_c.bind(null,e),i._reactRetry=t,null):(e=a.treeContext,ro=ci(i.nextSibling),no=t,io=!0,oo=null,null!==e&&(Yi[Gi++]=Xi,Yi[Gi++]=Ki,Yi[Gi++]=Qi,Xi=e.id,Ki=e.overflow,Qi=t),(t=Fs(t,r.children)).flags|=4096,t)}(e,t,l,i,r,a,n);if(s){s=i.fallback,l=t.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==a?((i=t.child).childLanes=0,i.pendingProps=c,t.deletions=null):(i=Tc(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=Tc(r,s):(s=Ic(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?Ns(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Is,i}return e=(s=e.child).sibling,i=Tc(s,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function Fs(e,t){return(t=Nc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function js(e,t,n,r){return null!==r&&go(r),Ko(t,e.child,null,n),(e=Fs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Us(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xo(e.return,t,n)}function qs(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function Ws(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ws(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Us(e,n,t);else if(19===e.tag)Us(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Bi(la,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),qs(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ca(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}qs(t,!0,n,null,o);break;case"together":qs(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $s(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Nl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Tc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vs(e,t){if(!io)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ys(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gs(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ys(t),null;case 1:case 17:return Di(t.type)&&Mi(),Ys(t),null;case 3:return r=t.stateNode,oa(),ki(zi),ki(_i),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ho(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(sc(oo),oo=null))),Ms(e,t),Ys(t),null;case 5:sa(t);var i=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Ts(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Ys(t),null}if(e=ra(ea.current),ho(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[hi]=t,r[pi]=a,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<Rr.length;i++)Fr(Rr[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":ie(r,a),Fr("invalid",r)}for(var l in be(n,a),i=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,c,e),i=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":V(r),Z(r,a,!0);break;case"textarea":V(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[hi]=t,e[pi]=r,Ds(e,t,!1,!1),t.stateNode=e;e:{switch(l=ye(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),i=r;break;case"iframe":case"object":case"embed":Fr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Rr.length;i++)Fr(Rr[i],e);i=r;break;case"source":Fr("error",e),i=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),i=r;break;case"details":Fr("toggle",e),i=r;break;case"input":X(e,r),i=Q(e,r),Fr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=N({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Fr("invalid",e)}for(a in be(n,i),c=i)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?me(e,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===a?"string"==typeof u?("textarea"!==n||""!==u)&&he(e,u):"number"==typeof u&&he(e,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Fr("scroll",e):null!=u&&y(e,a,u,l))}switch(n){case"input":V(e),Z(e,r,!1);break;case"textarea":V(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ys(t),null;case 6:if(e&&null!=t.stateNode)Rs(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ea.current),ho(t)){if(r=t.stateNode,n=t.memoizedProps,r[hi]=t,(a=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[hi]=t,t.stateNode=r}return Ys(t),null;case 13:if(ki(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),fo(),t.flags|=98560,a=!1;else if(a=ho(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[hi]=t}else fo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ys(t),a=!1}else null!==oo&&(sc(oo),oo=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Rl&&(Rl=3):mc())),null!==t.updateQueue&&(t.flags|=4),Ys(t),null);case 4:return oa(),Ms(e,t),null===e&&qr(t.stateNode.containerInfo),Ys(t),null;case 10:return Co(t.type._context),Ys(t),null;case 19:if(ki(la),null===(a=t.memoizedState))return Ys(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)Vs(a,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ca(e))){for(t.flags|=128,Vs(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Bi(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Ke()>Wl&&(t.flags|=128,r=!0,Vs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ca(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Ys(t),null}else 2*Ke()-a.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=128,r=!0,Vs(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Ke(),t.sibling=null,n=la.current,Bi(la,r?1&n|2:1&n),t):(Ys(t),null);case 22:case 23:return hc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ml)&&(Ys(t),6&t.subtreeFlags&&(t.flags|=8192)):Ys(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Qs(e,t){switch(to(t),t.tag){case 1:return Di(t.type)&&Mi(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oa(),ki(zi),ki(_i),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return sa(t),null;case 13:if(ki(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));fo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ki(la),null;case 4:return oa(),null;case 10:return Co(t.type._context),null;case 22:case 23:return hc(),null;default:return null}}Ds=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ms=function(){},Ts=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ra(ea.current);var o,a=null;switch(n){case"input":i=Q(e,i),r=Q(e,r),a=[];break;case"select":i=N({},i,{value:void 0}),r=N({},r,{value:void 0}),a=[];break;case"textarea":i=re(e,i),r=re(e,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in be(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(a||(a=[]),a.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Fr("scroll",e),a||l===c||(a=[])):(a=a||[]).push(u,c))}n&&(a=a||[]).push("style",n);var u=a;(t.updateQueue=u)&&(t.flags|=4)}},Rs=function(e,t,n,r){n!==r&&(t.flags|=4)};var Xs=!1,Ks=!1,Js="function"==typeof WeakSet?WeakSet:Set,Zs=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){kc(e,t,n)}}var nl=!1;function rl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,void 0!==o&&tl(t,n,o)}i=i.next}while(i!==r)}}function il(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[hi],delete t[pi],delete t[gi],delete t[mi],delete t[Ai]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var dl=null,hl=!1;function pl(e,t,n){for(n=n.child;null!==n;)fl(e,t,n),n=n.sibling}function fl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Ks||el(n,t);case 6:var r=dl,i=hl;dl=null,pl(e,t,n),hl=i,null!==(dl=r)&&(hl?(e=dl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):dl.removeChild(n.stateNode));break;case 18:null!==dl&&(hl?(e=dl,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),qt(e)):li(dl,n.stateNode));break;case 4:r=dl,i=hl,dl=n.stateNode.containerInfo,hl=!0,pl(e,t,n),dl=r,hl=i;break;case 0:case 11:case 14:case 15:if(!Ks&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&tl(n,t,a),i=i.next}while(i!==r)}pl(e,t,n);break;case 1:if(!Ks&&(el(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){kc(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Ks=(r=Ks)||null!==n.memoizedState,pl(e,t,n),Ks=r):pl(e,t,n);break;default:pl(e,t,n)}}function gl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Js),t.forEach((function(t){var r=zc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:dl=l.stateNode,hl=!1;break e;case 3:case 4:dl=l.stateNode.containerInfo,hl=!0;break e}l=l.return}if(null===dl)throw Error(o(160));fl(a,s,i),dl=null,hl=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(e){kc(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)Al(t,e),t=t.sibling}function Al(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),bl(e),4&r){try{rl(3,e,e.return),il(3,e)}catch(t){kc(e,e.return,t)}try{rl(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:ml(t,e),bl(e),512&r&&null!==n&&el(n,n.return);break;case 5:if(ml(t,e),bl(e),512&r&&null!==n&&el(n,n.return),32&e.flags){var i=e.stateNode;try{he(i,"")}catch(t){kc(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var a=e.memoizedProps,s=null!==n?n.memoizedProps:a,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&K(i,a),ye(l,s);var u=ye(l,a);for(s=0;s<c.length;s+=2){var d=c[s],h=c[s+1];"style"===d?me(i,h):"dangerouslySetInnerHTML"===d?de(i,h):"children"===d?he(i,h):y(i,d,h,u)}switch(l){case"input":J(i,a);break;case"textarea":oe(i,a);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var f=a.value;null!=f?ne(i,!!a.multiple,f,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(i,!!a.multiple,a.defaultValue,!0):ne(i,!!a.multiple,a.multiple?[]:"",!1))}i[pi]=a}catch(t){kc(e,e.return,t)}}break;case 6:if(ml(t,e),bl(e),4&r){if(null===e.stateNode)throw Error(o(162));i=e.stateNode,a=e.memoizedProps;try{i.nodeValue=a}catch(t){kc(e,e.return,t)}}break;case 3:if(ml(t,e),bl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:ml(t,e),bl(e);break;case 13:ml(t,e),bl(e),8192&(i=e.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(ql=Ke())),4&r&&gl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Ks=(u=Ks)||d,ml(t,e),Ks=u):ml(t,e),bl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Zs=e,d=e.child;null!==d;){for(h=Zs=d;null!==Zs;){switch(f=(p=Zs).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){r=p,n=p.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){kc(r,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){El(h);continue}}null!==f?(f.return=p,Zs=f):El(h)}d=d.sibling}e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{i=h.stateNode,u?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=h.stateNode,s=null!=(c=h.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ge("display",s))}catch(t){kc(e,e.return,t)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=u?"":h.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:ml(t,e),bl(e),4&r&&gl(e);case 21:}}function bl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sl(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(he(i,""),r.flags&=-33),ul(e,ll(e),i);break;case 3:case 4:var a=r.stateNode.containerInfo;cl(e,ll(e),a);break;default:throw Error(o(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Zs=e,vl(e,t,n)}function vl(e,t,n){for(var r=0!=(1&e.mode);null!==Zs;){var i=Zs,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Xs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Ks;s=Xs;var c=Ks;if(Xs=a,(Ks=l)&&!c)for(Zs=i;null!==Zs;)l=(a=Zs).child,22===a.tag&&null!==a.memoizedState?Cl(i):null!==l?(l.return=a,Zs=l):Cl(i);for(;null!==o;)Zs=o,vl(o,t,n),o=o.sibling;Zs=i,Xs=s,Ks=c}wl(e)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Zs=o):wl(e)}}function wl(e){for(;null!==Zs;){var t=Zs;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ks||il(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ks)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:Ao(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Fo(t,a,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fo(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var h=d.dehydrated;null!==h&&qt(h)}}}break;default:throw Error(o(163))}Ks||512&t.flags&&ol(t)}catch(e){kc(t,t.return,e)}}if(t===e){Zs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zs=n;break}Zs=t.return}}function El(e){for(;null!==Zs;){var t=Zs;if(t===e){Zs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zs=n;break}Zs=t.return}}function Cl(e){for(;null!==Zs;){var t=Zs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{il(4,t)}catch(e){kc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){kc(t,i,e)}}var o=t.return;try{ol(t)}catch(e){kc(t,o,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){kc(t,a,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Zs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Zs=s;break}Zs=t.return}}var xl,kl=Math.ceil,Bl=v.ReactCurrentDispatcher,Sl=v.ReactCurrentOwner,_l=v.ReactCurrentBatchConfig,zl=0,Pl=null,Ol=null,Dl=0,Ml=0,Tl=xi(0),Rl=0,Il=null,Nl=0,Ll=0,Fl=0,jl=null,Ul=null,ql=0,Wl=1/0,$l=null,Hl=!1,Vl=null,Yl=null,Gl=!1,Ql=null,Xl=0,Kl=0,Jl=null,Zl=-1,ec=0;function tc(){return 0!=(6&zl)?Ke():-1!==Zl?Zl:Zl=Ke()}function nc(e){return 0==(1&e.mode)?1:0!=(2&zl)&&0!==Dl?Dl&-Dl:null!==mo.transition?(0===ec&&(ec=gt()),ec):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function rc(e,t,n,r){if(50<Kl)throw Kl=0,Jl=null,Error(o(185));At(e,n,r),0!=(2&zl)&&e===Pl||(e===Pl&&(0==(2&zl)&&(Ll|=n),4===Rl&&lc(e,Dl)),ic(e,r),1===n&&0===zl&&0==(1&t.mode)&&(Wl=Ke()+500,Fi&&qi()))}function ic(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-at(o),s=1<<a,l=i[a];-1===l?0!=(s&n)&&0==(s&r)||(i[a]=pt(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=ht(e,e===Pl?Dl:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Fi=!0,Ui(e)}(cc.bind(null,e)):Ui(cc.bind(null,e)),ai((function(){0==(6&zl)&&qi()})),n=null;else{switch(vt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pc(n,oc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function oc(e,t){if(Zl=-1,ec=0,0!=(6&zl))throw Error(o(327));var n=e.callbackNode;if(Cc()&&e.callbackNode!==n)return null;var r=ht(e,e===Pl?Dl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=Ac(e,r);else{t=r;var i=zl;zl|=2;var a=gc();for(Pl===e&&Dl===t||($l=null,Wl=Ke()+500,pc(e,t));;)try{yc();break}catch(t){fc(e,t)}Eo(),Bl.current=a,zl=i,null!==Ol?t=0:(Pl=null,Dl=0,t=Rl)}if(0!==t){if(2===t&&0!==(i=ft(e))&&(r=i,t=ac(e,i)),1===t)throw n=Il,pc(e,0),lc(e,r),ic(e,Ke()),n;if(6===t)lc(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=Ac(e,r))&&0!==(a=ft(e))&&(r=a,t=ac(e,a)),1===t))throw n=Il,pc(e,0),lc(e,r),ic(e,Ke()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Ec(e,Ul,$l);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(t=ql+500-Ke())){if(0!==ht(e,0))break;if(((i=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(Ec.bind(null,e,Ul,$l),t);break}Ec(e,Ul,$l);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-at(r);a=1<<s,(s=t[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*kl(r/1960))-r)){e.timeoutHandle=ri(Ec.bind(null,e,Ul,$l),r);break}Ec(e,Ul,$l);break;default:throw Error(o(329))}}}return ic(e,Ke()),e.callbackNode===n?oc.bind(null,e):null}function ac(e,t){var n=jl;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=Ac(e,t))&&(t=Ul,Ul=n,null!==t&&sc(t)),e}function sc(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function lc(e,t){for(t&=~Fl,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&zl))throw Error(o(327));Cc();var t=ht(e,0);if(0==(1&t))return ic(e,Ke()),null;var n=Ac(e,t);if(0!==e.tag&&2===n){var r=ft(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=Il,pc(e,0),lc(e,t),ic(e,Ke()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ec(e,Ul,$l),ic(e,Ke()),null}function uc(e,t){var n=zl;zl|=1;try{return e(t)}finally{0===(zl=n)&&(Wl=Ke()+500,Fi&&qi())}}function dc(e){null!==Ql&&0===Ql.tag&&0==(6&zl)&&Cc();var t=zl;zl|=1;var n=_l.transition,r=yt;try{if(_l.transition=null,yt=1,e)return e()}finally{yt=r,_l.transition=n,0==(6&(zl=t))&&qi()}}function hc(){Ml=Tl.current,ki(Tl)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mi();break;case 3:oa(),ki(zi),ki(_i),da();break;case 5:sa(r);break;case 4:oa();break;case 13:case 19:ki(la);break;case 10:Co(r.type._context);break;case 22:case 23:hc()}n=n.return}if(Pl=e,Ol=e=Tc(e.current,null),Dl=Ml=t,Rl=0,Il=null,Fl=Ll=Nl=0,Ul=jl=null,null!==So){for(t=0;t<So.length;t++)if(null!==(r=(n=So[t]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}So=null}return e}function fc(e,t){for(;;){var n=Ol;try{if(Eo(),ha.current=as,ba){for(var r=ga.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ba=!1}if(fa=0,Aa=ma=ga=null,ya=!1,va=0,Sl.current=null,null===n||null===n.return){Rl=1,Il=t,Ol=null;break}e:{var a=e,s=n.return,l=n,c=t;if(t=Dl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,h=d.tag;if(0==(1&d.mode)&&(0===h||11===h||15===h)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var f=As(s);if(null!==f){f.flags&=-257,bs(f,s,l,0,t),1&f.mode&&ms(a,u,t),c=u;var g=(t=f).updateQueue;if(null===g){var m=new Set;m.add(c),t.updateQueue=m}else g.add(c);break e}if(0==(1&t)){ms(a,u,t),mc();break e}c=Error(o(426))}else if(io&&1&l.mode){var A=As(s);if(null!==A){0==(65536&A.flags)&&(A.flags|=256),bs(A,s,l,0,t),go(us(c,l));break e}}a=c=us(c,l),4!==Rl&&(Rl=2),null===jl?jl=[a]:jl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,No(a,fs(0,c,t));break e;case 1:l=c;var b=a.type,y=a.stateNode;if(0==(128&a.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Yl||!Yl.has(y)))){a.flags|=65536,t&=-t,a.lanes|=t,No(a,gs(a,l,t));break e}}a=a.return}while(null!==a)}wc(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function gc(){var e=Bl.current;return Bl.current=as,null===e?as:e}function mc(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Pl||0==(268435455&Nl)&&0==(268435455&Ll)||lc(Pl,Dl)}function Ac(e,t){var n=zl;zl|=2;var r=gc();for(Pl===e&&Dl===t||($l=null,pc(e,t));;)try{bc();break}catch(t){fc(e,t)}if(Eo(),zl=n,Bl.current=r,null!==Ol)throw Error(o(261));return Pl=null,Dl=0,Rl}function bc(){for(;null!==Ol;)vc(Ol)}function yc(){for(;null!==Ol&&!Qe();)vc(Ol)}function vc(e){var t=xl(e.alternate,e,Ml);e.memoizedProps=e.pendingProps,null===t?wc(e):Ol=t,Sl.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gs(n,t,Ml)))return void(Ol=n)}else{if(null!==(n=Qs(n,t)))return n.flags&=32767,void(Ol=n);if(null===e)return Rl=6,void(Ol=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Rl&&(Rl=5)}function Ec(e,t,n){var r=yt,i=_l.transition;try{_l.transition=null,yt=1,function(e,t,n,r){do{Cc()}while(null!==Ql);if(0!=(6&zl))throw Error(o(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-at(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}(e,a),e===Pl&&(Ol=Pl=null,Dl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gl||(Gl=!0,Pc(tt,(function(){return Cc(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=_l.transition,_l.transition=null;var s=yt;yt=1;var l=zl;zl|=4,Sl.current=null,function(e,t){if(ei=$t,pr(e=hr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,l=-1,c=-1,u=0,d=0,h=e,p=null;t:for(;;){for(var f;h!==n||0!==i&&3!==h.nodeType||(l=s+i),h!==a||0!==r&&3!==h.nodeType||(c=s+r),3===h.nodeType&&(s+=h.nodeValue.length),null!==(f=h.firstChild);)p=h,h=f;for(;;){if(h===e)break t;if(p===n&&++u===i&&(l=s),p===a&&++d===r&&(c=s),null!==(f=h.nextSibling))break;p=(h=p).parentNode}h=f}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},$t=!1,Zs=t;null!==Zs;)if(e=(t=Zs).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zs=e;else for(;null!==Zs;){t=Zs;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,A=g.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?m:Ao(t.type,m),A);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var v=t.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(o(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zs=e;break}Zs=t.return}g=nl,nl=!1}(e,n),Al(n,e),fr(ti),$t=!!ei,ti=ei=null,e.current=n,yl(n,e,i),Xe(),zl=l,yt=s,_l.transition=a}else e.current=n;if(Gl&&(Gl=!1,Ql=e,Xl=i),0===(a=e.pendingLanes)&&(Yl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ic(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Hl)throw Hl=!1,e=Vl,Vl=null,e;0!=(1&Xl)&&0!==e.tag&&Cc(),0!=(1&(a=e.pendingLanes))?e===Jl?Kl++:(Kl=0,Jl=e):Kl=0,qi()}(e,t,n,r)}finally{_l.transition=i,yt=r}return null}function Cc(){if(null!==Ql){var e=vt(Xl),t=_l.transition,n=yt;try{if(_l.transition=null,yt=16>e?16:e,null===Ql)var r=!1;else{if(e=Ql,Ql=null,Xl=0,0!=(6&zl))throw Error(o(331));var i=zl;for(zl|=4,Zs=e.current;null!==Zs;){var a=Zs,s=a.child;if(0!=(16&Zs.flags)){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Zs=u;null!==Zs;){var d=Zs;switch(d.tag){case 0:case 11:case 15:rl(8,d,a)}var h=d.child;if(null!==h)h.return=d,Zs=h;else for(;null!==Zs;){var p=(d=Zs).sibling,f=d.return;if(al(d),d===u){Zs=null;break}if(null!==p){p.return=f,Zs=p;break}Zs=f}}}var g=a.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var A=m.sibling;m.sibling=null,m=A}while(null!==m)}}Zs=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Zs=s;else e:for(;null!==Zs;){if(0!=(2048&(a=Zs).flags))switch(a.tag){case 0:case 11:case 15:rl(9,a,a.return)}var b=a.sibling;if(null!==b){b.return=a.return,Zs=b;break e}Zs=a.return}}var y=e.current;for(Zs=y;null!==Zs;){var v=(s=Zs).child;if(0!=(2064&s.subtreeFlags)&&null!==v)v.return=s,Zs=v;else e:for(s=y;null!==Zs;){if(0!=(2048&(l=Zs).flags))try{switch(l.tag){case 0:case 11:case 15:il(9,l)}}catch(e){kc(l,l.return,e)}if(l===s){Zs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Zs=w;break e}Zs=l.return}}if(zl=i,qi(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{yt=n,_l.transition=t}}return!1}function xc(e,t,n){e=Ro(e,t=fs(0,t=us(n,t),1),1),t=tc(),null!==e&&(At(e,1,t),ic(e,t))}function kc(e,t,n){if(3===e.tag)xc(e,e,n);else for(;null!==t;){if(3===t.tag){xc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){t=Ro(t,e=gs(t,e=us(n,e),1),1),e=tc(),null!==t&&(At(t,1,e),ic(t,e));break}}t=t.return}}function Bc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Dl&n)===n&&(4===Rl||3===Rl&&(130023424&Dl)===Dl&&500>Ke()-ql?pc(e,0):Fl|=n),ic(e,t)}function Sc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=tc();null!==(e=Po(e,t))&&(At(e,t,n),ic(e,n))}function _c(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Sc(e,n)}function zc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Sc(e,n)}function Pc(e,t){return Ye(e,t)}function Oc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dc(e,t,n,r){return new Oc(e,t,n,r)}function Mc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tc(e,t){var n=e.alternate;return null===n?((n=Dc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Rc(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)Mc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case C:return Ic(n.children,i,a,t);case x:s=8,i|=8;break;case k:return(e=Dc(12,n,t,2|i)).elementType=k,e.lanes=a,e;case z:return(e=Dc(13,n,t,i)).elementType=z,e.lanes=a,e;case P:return(e=Dc(19,n,t,i)).elementType=P,e.lanes=a,e;case M:return Nc(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:s=10;break e;case S:s=9;break e;case _:s=11;break e;case O:s=14;break e;case D:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Dc(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function Ic(e,t,n,r){return(e=Dc(7,e,r,t)).lanes=n,e}function Nc(e,t,n,r){return(e=Dc(22,e,r,t)).elementType=M,e.lanes=n,e.stateNode={isHidden:!1},e}function Lc(e,t,n){return(e=Dc(6,e,null,t)).lanes=n,e}function Fc(e,t,n){return(t=Dc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function jc(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,i,o,a,s,l){return e=new jc(e,t,n,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Dc(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Do(o),e}function qc(e){if(!e)return Si;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Di(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Di(n))return Ri(e,n,t)}return t}function Wc(e,t,n,r,i,o,a,s,l){return(e=Uc(n,r,!0,e,0,o,0,s,l)).context=qc(null),n=e.current,(o=To(r=tc(),i=nc(n))).callback=null!=t?t:null,Ro(n,o,i),e.current.lanes=i,At(e,i,r),ic(e,r),e}function $c(e,t,n,r){var i=t.current,o=tc(),a=nc(i);return n=qc(n),null===t.context?t.context=n:t.pendingContext=n,(t=To(o,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ro(i,t,a))&&(rc(e,i,a,o),Io(e,i,a)),a}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yc(e,t){Vc(e,t),(e=e.alternate)&&Vc(e,t)}xl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||zi.current)vs=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return vs=!1,function(e,t,n){switch(t.tag){case 3:Ps(t),fo();break;case 5:aa(t);break;case 1:Di(t.type)&&Ii(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Bi(bo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Bi(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ls(e,t,n):(Bi(la,1&la.current),null!==(e=Hs(e,t,n))?e.sibling:null);Bi(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ws(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Bi(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,ks(e,t,n)}return Hs(e,t,n)}(e,t,n);vs=0!=(131072&e.flags)}else vs=!1,io&&0!=(1048576&t.flags)&&Zi(t,Vi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$s(e,t),e=t.pendingProps;var i=Oi(t,_i.current);ko(t,n),i=xa(null,t,r,e,i,n);var a=ka();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Di(r)?(a=!0,Ii(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Do(t),i.updater=qo,t.stateNode=i,i._reactInternals=t,Vo(t,r,e,n),t=zs(null,t,r,!0,a,n)):(t.tag=0,io&&a&&eo(t),ws(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch($s(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Mc(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===O)return 14}return 2}(r),e=Ao(r,e),i){case 0:t=Ss(null,t,r,e,n);break e;case 1:t=_s(null,t,r,e,n);break e;case 11:t=Es(null,t,r,e,n);break e;case 14:t=Cs(null,t,r,Ao(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ss(e,t,r,i=t.elementType===r?i:Ao(r,i),n);case 1:return r=t.type,i=t.pendingProps,_s(e,t,r,i=t.elementType===r?i:Ao(r,i),n);case 3:e:{if(Ps(t),null===e)throw Error(o(387));r=t.pendingProps,i=(a=t.memoizedState).element,Mo(e,t),Lo(t,r,null,n);var s=t.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Os(e,t,r,n,i=us(Error(o(423)),t));break e}if(r!==i){t=Os(e,t,r,n,i=us(Error(o(424)),t));break e}for(ro=ci(t.stateNode.containerInfo.firstChild),no=t,io=!0,oo=null,n=Jo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(fo(),r===i){t=Hs(e,t,n);break e}ws(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&co(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(t.flags|=32),Bs(e,t),ws(e,t,s,n),t.child;case 6:return null===e&&co(t),null;case 13:return Ls(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ko(t,null,r,n):ws(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Es(e,t,r,i=t.elementType===r?i:Ao(r,i),n);case 7:return ws(e,t,t.pendingProps,n),t.child;case 8:case 12:return ws(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,a=t.memoizedProps,s=i.value,Bi(bo,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!zi.current){t=Hs(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=To(-1,n&-n)).tag=2;var u=a.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),xo(a.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===a.tag)s=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),xo(s,n,t),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}ws(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,ko(t,n),r=r(i=Bo(i)),t.flags|=1,ws(e,t,r,n),t.child;case 14:return i=Ao(r=t.type,t.pendingProps),Cs(e,t,r,i=Ao(r.type,i),n);case 15:return xs(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ao(r,i),$s(e,t),t.tag=1,Di(r)?(e=!0,Ii(t)):e=!1,ko(t,n),$o(t,r,i),Vo(t,r,i,n),zs(null,t,r,!0,e,n);case 19:return Ws(e,t,n);case 22:return ks(e,t,n)}throw Error(o(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Qc(e){this._internalRoot=e}function Xc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function eu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var e=Hc(a);s.call(e)}}$c(t,a,e,i)}else a=function(e,t,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var e=Hc(a);o.call(e)}}var a=Wc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=a,e[fi]=a.current,qr(8===e.nodeType?e.parentNode:e),dc(),a}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Hc(l);s.call(e)}}var l=Uc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=l,e[fi]=l.current,qr(8===e.nodeType?e.parentNode:e),dc((function(){$c(t,l,n,r)})),l}(n,t,e,i,r);return Hc(a)}Xc.prototype.render=Qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));$c(e,t,null,null)},Xc.prototype.unmount=Qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;dc((function(){$c(null,e,null,null)})),t[fi]=null}},Xc.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mt.length&&0!==t&&t<Mt[n].priority;n++);Mt.splice(n,0,e),0===n&&Nt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(bt(t,1|n),ic(t,Ke()),0==(6&zl)&&(Wl=Ke()+500,qi()))}break;case 13:dc((function(){var t=Po(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Yc(e,1)}},Et=function(e){if(13===e.tag){var t=Po(e,134217728);null!==t&&rc(t,e,134217728,tc()),Yc(e,134217728)}},Ct=function(e){if(13===e.tag){var t=nc(e),n=Po(e,t);null!==n&&rc(n,e,t,tc()),Yc(e,t)}},xt=function(){return yt},kt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},Ee=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(o(90));Y(r),J(r,i)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=uc,ze=dc;var tu={usingClientEntryPoint:!1,Events:[yi,vi,wi,Be,Se,uc]},nu={findFiberByHostInstance:bi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{it=iu.inject(ru),ot=iu}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(o(299));var n=!1,r="",i=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,i),e[fi]=t.current,qr(8===e.nodeType?e.parentNode:e),new Qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return dc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,i,0,a,s),e[fi]=t.current,qr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Xc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(o(40));return!!e._reactRootContainer&&(dc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[fi]=null}))})),!0)},t.unstable_batchedUpdates=uc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,f=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,A=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,v=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case o:case s:case a:case p:return e;default:switch(e=e&&e.$$typeof){case c:case h:case m:case g:case l:return e;default:return t}}case i:return t}}}function E(e){return w(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=h,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||w(e)===u},t.isConcurrentMode=E,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===h},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===g},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===s},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===s||e===a||e===p||e===f||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===l||e.$$typeof===c||e.$$typeof===h||e.$$typeof===b||e.$$typeof===y||e.$$typeof===v||e.$$typeof===A)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),p=Symbol.iterator,f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||f}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||f}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=A.prototype;var v=y.prototype=new b;v.constructor=y,g(v,A.prototype),v.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,C={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var i,o={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,i)&&!x.hasOwnProperty(i)&&(o[i]=t[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:e,key:a,ref:s,props:o,_owner:C.current}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var S=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function z(e,t,i,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===o?"."+_(l,0):o,w(a)?(i="",null!=e&&(i=e.replace(S,"$&/")+"/"),z(a,t,i,"",(function(e){return e}))):null!=a&&(B(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(S,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+_(s=e[c],c);l+=z(s,t,i,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=z(s=s.value,t,i,u=o+_(s,c++),a);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var r=[],i=0;return z(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},M={transition:null},T={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:M,ReactCurrentOwner:C};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=A,t.Fragment=i,t.Profiler=a,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),o=e.key,a=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,s=C.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)E.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:n,type:e.type,key:o,ref:a,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=B,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<o(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,n))c<i&&0>o(u,l)?(e[r]=u,e[c]=n,r=c):(e[r]=l,e[s]=n,r=s);else{if(!(c<i&&0>o(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,h=null,p=3,f=!1,g=!1,m=!1,A="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var t=r(u);null!==t;){if(null===t.callback)i(u);else{if(!(t.startTime<=e))break;i(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(m=!1,v(e),!g)if(null!==r(c))g=!0,M(E);else{var t=r(u);null!==t&&T(w,t.startTime-e)}}function E(e,n){g=!1,m&&(m=!1,b(B),B=-1),f=!0;var o=p;try{for(v(n),h=r(c);null!==h&&(!(h.expirationTime>n)||e&&!z());){var a=h.callback;if("function"==typeof a){h.callback=null,p=h.priorityLevel;var s=a(h.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?h.callback=s:h===r(c)&&i(c),v(n)}else i(c);h=r(c)}if(null!==h)var l=!0;else{var d=r(u);null!==d&&T(w,d.startTime-n),l=!1}return l}finally{h=null,p=o,f=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,x=!1,k=null,B=-1,S=5,_=-1;function z(){return!(t.unstable_now()-_<S)}function P(){if(null!==k){var e=t.unstable_now();_=e;var n=!0;try{n=k(!0,e)}finally{n?C():(x=!1,k=null)}}else x=!1}if("function"==typeof y)C=function(){y(P)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,D=O.port2;O.port1.onmessage=P,C=function(){D.postMessage(null)}}else C=function(){A(P,0)};function M(e){k=e,x||(x=!0,C())}function T(e,n){B=A((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||f||(g=!0,M(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):S=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,o){var a=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(e.sortIndex=o,n(u,e),null===r(c)&&e===r(u)&&(m?(b(B),B=-1):m=!0,T(w,o-a))):(e.sortIndex=s,n(c,e),g||f||(g=!0,M(E))),e},t.unstable_shouldYield=z,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var i=n?n.call(r,e,t):void 0;if(void 0!==i)return!!i;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),a=Object.keys(t);if(o.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<o.length;l++){var c=o[l];if(!s(c))return!1;var u=e[c],d=t[c];if(!1===(i=n?n.call(r,u,d,c):void 0)||void 0===i&&u!==d)return!1}return!0}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var h=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},630:(e,t,n)=>{"use strict";e.exports=n.p+"340dc97b9ac07c6da1c7.gif"}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,i),o.exports}i.m=n,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i.b=document.baseURI||self.location.href,i.nc=void 0,(()=>{"use strict";var e,t,n=i(294),r=i.t(n,2),o=i(745);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}(t=e||(e={})).Pop="POP",t.Push="PUSH",t.Replace="REPLACE";const s="popstate";function l(e,t){if(!1===e||null==e)throw new Error(t)}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function u(e,t,n,r){return void 0===n&&(n=null),a({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var p;function f(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(p||(p={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const g=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",m=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const A=["post","put","patch","delete"],b=(new Set(A),["get",...A]);function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},y.apply(this,arguments)}new Set(b),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const v=n.createContext(null),w=n.createContext(null),E=n.createContext(null),C=n.createContext({outlet:null,matches:[],isDataRoute:!1});function x(){return null!=n.useContext(E)}function k(e){n.useContext(w).static||n.useLayoutEffect(e)}function B(){let{isDataRoute:e}=n.useContext(C);return e?function(){let{router:e}=function(e){let t=n.useContext(v);return t||l(!1),t}(S.UseNavigateStable),t=function(e){let t=function(e){let t=n.useContext(C);return t||l(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||l(!1),r.route.id}(_.UseNavigateStable),r=n.useRef(!1);k((()=>{r.current=!0}));let i=n.useCallback((function(n,i){void 0===i&&(i={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,y({fromRouteId:t},i)))}),[e,t]);return i}():function(){x()||l(!1);let e=n.useContext(v),{basename:t,navigator:r}=n.useContext(w),{matches:i}=n.useContext(C),{pathname:o}=(x()||l(!1),n.useContext(E).location),s=JSON.stringify(function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(i).map((e=>e.pathnameBase))),c=n.useRef(!1);k((()=>{c.current=!0}));let u=n.useCallback((function(n,i){if(void 0===i&&(i={}),!c.current)return;if("number"==typeof n)return void r.go(n);let u=function(e,t,n,r){let i;void 0===r&&(r=!1),"string"==typeof e?i=h(e):(i=a({},e),l(!i.pathname||!i.pathname.includes("?"),f("?","pathname","search",i)),l(!i.pathname||!i.pathname.includes("#"),f("#","pathname","hash",i)),l(!i.search||!i.search.includes("#"),f("#","search","hash",i)));let o,s=""===e||""===i.pathname,c=s?"/":i.pathname;if(r||null==c)o=n;else{let e=t.length-1;if(c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}o=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?h(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:g(r),hash:m(i)}}(i,o),d=c&&"/"!==c&&c.endsWith("/"),p=(s||"."===c)&&n.endsWith("/");return u.pathname.endsWith("/")||!d&&!p||(u.pathname+="/"),u}(n,JSON.parse(s),o,"path"===i.relative);null==e&&"/"!==t&&(u.pathname="/"===u.pathname?t:[t,u.pathname].join("/").replace(/\/\/+/g,"/")),(i.replace?r.replace:r.push)(u,i.state,i)}),[t,r,s,o,e]);return u}()}var S,_,z;function P(t){let{basename:r="/",children:i=null,location:o,navigationType:a=e.Pop,navigator:s,static:c=!1}=t;x()&&l(!1);let u=r.replace(/^\/*/,"/"),d=n.useMemo((()=>({basename:u,navigator:s,static:c})),[u,s,c]);"string"==typeof o&&(o=h(o));let{pathname:p="/",search:f="",hash:g="",state:m=null,key:A="default"}=o,b=n.useMemo((()=>{let e=function(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}(p,u);return null==e?null:{location:{pathname:e,search:f,hash:g,state:m,key:A},navigationType:a}}),[u,p,f,g,m,A,a]);return null==b?null:n.createElement(w.Provider,{value:d},n.createElement(E.Provider,{children:i,value:b}))}n.Component,function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}(S||(S={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(_||(_={})),r.startTransition,function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(z||(z={})),new Promise((()=>{})),n.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const O=r.startTransition;function D(t){let{basename:r,children:i,future:o,window:h}=t,p=n.useRef();null==p.current&&(p.current=function(t){return void 0===t&&(t={}),function(t,n,r,i){void 0===i&&(i={});let{window:o=document.defaultView,v5Compat:h=!1}=i,p=o.history,f=e.Pop,g=null,m=A();function A(){return(p.state||{idx:null}).idx}function b(){f=e.Pop;let t=A(),n=null==t?null:t-m;m=t,g&&g({action:f,location:v.location,delta:n})}function y(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:d(e);return l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==m&&(m=0,p.replaceState(a({},p.state,{idx:m}),""));let v={get action(){return f},get location(){return t(o,p)},listen(e){if(g)throw new Error("A history only accepts one active listener");return o.addEventListener(s,b),g=e,()=>{o.removeEventListener(s,b),g=null}},createHref:e=>n(o,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){f=e.Push;let i=u(v.location,t,n);r&&r(i,t),m=A()+1;let a=c(i,m),s=v.createHref(i);try{p.pushState(a,"",s)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(s)}h&&g&&g({action:f,location:v.location,delta:1})},replace:function(t,n){f=e.Replace;let i=u(v.location,t,n);r&&r(i,t),m=A();let o=c(i,m),a=v.createHref(i);p.replaceState(o,"",a),h&&g&&g({action:f,location:v.location,delta:0})},go:e=>p.go(e)};return v}((function(e,t){let{pathname:n,search:r,hash:i}=e.location;return u("",{pathname:n,search:r,hash:i},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:d(t)}),null,t)}({window:h,v5Compat:!0}));let f=p.current,[g,m]=n.useState({action:f.action,location:f.location}),{v7_startTransition:A}=o||{},b=n.useCallback((e=>{A&&O?O((()=>m(e))):m(e)}),[m,A]);return n.useLayoutEffect((()=>f.listen(b)),[f,b]),n.createElement(P,{basename:r,children:i,location:g.location,navigationType:g.action,navigator:f})}var M,T;"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"}(M||(M={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(T||(T={}));var R=i(697),I=i.n(R);function N(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}var L=n.createContext(null),F=e=>{var{userData:t,children:r}=e,[i,o]=n.useState(t),[a,s]=n.useState(t),[l,c]=n.useState(t),[u,d]=n.useState(t);return n.createElement(L.Provider,{value:{user:i,setUser:o,id:a,setId:s,token:l,setToken:c,type:u,setType:d,LogOut:function(){var{setUser:e,setToken:t,setId:n}=j(),r=function(){var r,i=(r=function*(){yield e(null),yield n(null),yield t(null),localStorage.clear(),window.location.reload()},function(){var e=this,t=arguments;return new Promise((function(n,i){var o=r.apply(e,t);function a(e){N(o,n,i,a,s,"next",e)}function s(e){N(o,n,i,a,s,"throw",e)}a(void 0)}))});return function(){return i.apply(this,arguments)}}();return useEffect((()=>{r()}),[]),null}}},r)};F.propTypes={userData:I().any,children:I().any};var j=()=>n.useContext(L);function U(e,t){return function(){return e.apply(t,arguments)}}const{toString:q}=Object.prototype,{getPrototypeOf:W}=Object,$=(H=Object.create(null),e=>{const t=q.call(e);return H[t]||(H[t]=t.slice(8,-1).toLowerCase())});var H;const V=e=>(e=e.toLowerCase(),t=>$(t)===e),Y=e=>t=>typeof t===e,{isArray:G}=Array,Q=Y("undefined"),X=V("ArrayBuffer"),K=Y("string"),J=Y("function"),Z=Y("number"),ee=e=>null!==e&&"object"==typeof e,te=e=>{if("object"!==$(e))return!1;const t=W(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},ne=V("Date"),re=V("File"),ie=V("Blob"),oe=V("FileList"),ae=V("URLSearchParams");function se(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,i;if("object"!=typeof e&&(e=[e]),G(e))for(r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),o=i.length;let a;for(r=0;r<o;r++)a=i[r],t.call(null,e[a],a,e)}}function le(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,i=n.length;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const ce="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ue=e=>!Q(e)&&e!==ce,de=(he="undefined"!=typeof Uint8Array&&W(Uint8Array),e=>he&&e instanceof he);var he;const pe=V("HTMLFormElement"),fe=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),ge=V("RegExp"),me=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};se(n,((n,i)=>{!1!==t(n,i,e)&&(r[i]=n)})),Object.defineProperties(e,r)},Ae="abcdefghijklmnopqrstuvwxyz",be="0123456789",ye={DIGIT:be,ALPHA:Ae,ALPHA_DIGIT:Ae+Ae.toUpperCase()+be},ve=V("AsyncFunction"),we={isArray:G,isArrayBuffer:X,isBuffer:function(e){return null!==e&&!Q(e)&&null!==e.constructor&&!Q(e.constructor)&&J(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||J(e.append)&&("formdata"===(t=$(e))||"object"===t&&J(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&X(e.buffer),t},isString:K,isNumber:Z,isBoolean:e=>!0===e||!1===e,isObject:ee,isPlainObject:te,isUndefined:Q,isDate:ne,isFile:re,isBlob:ie,isRegExp:ge,isFunction:J,isStream:e=>ee(e)&&J(e.pipe),isURLSearchParams:ae,isTypedArray:de,isFileList:oe,forEach:se,merge:function e(){const{caseless:t}=ue(this)&&this||{},n={},r=(r,i)=>{const o=t&&le(n,i)||i;te(n[o])&&te(r)?n[o]=e(n[o],r):te(r)?n[o]=e({},r):G(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&se(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(se(t,((t,r)=>{n&&J(t)?e[r]=U(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,o,a;const s={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||s[a]||(t[a]=e[a],s[a]=!0);e=!1!==n&&W(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:$,kindOfTest:V,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(G(e))return e;let t=e.length;if(!Z(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:pe,hasOwnProperty:fe,hasOwnProp:fe,reduceDescriptors:me,freezeMethods:e=>{me(e,((t,n)=>{if(J(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];J(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return G(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:le,global:ce,isContextDefined:ue,ALPHABET:ye,generateString:(e=16,t=ye.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&J(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(ee(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const i=G(e)?[]:{};return se(e,((e,t)=>{const o=n(e,r+1);!Q(o)&&(i[t]=o)})),t[r]=void 0,i}}return e};return n(e,0)},isAsyncFn:ve,isThenable:e=>e&&(ee(e)||J(e))&&J(e.then)&&J(e.catch)};function Ee(e,t,n,r,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),i&&(this.response=i)}we.inherits(Ee,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:we.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Ce=Ee.prototype,xe={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{xe[e]={value:e}})),Object.defineProperties(Ee,xe),Object.defineProperty(Ce,"isAxiosError",{value:!0}),Ee.from=(e,t,n,r,i,o)=>{const a=Object.create(Ce);return we.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Ee.call(a,e.message,t,n,r,i),a.cause=e,a.name=e.name,o&&Object.assign(a,o),a};const ke=Ee;function Be(e){return we.isPlainObject(e)||we.isArray(e)}function Se(e){return we.endsWith(e,"[]")?e.slice(0,-2):e}function _e(e,t,n){return e?e.concat(t).map((function(e,t){return e=Se(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const ze=we.toFlatObject(we,{},null,(function(e){return/^is[A-Z]/.test(e)})),Pe=function(e,t,n){if(!we.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=we.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!we.isUndefined(t[e])}))).metaTokens,i=n.visitor||c,o=n.dots,a=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&we.isSpecCompliantForm(t);if(!we.isFunction(i))throw new TypeError("visitor must be a function");function l(e){if(null===e)return"";if(we.isDate(e))return e.toISOString();if(!s&&we.isBlob(e))throw new ke("Blob is not supported. Use a Buffer instead.");return we.isArrayBuffer(e)||we.isTypedArray(e)?s&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,i){let s=e;if(e&&!i&&"object"==typeof e)if(we.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(we.isArray(e)&&function(e){return we.isArray(e)&&!e.some(Be)}(e)||(we.isFileList(e)||we.endsWith(n,"[]"))&&(s=we.toArray(e)))return n=Se(n),s.forEach((function(e,r){!we.isUndefined(e)&&null!==e&&t.append(!0===a?_e([n],r,o):null===a?n:n+"[]",l(e))})),!1;return!!Be(e)||(t.append(_e(i,n,o),l(e)),!1)}const u=[],d=Object.assign(ze,{defaultVisitor:c,convertValue:l,isVisitable:Be});if(!we.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!we.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),we.forEach(n,(function(n,o){!0===(!(we.isUndefined(n)||null===n)&&i.call(t,n,we.isString(o)?o.trim():o,r,d))&&e(n,r?r.concat(o):[o])})),u.pop()}}(e),t};function Oe(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function De(e,t){this._pairs=[],e&&Pe(e,this,t)}const Me=De.prototype;Me.append=function(e,t){this._pairs.push([e,t])},Me.toString=function(e){const t=e?function(t){return e.call(this,t,Oe)}:Oe;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Te=De;function Re(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ie(e,t,n){if(!t)return e;const r=n&&n.encode||Re,i=n&&n.serialize;let o;if(o=i?i(t,n):we.isURLSearchParams(t)?t.toString():new Te(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const Ne=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){we.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Le={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Fe={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Te,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},je=function(e){function t(e,n,r,i){let o=e[i++];const a=Number.isFinite(+o),s=i>=e.length;return o=!o&&we.isArray(r)?r.length:o,s?(we.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!a):(r[o]&&we.isObject(r[o])||(r[o]=[]),t(e,n,r[o],i)&&we.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const i=n.length;let o;for(r=0;r<i;r++)o=n[r],t[o]=e[o];return t}(r[o])),!a)}if(we.isFormData(e)&&we.isFunction(e.entries)){const n={};return we.forEachEntry(e,((e,r)=>{t(function(e){return we.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Ue={"Content-Type":void 0},qe={transitional:Le,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,i=we.isObject(e);if(i&&we.isHTMLForm(e)&&(e=new FormData(e)),we.isFormData(e))return r&&r?JSON.stringify(je(e)):e;if(we.isArrayBuffer(e)||we.isBuffer(e)||we.isStream(e)||we.isFile(e)||we.isBlob(e))return e;if(we.isArrayBufferView(e))return e.buffer;if(we.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(i){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Pe(e,new Fe.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Fe.isNode&&we.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=we.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Pe(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||r?(t.setContentType("application/json",!1),function(e,t,n){if(we.isString(e))try{return(0,JSON.parse)(e),we.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||qe.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&we.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw ke.from(e,ke.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Fe.classes.FormData,Blob:Fe.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};we.forEach(["delete","get","head"],(function(e){qe.headers[e]={}})),we.forEach(["post","put","patch"],(function(e){qe.headers[e]=we.merge(Ue)}));const We=qe,$e=we.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),He=Symbol("internals");function Ve(e){return e&&String(e).trim().toLowerCase()}function Ye(e){return!1===e||null==e?e:we.isArray(e)?e.map(Ye):String(e)}function Ge(e,t,n,r,i){return we.isFunction(r)?r.call(this,t,n):(i&&(t=n),we.isString(t)?we.isString(r)?-1!==t.indexOf(r):we.isRegExp(r)?r.test(t):void 0:void 0)}class Qe{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function i(e,t,n){const i=Ve(t);if(!i)throw new Error("header name must be a non-empty string");const o=we.findKey(r,i);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=Ye(e))}const o=(e,t)=>we.forEach(e,((e,n)=>i(e,n,t)));return we.isPlainObject(e)||e instanceof this.constructor?o(e,t):we.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?o((e=>{const t={};let n,r,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),n=e.substring(0,i).trim().toLowerCase(),r=e.substring(i+1).trim(),!n||t[n]&&$e[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&i(t,e,n),this}get(e,t){if(e=Ve(e)){const n=we.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(we.isFunction(t))return t.call(this,e,n);if(we.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ve(e)){const n=we.findKey(this,e);return!(!n||void 0===this[n]||t&&!Ge(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function i(e){if(e=Ve(e)){const i=we.findKey(n,e);!i||t&&!Ge(0,n[i],i,t)||(delete n[i],r=!0)}}return we.isArray(e)?e.forEach(i):i(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const i=t[n];e&&!Ge(0,this[i],i,e,!0)||(delete this[i],r=!0)}return r}normalize(e){const t=this,n={};return we.forEach(this,((r,i)=>{const o=we.findKey(n,i);if(o)return t[o]=Ye(r),void delete t[i];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(i):String(i).trim();a!==i&&delete t[i],t[a]=Ye(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return we.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&we.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[He]=this[He]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Ve(e);t[r]||(function(e,t){const n=we.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,i){return this[r].call(this,t,e,n,i)},configurable:!0})}))}(n,e),t[r]=!0)}return we.isArray(e)?e.forEach(r):r(e),this}}Qe.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),we.freezeMethods(Qe.prototype),we.freezeMethods(Qe);const Xe=Qe;function Ke(e,t){const n=this||We,r=t||n,i=Xe.from(r.headers);let o=r.data;return we.forEach(e,(function(e){o=e.call(n,o,i.normalize(),t?t.status:void 0)})),i.normalize(),o}function Je(e){return!(!e||!e.__CANCEL__)}function Ze(e,t,n){ke.call(this,null==e?"canceled":e,ke.ERR_CANCELED,t,n),this.name="CanceledError"}we.inherits(Ze,ke,{__CANCEL__:!0});const et=Ze,tt=Fe.isStandardBrowserEnv?{write:function(e,t,n,r,i,o){const a=[];a.push(e+"="+encodeURIComponent(t)),we.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),we.isString(r)&&a.push("path="+r),we.isString(i)&&a.push("domain="+i),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function nt(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const rt=Fe.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=we.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function it(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let i,o=0,a=0;return t=void 0!==t?t:1e3,function(s){const l=Date.now(),c=r[a];i||(i=l),n[o]=s,r[o]=l;let u=a,d=0;for(;u!==o;)d+=n[u++],u%=e;if(o=(o+1)%e,o===a&&(a=(a+1)%e),l-i<t)return;const h=c&&l-c;return h?Math.round(1e3*d/h):void 0}}(50,250);return i=>{const o=i.loaded,a=i.lengthComputable?i.total:void 0,s=o-n,l=r(s);n=o;const c={loaded:o,total:a,progress:a?o/a:void 0,bytes:s,rate:l||void 0,estimated:l&&a&&o<=a?(a-o)/l:void 0,event:i};c[t?"download":"upload"]=!0,e(c)}}const ot={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const i=Xe.from(e.headers).normalize(),o=e.responseType;let a;function s(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}we.isFormData(r)&&(Fe.isStandardBrowserEnv||Fe.isStandardBrowserWebWorkerEnv?i.setContentType(!1):i.setContentType("multipart/form-data;",!1));let l=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";i.set("Authorization","Basic "+btoa(t+":"+n))}const c=nt(e.baseURL,e.url);function u(){if(!l)return;const r=Xe.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new ke("Request failed with status code "+n.status,[ke.ERR_BAD_REQUEST,ke.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),s()}),(function(e){n(e),s()}),{data:o&&"text"!==o&&"json"!==o?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),Ie(c,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,"onloadend"in l?l.onloadend=u:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(u)},l.onabort=function(){l&&(n(new ke("Request aborted",ke.ECONNABORTED,e,l)),l=null)},l.onerror=function(){n(new ke("Network Error",ke.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Le;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new ke(t,r.clarifyTimeoutError?ke.ETIMEDOUT:ke.ECONNABORTED,e,l)),l=null},Fe.isStandardBrowserEnv){const t=(e.withCredentials||rt(c))&&e.xsrfCookieName&&tt.read(e.xsrfCookieName);t&&i.set(e.xsrfHeaderName,t)}void 0===r&&i.setContentType(null),"setRequestHeader"in l&&we.forEach(i.toJSON(),(function(e,t){l.setRequestHeader(t,e)})),we.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),o&&"json"!==o&&(l.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",it(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",it(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{l&&(n(!t||t.type?new et(null,e,l):t),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(c);d&&-1===Fe.protocols.indexOf(d)?n(new ke("Unsupported protocol "+d+":",ke.ERR_BAD_REQUEST,e)):l.send(r||null)}))}};we.forEach(ot,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));function at(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new et(null,e)}function st(e){return at(e),e.headers=Xe.from(e.headers),e.data=Ke.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),(e=>{e=we.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let i=0;i<t&&(n=e[i],!(r=we.isString(n)?ot[n.toLowerCase()]:n));i++);if(!r){if(!1===r)throw new ke(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(we.hasOwnProp(ot,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!we.isFunction(r))throw new TypeError("adapter is not a function");return r})(e.adapter||We.adapter)(e).then((function(t){return at(e),t.data=Ke.call(e,e.transformResponse,t),t.headers=Xe.from(t.headers),t}),(function(t){return Je(t)||(at(e),t&&t.response&&(t.response.data=Ke.call(e,e.transformResponse,t.response),t.response.headers=Xe.from(t.response.headers))),Promise.reject(t)}))}const lt=e=>e instanceof Xe?e.toJSON():e;function ct(e,t){t=t||{};const n={};function r(e,t,n){return we.isPlainObject(e)&&we.isPlainObject(t)?we.merge.call({caseless:n},e,t):we.isPlainObject(t)?we.merge({},t):we.isArray(t)?t.slice():t}function i(e,t,n){return we.isUndefined(t)?we.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function o(e,t){if(!we.isUndefined(t))return r(void 0,t)}function a(e,t){return we.isUndefined(t)?we.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function s(n,i,o){return o in t?r(n,i):o in e?r(void 0,n):void 0}const l={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s,headers:(e,t)=>i(lt(e),lt(t),!0)};return we.forEach(Object.keys(Object.assign({},e,t)),(function(r){const o=l[r]||i,a=o(e[r],t[r],r);we.isUndefined(a)&&o!==s||(n[r]=a)})),n}const ut={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{ut[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const dt={};ut.transitional=function(e,t,n){function r(e,t){return"[Axios v1.4.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,i,o)=>{if(!1===e)throw new ke(r(i," has been removed"+(t?" in "+t:"")),ke.ERR_DEPRECATED);return t&&!dt[i]&&(dt[i]=!0,console.warn(r(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,i,o)}};const ht={assertOptions:function(e,t,n){if("object"!=typeof e)throw new ke("options must be an object",ke.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let i=r.length;for(;i-- >0;){const o=r[i],a=t[o];if(a){const t=e[o],n=void 0===t||a(t,o,e);if(!0!==n)throw new ke("option "+o+" must be "+n,ke.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new ke("Unknown option "+o,ke.ERR_BAD_OPTION)}},validators:ut},pt=ht.validators;class ft{constructor(e){this.defaults=e,this.interceptors={request:new Ne,response:new Ne}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=ct(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:i}=t;let o;void 0!==n&&ht.assertOptions(n,{silentJSONParsing:pt.transitional(pt.boolean),forcedJSONParsing:pt.transitional(pt.boolean),clarifyTimeoutError:pt.transitional(pt.boolean)},!1),null!=r&&(we.isFunction(r)?t.paramsSerializer={serialize:r}:ht.assertOptions(r,{encode:pt.function,serialize:pt.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase(),o=i&&we.merge(i.common,i[t.method]),o&&we.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=Xe.concat(o,i);const a=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const l=[];let c;this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)}));let u,d=0;if(!s){const e=[st.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,l),u=e.length,c=Promise.resolve(t);d<u;)c=c.then(e[d++],e[d++]);return c}u=a.length;let h=t;for(d=0;d<u;){const e=a[d++],t=a[d++];try{h=e(h)}catch(e){t.call(this,e);break}}try{c=st.call(this,h)}catch(e){return Promise.reject(e)}for(d=0,u=l.length;d<u;)c=c.then(l[d++],l[d++]);return c}getUri(e){return Ie(nt((e=ct(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}we.forEach(["delete","get","head","options"],(function(e){ft.prototype[e]=function(t,n){return this.request(ct(n||{},{method:e,url:t,data:(n||{}).data}))}})),we.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,i){return this.request(ct(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}ft.prototype[e]=t(),ft.prototype[e+"Form"]=t(!0)}));const gt=ft;class mt{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,i){n.reason||(n.reason=new et(e,r,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new mt((function(t){e=t})),cancel:e}}}const At=mt,bt={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(bt).forEach((([e,t])=>{bt[t]=e}));const yt=bt,vt=function e(t){const n=new gt(t),r=U(gt.prototype.request,n);return we.extend(r,gt.prototype,n,{allOwnKeys:!0}),we.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(ct(t,n))},r}(We);vt.Axios=gt,vt.CanceledError=et,vt.CancelToken=At,vt.isCancel=Je,vt.VERSION="1.4.0",vt.toFormData=Pe,vt.AxiosError=ke,vt.Cancel=vt.CanceledError,vt.all=function(e){return Promise.all(e)},vt.spread=function(e){return function(t){return e.apply(null,t)}},vt.isAxiosError=function(e){return we.isObject(e)&&!0===e.isAxiosError},vt.mergeConfig=ct,vt.AxiosHeaders=Xe,vt.formToJSON=e=>je(we.isHTMLForm(e)?new FormData(e):e),vt.HttpStatusCode=yt,vt.default=vt;const wt=vt;var Et="https://sentinel.www.dianasentinel.com/api/",Ct=wt.create({baseURL:"".concat(Et),headers:{"Content-Type":"application/json"}});Ct.interceptors.request.use((e=>Promise.resolve(e)),(e=>Promise.reject(e))),Ct.interceptors.response.use((e=>Promise.resolve(e)),(e=>Promise.reject(e)));const xt=Ct;function kt(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Bt{}kt(Bt,"Login",(e=>xt.post("/token/",e))),kt(Bt,"Register",(e=>xt.post("".concat(St,"/register"),e))),kt(Bt,"Logout",(e=>xt.post("".concat(St,"/logout")))),kt(Bt,"Attendance",(e=>{var t=localStorage.getItem("token");return xt.post("".concat(St,"/attendance"),e,{headers:{Authorization:"Bearer ".concat(t)}})})),kt(Bt,"ideltime",(e=>{var t=localStorage.getItem("token");return xt.post("".concat(St,"/idealtime"),e,{headers:{Authorization:"Bearer ".concat(t)}})})),kt(Bt,"loggingout",(e=>{var t=localStorage.getItem("token");return xt.post("".concat(St,"/loggingout"),e,{headers:{Authorization:"Bearer ".concat(t)}})})),kt(Bt,"screendetails",(e=>{var t=localStorage.getItem("token");return xt.post("".concat(St,"/monitorscreen"),e,{headers:{Authorization:"Bearer ".concat(t)}})}));var St="users";const _t=Bt,zt="src/assests/images/logo.png";function Pt(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}const Ot=function(){var e=localStorage.getItem("name"),{setUser:t,setId:r,setToken:i}=j(),o=function(){var e,n=(e=function*(){yield t(null),yield r(null),yield i(null),localStorage.clear(),window.location.reload()},function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){Pt(o,r,i,a,s,"next",e)}function s(e){Pt(o,r,i,a,s,"throw",e)}a(void 0)}))});return function(){return n.apply(this,arguments)}}();return n.createElement("nav",{className:" navigationbar top-2 text-xl flex w-full items-center   justify-between  z-20"},n.createElement("div",{className:"flex item-center"},n.createElement("img",{src:zt,alt:"Daina sentinel",className:" flex w-[60px] h-auto py-2 pl-2 "}),n.createElement("p",{className:" flex text-newbuttoncolor "},"iana")),n.createElement("div",{className:"flex postiondiv  float-right flex-1 mr-2"},n.createElement("li",{className:" flex flex-col"},n.createElement("p",{className:"mr-2 text-white"},e),e?n.createElement("p",{className:"text-red-600 logoutbutton font-sans text-md transition-colors duration-200",onClick:o},"Logout"):n.createElement("a",{href:""}))))},Dt=function(e){var{label:t,id:r,extra:i,type:o,placeholder:a,variant:s,state:l,disabled:c,onChange:u,value:d,onClick:h,name:p,autoComplete:f}=e;return n.createElement("div",{className:"".concat(i)},n.createElement("label",{htmlFor:r,className:"text-sm font-mono text-white ".concat("auth"===s?"ml-1.5 font-medium":"ml-3 font-bold")},t),n.createElement("input",{name:p,autoComplete:f,onClick:h,disabled:c,type:o,id:r,value:d,placeholder:a,onChange:u,className:"mt-2 flex text-white h-12 w-full items-center justify-center rounded-xl border bg-white/0 p-3 text-sm outline-none ".concat(!0===c?"!border-none !bg-gray-100 dark:!bg-white/5 dark:placeholder:!text-[rgba(255,255,255,0.15)]":"error"===l?"border-red-500 text-red-500 placeholder:text-red-500 dark:!border-red-400 dark:!text-red-400 dark:placeholder:!text-red-400":"success"===l?"border-green-500 text-green-500 placeholder:text-green-500 dark:!border-green-400 dark:!text-green-400 dark:placeholder:!text-green-400":"border-gray-200 dark:!border-white/10 dark:text-white")}))},Mt="generated",Tt="pointerleave",Rt="pointermove",It="touchend",Nt="tsParticles - Error";class Lt{constructor(e,t,n){if(this._updateFromAngle=(e,t)=>{this.x=Math.cos(e)*t,this.y=Math.sin(e)*t},!On(e)&&e){this.x=e.x,this.y=e.y;const t=e;this.z=t.z?t.z:0}else{if(void 0===e||void 0===t)throw new Error(`${Nt} Vector3d not initialized correctly`);this.x=e,this.y=t,this.z=n??0}}static get origin(){return Lt.create(0,0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(e){this._updateFromAngle(e,this.length)}get length(){return Math.sqrt(this.getLengthSq())}set length(e){this._updateFromAngle(this.angle,e)}static clone(e){return Lt.create(e.x,e.y,e.z)}static create(e,t,n){return new Lt(e,t,n)}add(e){return Lt.create(this.x+e.x,this.y+e.y,this.z+e.z)}addTo(e){this.x+=e.x,this.y+=e.y,this.z+=e.z}copy(){return Lt.clone(this)}distanceTo(e){return this.sub(e).length}distanceToSq(e){return this.sub(e).getLengthSq()}div(e){return Lt.create(this.x/e,this.y/e,this.z/e)}divTo(e){this.x/=e,this.y/=e,this.z/=e}getLengthSq(){return this.x**2+this.y**2}mult(e){return Lt.create(this.x*e,this.y*e,this.z*e)}multTo(e){this.x*=e,this.y*=e,this.z*=e}normalize(){const e=this.length;0!=e&&this.multTo(1/e)}rotate(e){return Lt.create(this.x*Math.cos(e)-this.y*Math.sin(e),this.x*Math.sin(e)+this.y*Math.cos(e),0)}setTo(e){this.x=e.x,this.y=e.y;const t=e;this.z=t.z?t.z:0}sub(e){return Lt.create(this.x-e.x,this.y-e.y,this.z-e.z)}subFrom(e){this.x-=e.x,this.y-=e.y,this.z-=e.z}}class Ft extends Lt{constructor(e,t){super(e,t,0)}static get origin(){return Ft.create(0,0)}static clone(e){return Ft.create(e.x,e.y)}static create(e,t){return new Ft(e,t)}}let jt=Math.random;const Ut=new Map;function qt(e,t){Ut.get(e)||Ut.set(e,t)}function Wt(e){return Ut.get(e)||(e=>e)}function $t(){return Ht(jt(),0,1-1e-16)}function Ht(e,t,n){return Math.min(Math.max(e,t),n)}function Vt(e,t,n,r){return Math.floor((e*n+t*r)/(n+r))}function Yt(e){const t=Xt(e);let n=Qt(e);return t===n&&(n=0),$t()*(t-n)+n}function Gt(e){return On(e)?e:Yt(e)}function Qt(e){return On(e)?e:e.min}function Xt(e){return On(e)?e:e.max}function Kt(e,t){if(e===t||void 0===t&&On(e))return e;const n=Qt(e),r=Xt(e);return void 0!==t?{min:Math.min(n,t),max:Math.max(r,t)}:Kt(n,r)}function Jt(e){const t=e.random,{enable:n,minimumValue:r}=zn(t)?{enable:t,minimumValue:0}:t;return Gt(n?Kt(e.value,r):e.value)}function Zt(e,t){const n=e.x-t.x,r=e.y-t.y;return{dx:n,dy:r,distance:Math.sqrt(n**2+r**2)}}function en(e,t){return Zt(e,t).distance}function tn(e,t,n,r){return Ft.create(e.x*(n-r)/(n+r)+2*t.x*r/(n+r),e.y)}function nn(e){return{x:(e.position?.x??100*$t())*e.size.width/100,y:(e.position?.y??100*$t())*e.size.height/100}}function rn(e){const t={x:void 0!==e.position?.x?Gt(e.position.x):void 0,y:void 0!==e.position?.y?Gt(e.position.y):void 0};return nn({size:e.size,position:t})}function on(e){return e?e.endsWith("%")?parseFloat(e)/100:parseFloat(e):1}const an={debug:console.debug,error:console.error,info:console.info,log:console.log,verbose:console.log,warning:console.warn};function sn(){return an}function ln(e){const t={bounced:!1},{pSide:n,pOtherSide:r,rectSide:i,rectOtherSide:o,velocity:a,factor:s}=e;return r.min<o.min||r.min>o.max||r.max<o.min||r.max>o.max||(n.max>=i.min&&n.max<=(i.max+i.min)/2&&a>0||n.min<=i.max&&n.min>(i.max+i.min)/2&&a<0)&&(t.velocity=a*-s,t.bounced=!0),t}function cn(){return"undefined"==typeof window||!window||void 0===window.document||!window.document}function un(e){if(!cn()&&"undefined"!=typeof matchMedia)return matchMedia(e)}function dn(e,t){return e===t||Tn(t)&&t.indexOf(e)>-1}function hn(e){return Math.floor($t()*e.length)}function pn(e,t,n=!0){return e[void 0!==t&&n?t%e.length:hn(e)]}function fn(e,t,n,r,i){return function(e,t,n,r){let i=!0;return r&&"bottom"!==r||(i=e.top<t.height+n.x),!i||r&&"left"!==r||(i=e.right>n.x),!i||r&&"right"!==r||(i=e.left<t.width+n.y),!i||r&&"top"!==r||(i=e.bottom>n.y),i}(gn(e,r??0),t,n,i)}function gn(e,t){return{bottom:e.y+t,left:e.x-t,right:e.x+t,top:e.y-t}}function mn(e,...t){for(const n of t){if(null==n)continue;if(!Mn(n)){e=n;continue}const t=Array.isArray(n);!t||!Mn(e)&&e&&Array.isArray(e)?t||!Mn(e)&&e&&!Array.isArray(e)||(e={}):e=[];for(const t in n){if("__proto__"===t)continue;const r=n[t],i=e;i[t]=Mn(r)&&Array.isArray(r)?r.map((e=>mn(i[t],e))):mn(i[t],r)}}return e}function An(e,t){return!!kn(t,(t=>t.enable&&dn(e,t.mode)))}function bn(e,t,n){Cn(t,(t=>{const r=t.mode;t.enable&&dn(e,r)&&function(e,t){Cn(e.selectors,(n=>{t(n,e)}))}(t,n)}))}function yn(e,t){if(t&&e)return kn(e,(e=>function(e,t){const n=Cn(t,(t=>e.matches(t)));return Tn(n)?n.some((e=>e)):n}(t,e.selectors)))}function vn(e){return{position:e.getPosition(),radius:e.getRadius(),mass:e.getMass(),velocity:e.velocity,factor:Ft.create(Jt(e.options.bounce.horizontal),Jt(e.options.bounce.vertical))}}function wn(e,t){const{x:n,y:r}=e.velocity.sub(t.velocity),[i,o]=[e.position,t.position],{dx:a,dy:s}=Zt(o,i);if(n*a+r*s<0)return;const l=-Math.atan2(s,a),c=e.mass,u=t.mass,d=e.velocity.rotate(l),h=t.velocity.rotate(l),p=tn(d,h,c,u),f=tn(h,d,c,u),g=p.rotate(-l),m=f.rotate(-l);e.velocity.x=g.x*e.factor.x,e.velocity.y=g.y*e.factor.y,t.velocity.x=m.x*t.factor.x,t.velocity.y=m.y*t.factor.y}function En(e,t){const n=gn(e.getPosition(),e.getRadius()),r=ln({pSide:{min:n.left,max:n.right},pOtherSide:{min:n.top,max:n.bottom},rectSide:{min:t.left,max:t.right},rectOtherSide:{min:t.top,max:t.bottom},velocity:e.velocity.x,factor:Jt(e.options.bounce.horizontal)});r.bounced&&(void 0!==r.velocity&&(e.velocity.x=r.velocity),void 0!==r.position&&(e.position.x=r.position));const i=ln({pSide:{min:n.top,max:n.bottom},pOtherSide:{min:n.left,max:n.right},rectSide:{min:t.top,max:t.bottom},rectOtherSide:{min:t.left,max:t.right},velocity:e.velocity.y,factor:Jt(e.options.bounce.vertical)});i.bounced&&(void 0!==i.velocity&&(e.velocity.y=i.velocity),void 0!==i.position&&(e.position.y=i.position))}function Cn(e,t){return Tn(e)?e.map(((e,n)=>t(e,n))):t(e,0)}function xn(e,t,n){return Tn(e)?pn(e,t,n):e}function kn(e,t){return Tn(e)?e.find(((e,n)=>t(e,n))):t(e,0)?e:void 0}function Bn(e,t){const n=e.value,r=e.animation,i={delayTime:1e3*Gt(r.delay),enable:r.enable,value:Gt(e.value)*t,max:Xt(n)*t,min:Qt(n)*t,loops:0,maxLoops:Gt(r.count),time:0};if(r.enable){switch(i.decay=1-Gt(r.decay),r.mode){case"increase":i.status="increasing";break;case"decrease":i.status="decreasing";break;case"random":i.status=$t()>=.5?"increasing":"decreasing"}const e="auto"===r.mode;switch(r.startValue){case"min":i.value=i.min,e&&(i.status="increasing");break;case"max":i.value=i.max,e&&(i.status="decreasing");break;default:i.value=Yt(i),e&&(i.status=$t()>=.5?"increasing":"decreasing")}}return i.initialValue=i.value,i}function Sn(e,t){if("percent"!==e.mode){const{mode:t,...n}=e;return n}return"x"in e?{x:e.x/100*t.width,y:e.y/100*t.height}:{width:e.width/100*t.width,height:e.height/100*t.height}}function _n(e,t){return Sn(e,t)}function zn(e){return"boolean"==typeof e}function Pn(e){return"string"==typeof e}function On(e){return"number"==typeof e}function Dn(e){return"function"==typeof e}function Mn(e){return"object"==typeof e&&null!==e}function Tn(e){return Array.isArray(e)}const Rn="random",In="mid",Nn=new Map;function Ln(e){Nn.set(e.key,e)}function Fn(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function jn(e,t,n=!0){if(!e)return;const r=Pn(e)?{value:e}:e;if(Pn(r.value))return Un(r.value,t,n);if(Tn(r.value))return jn({value:pn(r.value,t,n)});for(const[,e]of Nn){const t=e.handleRangeColor(r);if(t)return t}}function Un(e,t,n=!0){if(!e)return;const r=Pn(e)?{value:e}:e;if(Pn(r.value))return r.value===Rn?Hn():function(e){return function(e){for(const[,t]of Nn)if(e.startsWith(t.stringPrefix))return t.parseString(e);const t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,((e,t,n,r,i)=>t+t+n+n+r+r+(void 0!==i?i+i:""))),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(t);return n?{a:void 0!==n[4]?parseInt(n[4],16)/255:1,b:parseInt(n[3],16),g:parseInt(n[2],16),r:parseInt(n[1],16)}:void 0}(e)}(r.value);if(Tn(r.value))return Un({value:pn(r.value,t,n)});for(const[,e]of Nn){const t=e.handleColor(r);if(t)return t}}function qn(e,t,n=!0){const r=jn(e,t,n);return r?Wn(r):void 0}function Wn(e){const t=e.r/255,n=e.g/255,r=e.b/255,i=Math.max(t,n,r),o=Math.min(t,n,r),a={h:0,l:(i+o)/2,s:0};return i!==o&&(a.s=a.l<.5?(i-o)/(i+o):(i-o)/(2-i-o),a.h=t===i?(n-r)/(i-o):a.h=n===i?2+(r-t)/(i-o):4+(t-n)/(i-o)),a.l*=100,a.s*=100,a.h*=60,a.h<0&&(a.h+=360),a.h>=360&&(a.h-=360),a}function $n(e){const t={b:0,g:0,r:0},n={h:e.h/360,l:e.l/100,s:e.s/100};if(n.s){const e=n.l<.5?n.l*(1+n.s):n.l+n.s-n.l*n.s,r=2*n.l-e;t.r=Fn(r,e,n.h+1/3),t.g=Fn(r,e,n.h),t.b=Fn(r,e,n.h-1/3)}else t.r=t.g=t.b=n.l;return t.r=Math.floor(255*t.r),t.g=Math.floor(255*t.g),t.b=Math.floor(255*t.b),t}function Hn(e){const t=e??0;return{b:Math.floor(Yt(Kt(t,256))),g:Math.floor(Yt(Kt(t,256))),r:Math.floor(Yt(Kt(t,256)))}}function Vn(e,t){return`rgba(${e.r}, ${e.g}, ${e.b}, ${t??1})`}function Yn(e,t){return`hsla(${e.h}, ${e.s}%, ${e.l}%, ${t??1})`}function Gn(e,t,n,r){let i=e,o=t;return void 0===i.r&&(i=$n(e)),void 0===o.r&&(o=$n(t)),{b:Vt(i.b,o.b,n,r),g:Vt(i.g,o.g,n,r),r:Vt(i.r,o.r,n,r)}}function Qn(e,t,n){if(n===Rn)return Hn();if(n!==In)return n;{const n=e.getFillColor()??e.getStrokeColor(),r=t?.getFillColor()??t?.getStrokeColor();if(n&&r&&t)return Gn(n,r,e.getRadius(),t.getRadius());{const e=n??r;if(e)return $n(e)}}}function Xn(e,t,n){const r=Pn(e)?e:e.value;return r===Rn?n?jn({value:r}):t?Rn:In:r===In?In:jn({value:r})}function Kn(e){return void 0!==e?{h:e.h.value,s:e.s.value,l:e.l.value}:void 0}function Jn(e,t,n){const r={h:{enable:!1,value:e.h},s:{enable:!1,value:e.s},l:{enable:!1,value:e.l}};return t&&(Zn(r.h,t.h,n),Zn(r.s,t.s,n),Zn(r.l,t.l,n)),r}function Zn(e,t,n){e.enable=t.enable,e.enable?(e.velocity=Gt(t.speed)/100*n,e.decay=1-Gt(t.decay),e.status="increasing",e.loops=0,e.maxLoops=Gt(t.count),e.time=0,e.delayTime=1e3*Gt(t.delay),t.sync||(e.velocity*=$t(),e.value*=$t()),e.initialValue=e.value):e.velocity=0}function er(e,t,n){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.closePath()}function tr(e,t){e.clearRect(0,0,t.width,t.height)}function nr(e,t,n){const r=t[n];void 0!==r&&(e[n]=(e[n]??1)*r)}class rr{constructor(e){this.container=e,this._applyPostDrawUpdaters=e=>{for(const t of this._postDrawUpdaters)t.afterDraw&&t.afterDraw(e)},this._applyPreDrawUpdaters=(e,t,n,r,i,o)=>{for(const a of this._preDrawUpdaters){if(a.getColorStyles){const{fill:o,stroke:s}=a.getColorStyles(t,e,n,r);o&&(i.fill=o),s&&(i.stroke=s)}if(a.getTransformValues){const e=a.getTransformValues(t);for(const t in e)nr(o,e,t)}a.beforeDraw&&a.beforeDraw(t)}},this._applyResizePlugins=()=>{for(const e of this._resizePlugins)e.resize&&e.resize()},this._getPluginParticleColors=e=>{let t,n;for(const r of this._colorPlugins)if(!t&&r.particleFillColor&&(t=qn(r.particleFillColor(e))),!n&&r.particleStrokeColor&&(n=qn(r.particleStrokeColor(e))),t&&n)break;return[t,n]},this._initCover=()=>{const e=this.container.actualOptions.backgroundMask.cover,t=jn(e.color);if(t){const n={...t,a:e.opacity};this._coverColorStyle=Vn(n,n.a)}},this._initStyle=()=>{const e=this.element,t=this.container.actualOptions;if(e){this._fullScreen?(this._originalStyle=mn({},e.style),this._setFullScreenStyle()):this._resetOriginalStyle();for(const n in t.style){if(!n||!t.style)continue;const r=t.style[n];r&&e.style.setProperty(n,r,"important")}}},this._initTrail=async()=>{const e=this.container.actualOptions,t=e.particles.move.trail,n=t.fill;if(t.enable)if(n.color){const t=jn(n.color);if(!t)return;const r=e.particles.move.trail;this._trailFill={color:{...t},opacity:1/r.length}}else await new Promise(((e,r)=>{if(!n.image)return;const i=document.createElement("img");i.addEventListener("load",(()=>{this._trailFill={image:i,opacity:1/t.length},e()})),i.addEventListener("error",(e=>{r(e.error)})),i.src=n.image}))},this._paintBase=e=>{this.draw((t=>function(e,t,n){e.fillStyle=n??"rgba(0,0,0,0)",e.fillRect(0,0,t.width,t.height)}(t,this.size,e)))},this._paintImage=(e,t)=>{this.draw((n=>function(e,t,n,r){n&&(e.globalAlpha=r,e.drawImage(n,0,0,t.width,t.height),e.globalAlpha=1)}(n,this.size,e,t)))},this._repairStyle=()=>{const e=this.element;e&&(this._safeMutationObserver((e=>e.disconnect())),this._initStyle(),this.initBackground(),this._safeMutationObserver((t=>t.observe(e,{attributes:!0}))))},this._resetOriginalStyle=()=>{const e=this.element,t=this._originalStyle;if(!e||!t)return;const n=e.style;n.position=t.position,n.zIndex=t.zIndex,n.top=t.top,n.left=t.left,n.width=t.width,n.height=t.height},this._safeMutationObserver=e=>{this._mutationObserver&&e(this._mutationObserver)},this._setFullScreenStyle=()=>{const e=this.element;if(!e)return;const t="important",n=e.style;n.setProperty("position","fixed",t),n.setProperty("z-index",this.container.actualOptions.fullScreen.zIndex.toString(10),t),n.setProperty("top","0",t),n.setProperty("left","0",t),n.setProperty("width","100%",t),n.setProperty("height","100%",t)},this.size={height:0,width:0},this._context=null,this._generated=!1,this._preDrawUpdaters=[],this._postDrawUpdaters=[],this._resizePlugins=[],this._colorPlugins=[]}get _fullScreen(){return this.container.actualOptions.fullScreen.enable}clear(){const e=this.container.actualOptions,t=e.particles.move.trail,n=this._trailFill;e.backgroundMask.enable?this.paint():t.enable&&t.length>0&&n?n.color?this._paintBase(Vn(n.color,n.opacity)):n.image&&this._paintImage(n.image,n.opacity):this.draw((e=>{tr(e,this.size)}))}destroy(){if(this.stop(),this._generated){const e=this.element;e&&e.remove()}else this._resetOriginalStyle();this._preDrawUpdaters=[],this._postDrawUpdaters=[],this._resizePlugins=[],this._colorPlugins=[]}draw(e){const t=this._context;if(t)return e(t)}drawParticle(e,t){if(e.spawning||e.destroyed)return;const n=e.getRadius();if(n<=0)return;const r=e.getFillColor(),i=e.getStrokeColor()??r;let[o,a]=this._getPluginParticleColors(e);o||(o=r),a||(a=i),(o||a)&&this.draw((r=>{const i=this.container,s=i.actualOptions,l=e.options.zIndex,c=(1-e.zIndexFactor)**l.opacityRate,u=e.bubble.opacity??e.opacity?.value??1,d=u*c,h=(e.strokeOpacity??u)*c,p={},f={fill:o?Yn(o,d):void 0};f.stroke=a?Yn(a,h):f.fill,this._applyPreDrawUpdaters(r,e,n,d,f,p),function(e){const{container:t,context:n,particle:r,delta:i,colorStyles:o,backgroundMask:a,composite:s,radius:l,opacity:c,shadow:u,transform:d}=e,h=r.getPosition(),p=r.rotation+(r.pathRotation?r.velocity.angle:0),f=Math.sin(p),g=Math.cos(p),m={a:g*(d.a??1),b:f*(d.b??1),c:-f*(d.c??1),d:g*(d.d??1)};n.setTransform(m.a,m.b,m.c,m.d,h.x,h.y),n.beginPath(),a&&(n.globalCompositeOperation=s);const A=r.shadowColor;u.enable&&A&&(n.shadowBlur=u.blur,n.shadowColor=Vn(A),n.shadowOffsetX=u.offset.x,n.shadowOffsetY=u.offset.y),o.fill&&(n.fillStyle=o.fill);const b=r.strokeWidth??0;n.lineWidth=b,o.stroke&&(n.strokeStyle=o.stroke),function(e,t,n,r,i,o){if(!n.shape)return;const a=e.drawers.get(n.shape);a&&a.draw(t,n,r,i,o,e.retina.pixelRatio)}(t,n,r,l,c,i),b>0&&n.stroke(),r.close&&n.closePath(),r.fill&&n.fill(),function(e,t,n,r,i,o){if(!n.shape)return;const a=e.drawers.get(n.shape);a&&a.afterEffect&&a.afterEffect(t,n,r,i,o,e.retina.pixelRatio)}(t,n,r,l,c,i),n.globalCompositeOperation="source-over",n.setTransform(1,0,0,1,0,0)}({container:i,context:r,particle:e,delta:t,colorStyles:f,backgroundMask:s.backgroundMask.enable,composite:s.backgroundMask.composite,radius:n*(1-e.zIndexFactor)**l.sizeRate,opacity:d,shadow:e.options.shadow,transform:p}),this._applyPostDrawUpdaters(e)}))}drawParticlePlugin(e,t,n){this.draw((r=>function(e,t,n,r){t.drawParticle&&t.drawParticle(e,n,r)}(r,e,t,n)))}drawPlugin(e,t){this.draw((n=>function(e,t,n){t.draw&&t.draw(e,n)}(n,e,t)))}async init(){this._safeMutationObserver((e=>e.disconnect())),this._mutationObserver=function(e){if(!cn()&&"undefined"!=typeof MutationObserver)return new MutationObserver(e)}((e=>{for(const t of e)"attributes"===t.type&&"style"===t.attributeName&&this._repairStyle()})),this.resize(),this._initStyle(),this._initCover();try{await this._initTrail()}catch(e){sn().error(e)}this.initBackground(),this._safeMutationObserver((e=>{this.element&&e.observe(this.element,{attributes:!0})})),this.initUpdaters(),this.initPlugins(),this.paint()}initBackground(){const e=this.container.actualOptions.background,t=this.element;if(!t)return;const n=t.style;if(n){if(e.color){const t=jn(e.color);n.backgroundColor=t?Vn(t,e.opacity):""}else n.backgroundColor="";n.backgroundImage=e.image||"",n.backgroundPosition=e.position||"",n.backgroundRepeat=e.repeat||"",n.backgroundSize=e.size||""}}initPlugins(){this._resizePlugins=[];for(const[,e]of this.container.plugins)e.resize&&this._resizePlugins.push(e),(e.particleFillColor||e.particleStrokeColor)&&this._colorPlugins.push(e)}initUpdaters(){this._preDrawUpdaters=[],this._postDrawUpdaters=[];for(const e of this.container.particles.updaters)e.afterDraw&&this._postDrawUpdaters.push(e),(e.getColorStyles||e.getTransformValues||e.beforeDraw)&&this._preDrawUpdaters.push(e)}loadCanvas(e){this._generated&&this.element&&this.element.remove(),this._generated=e.dataset&&Mt in e.dataset?"true"===e.dataset[Mt]:this._generated,this.element=e,this.element.ariaHidden="true",this._originalStyle=mn({},this.element.style),this.size.height=e.offsetHeight,this.size.width=e.offsetWidth,this._context=this.element.getContext("2d"),this._safeMutationObserver((e=>{this.element&&e.observe(this.element,{attributes:!0})})),this.container.retina.init(),this.initBackground()}paint(){const e=this.container.actualOptions;this.draw((t=>{e.backgroundMask.enable&&e.backgroundMask.cover?(tr(t,this.size),this._paintBase(this._coverColorStyle)):this._paintBase()}))}resize(){if(!this.element)return!1;const e=this.container,t=e.retina.pixelRatio,n=e.canvas.size,r=this.element.offsetWidth*t,i=this.element.offsetHeight*t;if(i===n.height&&r===n.width&&i===this.element.height&&r===this.element.width)return!1;const o={...n};return this.element.width=n.width=this.element.offsetWidth*t,this.element.height=n.height=this.element.offsetHeight*t,this.container.started&&(this.resizeFactor={width:n.width/o.width,height:n.height/o.height}),!0}stop(){this._safeMutationObserver((e=>e.disconnect())),this._mutationObserver=void 0,this.draw((e=>tr(e,this.size)))}async windowResize(){if(!this.element||!this.resize())return;const e=this.container,t=e.updateActualOptions();e.particles.setDensity(),this._applyResizePlugins(),t&&await e.refresh()}}function ir(e,t,n,r,i){if(r){let r={passive:!0};zn(i)?r.capture=i:void 0!==i&&(r=i),e.addEventListener(t,n,r)}else{const r=i;e.removeEventListener(t,n,r)}}class or{constructor(e){this.container=e,this._doMouseTouchClick=e=>{const t=this.container,n=t.actualOptions;if(this._canPush){const e=t.interactivity.mouse,r=e.position;if(!r)return;e.clickPosition={...r},e.clickTime=(new Date).getTime(),Cn(n.interactivity.events.onClick.mode,(e=>this.container.handleClickMode(e)))}"touchend"===e.type&&setTimeout((()=>this._mouseTouchFinish()),500)},this._handleThemeChange=e=>{const t=e,n=this.container,r=n.options,i=r.defaultThemes,o=t.matches?i.dark:i.light,a=r.themes.find((e=>e.name===o));a&&a.default.auto&&n.loadTheme(o)},this._handleVisibilityChange=()=>{const e=this.container,t=e.actualOptions;this._mouseTouchFinish(),t.pauseOnBlur&&(document&&document.hidden?(e.pageHidden=!0,e.pause()):(e.pageHidden=!1,e.getAnimationStatus()?e.play(!0):e.draw(!0)))},this._handleWindowResize=async()=>{this._resizeTimeout&&(clearTimeout(this._resizeTimeout),delete this._resizeTimeout),this._resizeTimeout=setTimeout((async()=>{const e=this.container.canvas;e&&await e.windowResize()}),1e3*this.container.actualOptions.interactivity.events.resize.delay)},this._manageInteractivityListeners=(e,t)=>{const n=this._handlers,r=this.container,i=r.actualOptions,o=r.interactivity.element;if(!o)return;const a=o,s=r.canvas.element;s&&(s.style.pointerEvents=a===s?"initial":"none"),(i.interactivity.events.onHover.enable||i.interactivity.events.onClick.enable)&&(ir(o,Rt,n.mouseMove,t),ir(o,"touchstart",n.touchStart,t),ir(o,"touchmove",n.touchMove,t),i.interactivity.events.onClick.enable?(ir(o,It,n.touchEndClick,t),ir(o,"pointerup",n.mouseUp,t),ir(o,"pointerdown",n.mouseDown,t)):ir(o,It,n.touchEnd,t),ir(o,e,n.mouseLeave,t),ir(o,"touchcancel",n.touchCancel,t))},this._manageListeners=e=>{const t=this._handlers,n=this.container,r=n.actualOptions.interactivity.detectsOn,i=n.canvas.element;let o=Tt;"window"===r?(n.interactivity.element=window,o="pointerout"):n.interactivity.element="parent"===r&&i?i.parentElement??i.parentNode:i,this._manageMediaMatch(e),this._manageResize(e),this._manageInteractivityListeners(o,e),document&&ir(document,"visibilitychange",t.visibilityChange,e,!1)},this._manageMediaMatch=e=>{const t=this._handlers,n=un("(prefers-color-scheme: dark)");n&&(void 0===n.addEventListener?void 0!==n.addListener&&(e?n.addListener(t.oldThemeChange):n.removeListener(t.oldThemeChange)):ir(n,"change",t.themeChange,e))},this._manageResize=e=>{const t=this._handlers,n=this.container;if(!n.actualOptions.interactivity.events.resize)return;if("undefined"==typeof ResizeObserver)return void ir(window,"resize",t.resize,e);const r=n.canvas.element;this._resizeObserver&&!e?(r&&this._resizeObserver.unobserve(r),this._resizeObserver.disconnect(),delete this._resizeObserver):!this._resizeObserver&&e&&r&&(this._resizeObserver=new ResizeObserver((async e=>{const t=e.find((e=>e.target===r));t&&await this._handleWindowResize()})),this._resizeObserver.observe(r))},this._mouseDown=()=>{const{interactivity:e}=this.container;if(!e)return;const{mouse:t}=e;t.clicking=!0,t.downPosition=t.position},this._mouseTouchClick=e=>{const t=this.container,n=t.actualOptions,{mouse:r}=t.interactivity;r.inside=!0;let i=!1;const o=r.position;if(o&&n.interactivity.events.onClick.enable){for(const[,e]of t.plugins)if(e.clickPositionValid&&(i=e.clickPositionValid(o),i))break;i||this._doMouseTouchClick(e),r.clicking=!1}},this._mouseTouchFinish=()=>{const e=this.container.interactivity;if(!e)return;const t=e.mouse;delete t.position,delete t.clickPosition,delete t.downPosition,e.status=Tt,t.inside=!1,t.clicking=!1},this._mouseTouchMove=e=>{const t=this.container,n=t.actualOptions,r=t.interactivity,i=t.canvas.element;if(!r||!r.element)return;let o;if(r.mouse.inside=!0,e.type.startsWith("pointer")){this._canPush=!0;const t=e;if(r.element===window){if(i){const e=i.getBoundingClientRect();o={x:t.clientX-e.left,y:t.clientY-e.top}}}else if("parent"===n.interactivity.detectsOn){const e=t.target,n=t.currentTarget;if(e&&n&&i){const r=e.getBoundingClientRect(),a=n.getBoundingClientRect(),s=i.getBoundingClientRect();o={x:t.offsetX+2*r.left-(a.left+s.left),y:t.offsetY+2*r.top-(a.top+s.top)}}else o={x:t.offsetX??t.clientX,y:t.offsetY??t.clientY}}else t.target===i&&(o={x:t.offsetX??t.clientX,y:t.offsetY??t.clientY})}else if(this._canPush="touchmove"!==e.type,i){const t=e,n=t.touches[t.touches.length-1],r=i.getBoundingClientRect();o={x:n.clientX-(r.left??0),y:n.clientY-(r.top??0)}}const a=t.retina.pixelRatio;o&&(o.x*=a,o.y*=a),r.mouse.position=o,r.status=Rt},this._touchEnd=e=>{const t=e,n=Array.from(t.changedTouches);for(const e of n)this._touches.delete(e.identifier);this._mouseTouchFinish()},this._touchEndClick=e=>{const t=e,n=Array.from(t.changedTouches);for(const e of n)this._touches.delete(e.identifier);this._mouseTouchClick(e)},this._touchStart=e=>{const t=e,n=Array.from(t.changedTouches);for(const e of n)this._touches.set(e.identifier,performance.now());this._mouseTouchMove(e)},this._canPush=!0,this._touches=new Map,this._handlers={mouseDown:()=>this._mouseDown(),mouseLeave:()=>this._mouseTouchFinish(),mouseMove:e=>this._mouseTouchMove(e),mouseUp:e=>this._mouseTouchClick(e),touchStart:e=>this._touchStart(e),touchMove:e=>this._mouseTouchMove(e),touchEnd:e=>this._touchEnd(e),touchCancel:e=>this._touchEnd(e),touchEndClick:e=>this._touchEndClick(e),visibilityChange:()=>this._handleVisibilityChange(),themeChange:e=>this._handleThemeChange(e),oldThemeChange:e=>this._handleThemeChange(e),resize:()=>{this._handleWindowResize()}}}addListeners(){this._manageListeners(!0)}removeListeners(){this._manageListeners(!1)}}class ar{constructor(){this.value=""}static create(e,t){const n=new ar;return n.load(e),void 0!==t&&(Pn(t)||Tn(t)?n.load({value:t}):n.load(t)),n}load(e){void 0!==e?.value&&(this.value=e.value)}}class sr{constructor(){this.color=new ar,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.image&&(this.image=e.image),void 0!==e.position&&(this.position=e.position),void 0!==e.repeat&&(this.repeat=e.repeat),void 0!==e.size&&(this.size=e.size),void 0!==e.opacity&&(this.opacity=e.opacity))}}class lr{constructor(){this.color=new ar,this.color.value="#fff",this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.opacity&&(this.opacity=e.opacity))}}class cr{constructor(){this.composite="destination-out",this.cover=new lr,this.enable=!1}load(e){if(e){if(void 0!==e.composite&&(this.composite=e.composite),void 0!==e.cover){const t=e.cover,n=Pn(e.cover)?{color:e.cover}:e.cover;this.cover.load(void 0!==t.color?t:{color:n})}void 0!==e.enable&&(this.enable=e.enable)}}}class ur{constructor(){this.enable=!0,this.zIndex=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.zIndex&&(this.zIndex=e.zIndex))}}class dr{constructor(){this.enable=!1,this.mode=[]}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode))}}class hr{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type="circle"}get el(){return this.elementId}set el(e){this.elementId=e}get elementId(){return this.ids}set elementId(e){this.ids=e}get ids(){return Cn(this.selectors,(e=>e.replace("#","")))}set ids(e){this.selectors=Cn(e,(e=>`#${e}`))}load(e){if(!e)return;const t=e.ids??e.elementId??e.el;void 0!==t&&(this.ids=t),void 0!==e.selectors&&(this.selectors=e.selectors),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.type&&(this.type=e.type)}}class pr{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.force&&(this.force=e.force),void 0!==e.smooth&&(this.smooth=e.smooth))}}class fr{constructor(){this.enable=!1,this.mode=[],this.parallax=new pr}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),this.parallax.load(e.parallax))}}class gr{constructor(){this.delay=.5,this.enable=!0}load(e){void 0!==e&&(void 0!==e.delay&&(this.delay=e.delay),void 0!==e.enable&&(this.enable=e.enable))}}class mr{constructor(){this.onClick=new dr,this.onDiv=new hr,this.onHover=new fr,this.resize=new gr}get onclick(){return this.onClick}set onclick(e){this.onClick=e}get ondiv(){return this.onDiv}set ondiv(e){this.onDiv=e}get onhover(){return this.onHover}set onhover(e){this.onHover=e}load(e){if(!e)return;this.onClick.load(e.onClick??e.onclick);const t=e.onDiv??e.ondiv;void 0!==t&&(this.onDiv=Cn(t,(e=>{const t=new hr;return t.load(e),t}))),this.onHover.load(e.onHover??e.onhover),zn(e.resize)?this.resize.enable=e.resize:this.resize.load(e.resize)}}class Ar{constructor(e,t){this._engine=e,this._container=t}load(e){if(!e)return;if(!this._container)return;const t=this._engine.plugins.interactors.get(this._container);if(t)for(const n of t)n.loadModeOptions&&n.loadModeOptions(this,e)}}class br{constructor(e,t){this.detectsOn="window",this.events=new mr,this.modes=new Ar(e,t)}get detect_on(){return this.detectsOn}set detect_on(e){this.detectsOn=e}load(e){if(!e)return;const t=e.detectsOn??e.detect_on;void 0!==t&&(this.detectsOn=t),this.events.load(e.events),this.modes.load(e.modes)}}class yr{load(e){e&&(e.position&&(this.position={x:e.position.x??50,y:e.position.y??50,mode:e.position.mode??"percent"}),e.options&&(this.options=mn({},e.options)))}}class vr{constructor(){this.maxWidth=1/0,this.options={},this.mode="canvas"}load(e){e&&(void 0!==e.maxWidth&&(this.maxWidth=e.maxWidth),void 0!==e.mode&&("screen"===e.mode?this.mode="screen":this.mode="canvas"),void 0!==e.options&&(this.options=mn({},e.options)))}}class wr{constructor(){this.auto=!1,this.mode="any",this.value=!1}load(e){e&&(void 0!==e.auto&&(this.auto=e.auto),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.value&&(this.value=e.value))}}class Er{constructor(){this.name="",this.default=new wr}load(e){e&&(void 0!==e.name&&(this.name=e.name),this.default.load(e.default),void 0!==e.options&&(this.options=mn({},e.options)))}}class Cr{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.delay=0,this.decay=0,this.sync=!0}load(e){e&&(void 0!==e.count&&(this.count=Kt(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(this.offset=Kt(e.offset)),void 0!==e.speed&&(this.speed=Kt(e.speed)),void 0!==e.decay&&(this.decay=Kt(e.decay)),void 0!==e.delay&&(this.delay=Kt(e.delay)),void 0!==e.sync&&(this.sync=e.sync))}}class xr{constructor(){this.h=new Cr,this.s=new Cr,this.l=new Cr}load(e){e&&(this.h.load(e.h),this.s.load(e.s),this.l.load(e.l))}}class kr extends ar{constructor(){super(),this.animation=new xr}static create(e,t){const n=new kr;return n.load(e),void 0!==t&&(Pn(t)||Tn(t)?n.load({value:t}):n.load(t)),n}load(e){if(super.load(e),!e)return;const t=e.animation;void 0!==t&&(void 0!==t.enable?this.animation.h.load(t):this.animation.load(e.animation))}}class Br{constructor(){this.speed=2}load(e){e&&void 0!==e.speed&&(this.speed=e.speed)}}class Sr{constructor(){this.enable=!0,this.retries=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.retries&&(this.retries=e.retries))}}class _r{constructor(){this.enable=!1,this.minimumValue=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.minimumValue&&(this.minimumValue=e.minimumValue))}}class zr{constructor(){this.random=new _r,this.value=0}load(e){e&&(zn(e.random)?this.random.enable=e.random:this.random.load(e.random),void 0!==e.value&&(this.value=Kt(e.value,this.random.enable?this.random.minimumValue:void 0)))}}class Pr extends zr{constructor(){super(),this.random.minimumValue=.1,this.value=1}}class Or{constructor(){this.horizontal=new Pr,this.vertical=new Pr}load(e){e&&(this.horizontal.load(e.horizontal),this.vertical.load(e.vertical))}}class Dr{constructor(){this.absorb=new Br,this.bounce=new Or,this.enable=!1,this.maxSpeed=50,this.mode="bounce",this.overlap=new Sr}load(e){e&&(this.absorb.load(e.absorb),this.bounce.load(e.bounce),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.maxSpeed&&(this.maxSpeed=Kt(e.maxSpeed)),void 0!==e.mode&&(this.mode=e.mode),this.overlap.load(e.overlap))}}class Mr{constructor(){this.offset=0,this.value=90}load(e){e&&(void 0!==e.offset&&(this.offset=Kt(e.offset)),void 0!==e.value&&(this.value=Kt(e.value)))}}class Tr{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(e){this.rotate.x=e}get rotateY(){return this.rotate.y}set rotateY(e){this.rotate.y=e}load(e){if(!e)return;void 0!==e.distance&&(this.distance=Kt(e.distance)),void 0!==e.enable&&(this.enable=e.enable);const t=e.rotate?.x??e.rotateX;void 0!==t&&(this.rotate.x=t);const n=e.rotate?.y??e.rotateY;void 0!==n&&(this.rotate.y=n)}}class Rr{constructor(){this.x=50,this.y=50,this.mode="percent",this.radius=0}load(e){e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.radius&&(this.radius=e.radius))}}class Ir{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=Kt(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.inverse&&(this.inverse=e.inverse),void 0!==e.maxSpeed&&(this.maxSpeed=Kt(e.maxSpeed)))}}class Nr{constructor(){this.clamp=!0,this.delay=new zr,this.enable=!1,this.options={}}load(e){e&&(void 0!==e.clamp&&(this.clamp=e.clamp),this.delay.load(e.delay),void 0!==e.enable&&(this.enable=e.enable),this.generator=e.generator,e.options&&(this.options=mn(this.options,e.options)))}}class Lr{load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.image&&(this.image=e.image))}}class Fr{constructor(){this.enable=!1,this.length=10,this.fill=new Lr}get fillColor(){return this.fill.color}set fillColor(e){this.fill.load({color:e})}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0===e.fill&&void 0===e.fillColor||this.fill.load(e.fill||{color:e.fillColor}),void 0!==e.length&&(this.length=e.length))}}class jr{constructor(){this.default="out"}load(e){e&&(void 0!==e.default&&(this.default=e.default),this.bottom=e.bottom??e.default,this.left=e.left??e.default,this.right=e.right??e.default,this.top=e.top??e.default)}}class Ur{constructor(){this.acceleration=0,this.enable=!1}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=Kt(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),e.position&&(this.position=mn({},e.position)))}}class qr{constructor(){this.angle=new Mr,this.attract=new Tr,this.center=new Rr,this.decay=0,this.distance={},this.direction="none",this.drift=0,this.enable=!1,this.gravity=new Ir,this.path=new Nr,this.outModes=new jr,this.random=!1,this.size=!1,this.speed=2,this.spin=new Ur,this.straight=!1,this.trail=new Fr,this.vibrate=!1,this.warp=!1}get bounce(){return this.collisions}set bounce(e){this.collisions=e}get collisions(){return!1}set collisions(e){}get noise(){return this.path}set noise(e){this.path=e}get outMode(){return this.outModes.default}set outMode(e){this.outModes.default=e}get out_mode(){return this.outMode}set out_mode(e){this.outMode=e}load(e){if(!e)return;this.angle.load(On(e.angle)?{value:e.angle}:e.angle),this.attract.load(e.attract),this.center.load(e.center),void 0!==e.decay&&(this.decay=Kt(e.decay)),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.distance&&(this.distance=On(e.distance)?{horizontal:e.distance,vertical:e.distance}:{...e.distance}),void 0!==e.drift&&(this.drift=Kt(e.drift)),void 0!==e.enable&&(this.enable=e.enable),this.gravity.load(e.gravity);const t=e.outModes??e.outMode??e.out_mode;void 0!==t&&(Mn(t)?this.outModes.load(t):this.outModes.load({default:t})),this.path.load(e.path??e.noise),void 0!==e.random&&(this.random=e.random),void 0!==e.size&&(this.size=e.size),void 0!==e.speed&&(this.speed=Kt(e.speed)),this.spin.load(e.spin),void 0!==e.straight&&(this.straight=e.straight),this.trail.load(e.trail),void 0!==e.vibrate&&(this.vibrate=e.vibrate),void 0!==e.warp&&(this.warp=e.warp)}}class Wr{constructor(){this.count=0,this.enable=!1,this.speed=1,this.decay=0,this.delay=0,this.sync=!1}load(e){e&&(void 0!==e.count&&(this.count=Kt(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=Kt(e.speed)),void 0!==e.decay&&(this.decay=Kt(e.decay)),void 0!==e.delay&&(this.delay=Kt(e.delay)),void 0!==e.sync&&(this.sync=e.sync))}}class $r extends Wr{constructor(){super(),this.mode="auto",this.startValue="random"}load(e){super.load(e),e&&(void 0!==e.minimumValue&&(this.minimumValue=e.minimumValue),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.startValue&&(this.startValue=e.startValue))}}class Hr extends $r{constructor(){super(),this.destroy="none",this.speed=2}get opacity_min(){return this.minimumValue}set opacity_min(e){this.minimumValue=e}load(e){void 0!==e?.opacity_min&&void 0===e.minimumValue&&(e.minimumValue=e.opacity_min),super.load(e),e&&void 0!==e.destroy&&(this.destroy=e.destroy)}}class Vr extends zr{constructor(){super(),this.animation=new Hr,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(e){this.animation=e}load(e){if(!e)return;super.load(e);const t=e.animation??e.anim;void 0!==t&&(this.animation.load(t),this.value=Kt(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class Yr{constructor(){this.enable=!1,this.width=1920,this.height=1080}get area(){return this.width}set area(e){this.width=e}get factor(){return this.height}set factor(e){this.height=e}get value_area(){return this.area}set value_area(e){this.area=e}load(e){if(!e)return;void 0!==e.enable&&(this.enable=e.enable);const t=e.width??e.area??e.value_area;void 0!==t&&(this.width=t);const n=e.height??e.factor;void 0!==n&&(this.height=n)}}class Gr{constructor(){this.density=new Yr,this.limit=0,this.value=0}get max(){return this.limit}set max(e){this.limit=e}load(e){if(!e)return;this.density.load(e.density);const t=e.limit??e.max;void 0!==t&&(this.limit=t),void 0!==e.value&&(this.value=e.value)}}class Qr{constructor(){this.blur=0,this.color=new ar,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000"}load(e){e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=ar.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(void 0!==e.offset.x&&(this.offset.x=e.offset.x),void 0!==e.offset.y&&(this.offset.y=e.offset.y)))}}const Xr="character",Kr="char",Jr="image",Zr="images",ei="polygon",ti="star";class ni{constructor(){this.loadShape=(e,t,n,r)=>{if(!e)return;const i=Tn(e),o=i?[]:{},a=i!==Tn(this.options[t]),s=i!==Tn(this.options[n]);a&&(this.options[t]=o),s&&r&&(this.options[n]=o),this.options[t]=mn(this.options[t]??o,e),this.options[n]&&!r||(this.options[n]=mn(this.options[n]??o,e))},this.close=!0,this.fill=!0,this.options={},this.type="circle"}get character(){return this.options[Xr]??this.options[Kr]}set character(e){this.options[Kr]=this.options[Xr]=e}get custom(){return this.options}set custom(e){this.options=e}get image(){return this.options[Jr]??this.options[Zr]}set image(e){this.options[Zr]=this.options[Jr]=e}get images(){return this.image}set images(e){this.image=e}get polygon(){return this.options[ei]??this.options[ti]}set polygon(e){this.options[ti]=this.options[ei]=e}get stroke(){return[]}set stroke(e){}load(e){if(!e)return;const t=e.options??e.custom;if(void 0!==t)for(const e in t){const n=t[e];n&&(this.options[e]=mn(this.options[e]??{},n))}this.loadShape(e.character,Xr,Kr,!0),this.loadShape(e.polygon,ei,ti,!1),this.loadShape(e.image??e.images,Jr,Zr,!0),void 0!==e.close&&(this.close=e.close),void 0!==e.fill&&(this.fill=e.fill),void 0!==e.type&&(this.type=e.type)}}class ri extends $r{constructor(){super(),this.destroy="none",this.speed=5}get size_min(){return this.minimumValue}set size_min(e){this.minimumValue=e}load(e){void 0!==e?.size_min&&void 0===e.minimumValue&&(e.minimumValue=e.size_min),super.load(e),e&&void 0!==e.destroy&&(this.destroy=e.destroy)}}class ii extends zr{constructor(){super(),this.animation=new ri,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(e){this.animation=e}load(e){if(super.load(e),!e)return;const t=e.animation??e.anim;void 0!==t&&(this.animation.load(t),this.value=Kt(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class oi{constructor(){this.width=0}load(e){e&&(void 0!==e.color&&(this.color=kr.create(this.color,e.color)),void 0!==e.width&&(this.width=Kt(e.width)),void 0!==e.opacity&&(this.opacity=Kt(e.opacity)))}}class ai extends zr{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(e){super.load(e),e&&(void 0!==e.opacityRate&&(this.opacityRate=e.opacityRate),void 0!==e.sizeRate&&(this.sizeRate=e.sizeRate),void 0!==e.velocityRate&&(this.velocityRate=e.velocityRate))}}class si{constructor(e,t){this._engine=e,this._container=t,this.bounce=new Or,this.collisions=new Dr,this.color=new kr,this.color.value="#fff",this.groups={},this.move=new qr,this.number=new Gr,this.opacity=new Vr,this.reduceDuplicates=!1,this.shadow=new Qr,this.shape=new ni,this.size=new ii,this.stroke=new oi,this.zIndex=new ai}load(e){if(!e)return;if(this.bounce.load(e.bounce),this.color.load(kr.create(this.color,e.color)),void 0!==e.groups)for(const t in e.groups){const n=e.groups[t];void 0!==n&&(this.groups[t]=mn(this.groups[t]??{},n))}this.move.load(e.move),this.number.load(e.number),this.opacity.load(e.opacity),void 0!==e.reduceDuplicates&&(this.reduceDuplicates=e.reduceDuplicates),this.shape.load(e.shape),this.size.load(e.size),this.shadow.load(e.shadow),this.zIndex.load(e.zIndex);const t=e.move?.collisions??e.move?.bounce;void 0!==t&&(this.collisions.enable=t),this.collisions.load(e.collisions),void 0!==e.interactivity&&(this.interactivity=mn({},e.interactivity));const n=e.stroke??e.shape?.stroke;if(n&&(this.stroke=Cn(n,(e=>{const t=new oi;return t.load(e),t}))),this._container){const t=this._engine.plugins.updaters.get(this._container);if(t)for(const n of t)n.loadOptions&&n.loadOptions(this,e);const n=this._engine.plugins.interactors.get(this._container);if(n)for(const t of n)t.loadParticlesOptions&&t.loadParticlesOptions(this,e)}}}function li(e,...t){for(const n of t)e.load(n)}function ci(e,t,...n){const r=new si(e,t);return li(r,...n),r}class ui{constructor(e,t){this._findDefaultTheme=e=>this.themes.find((t=>t.default.value&&t.default.mode===e))??this.themes.find((e=>e.default.value&&"any"===e.default.mode)),this._importPreset=e=>{this.load(this._engine.plugins.getPreset(e))},this._engine=e,this._container=t,this.autoPlay=!0,this.background=new sr,this.backgroundMask=new cr,this.defaultThemes={},this.delay=0,this.fullScreen=new ur,this.detectRetina=!0,this.duration=0,this.fpsLimit=120,this.interactivity=new br(e,t),this.manualParticles=[],this.particles=ci(this._engine,this._container),this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.smooth=!1,this.style={},this.themes=[],this.zLayers=100}get backgroundMode(){return this.fullScreen}set backgroundMode(e){this.fullScreen.load(e)}get fps_limit(){return this.fpsLimit}set fps_limit(e){this.fpsLimit=e}get retina_detect(){return this.detectRetina}set retina_detect(e){this.detectRetina=e}load(e){if(!e)return;void 0!==e.preset&&Cn(e.preset,(e=>this._importPreset(e))),void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay),void 0!==e.delay&&(this.delay=Kt(e.delay));const t=e.detectRetina??e.retina_detect;void 0!==t&&(this.detectRetina=t),void 0!==e.duration&&(this.duration=Kt(e.duration));const n=e.fpsLimit??e.fps_limit;void 0!==n&&(this.fpsLimit=n),void 0!==e.pauseOnBlur&&(this.pauseOnBlur=e.pauseOnBlur),void 0!==e.pauseOnOutsideViewport&&(this.pauseOnOutsideViewport=e.pauseOnOutsideViewport),void 0!==e.zLayers&&(this.zLayers=e.zLayers),this.background.load(e.background);const r=e.fullScreen??e.backgroundMode;zn(r)?this.fullScreen.enable=r:this.fullScreen.load(r),this.backgroundMask.load(e.backgroundMask),this.interactivity.load(e.interactivity),e.manualParticles&&(this.manualParticles=e.manualParticles.map((e=>{const t=new yr;return t.load(e),t}))),this.particles.load(e.particles),this.style=mn(this.style,e.style),this._engine.plugins.loadOptions(this,e),void 0!==e.smooth&&(this.smooth=e.smooth);const i=this._engine.plugins.interactors.get(this._container);if(i)for(const t of i)t.loadOptions&&t.loadOptions(this,e);if(void 0!==e.responsive)for(const t of e.responsive){const e=new vr;e.load(t),this.responsive.push(e)}if(this.responsive.sort(((e,t)=>e.maxWidth-t.maxWidth)),void 0!==e.themes)for(const t of e.themes){const e=this.themes.find((e=>e.name===t.name));if(e)e.load(t);else{const e=new Er;e.load(t),this.themes.push(e)}}this.defaultThemes.dark=this._findDefaultTheme("dark")?.name,this.defaultThemes.light=this._findDefaultTheme("light")?.name}setResponsive(e,t,n){this.load(n);const r=this.responsive.find((n=>"screen"===n.mode&&screen?n.maxWidth>screen.availWidth:n.maxWidth*t>e));return this.load(r?.options),r?.maxWidth}setTheme(e){if(e){const t=this.themes.find((t=>t.name===e));t&&this.load(t.options)}else{const e=un("(prefers-color-scheme: dark)"),t=e&&e.matches,n=this._findDefaultTheme(t?"dark":"light");n&&this.load(n.options)}}}class di{constructor(e,t){this.container=t,this._engine=e,this._interactors=e.plugins.getInteractors(this.container,!0),this._externalInteractors=[],this._particleInteractors=[]}async externalInteract(e){for(const t of this._externalInteractors)t.isEnabled()&&await t.interact(e)}handleClickMode(e){for(const t of this._externalInteractors)t.handleClickMode&&t.handleClickMode(e)}init(){this._externalInteractors=[],this._particleInteractors=[];for(const e of this._interactors){switch(e.type){case"external":this._externalInteractors.push(e);break;case"particles":this._particleInteractors.push(e)}e.init()}}async particlesInteract(e,t){for(const n of this._externalInteractors)n.clear(e,t);for(const n of this._particleInteractors)n.isEnabled(e)&&await n.interact(e,t)}async reset(e){for(const t of this._externalInteractors)t.isEnabled()&&t.reset(e);for(const t of this._particleInteractors)t.isEnabled(e)&&t.reset(e)}}const hi=e=>{if(!dn(e.outMode,e.checkModes))return;const t=2*e.radius;e.coord>e.maxCoord-t?e.setCb(-e.radius):e.coord<t&&e.setCb(e.radius)};class pi{constructor(e,t,n,r,i,o){this.container=n,this._calcPosition=(e,t,n,r=0)=>{for(const[,r]of e.plugins){const e=void 0!==r.particlePosition?r.particlePosition(t,this):void 0;if(e)return Lt.create(e.x,e.y,n)}const i=(u={size:e.canvas.size,position:t},{x:u.position?.x??$t()*u.size.width,y:u.position?.y??$t()*u.size.height}),o=Lt.create(i.x,i.y,n),a=this.getRadius(),s=this.options.move.outModes,l=t=>{hi({outMode:t,checkModes:["bounce","bounce-horizontal"],coord:o.x,maxCoord:e.canvas.size.width,setCb:e=>o.x+=e,radius:a})},c=t=>{hi({outMode:t,checkModes:["bounce","bounce-vertical"],coord:o.y,maxCoord:e.canvas.size.height,setCb:e=>o.y+=e,radius:a})};var u;return l(s.left??s.default),l(s.right??s.default),c(s.top??s.default),c(s.bottom??s.default),this._checkOverlap(o,r)?this._calcPosition(e,void 0,n,r+1):o},this._calculateVelocity=()=>{const e=function(e){const t=Ft.origin;return t.length=1,t.angle=e,t}(this.direction).copy(),t=this.options.move;if("inside"===t.direction||"outside"===t.direction)return e;const n=Math.PI/180*Gt(t.angle.value),r=Math.PI/180*Gt(t.angle.offset),i={left:r-n/2,right:r+n/2};return t.straight||(e.angle+=Yt(Kt(i.left,i.right))),t.random&&"number"==typeof t.speed&&(e.length*=$t()),e},this._checkOverlap=(e,t=0)=>{const n=this.options.collisions,r=this.getRadius();if(!n.enable)return!1;const i=n.overlap;if(i.enable)return!1;const o=i.retries;if(o>=0&&t>o)throw new Error(`${Nt} particle is overlapping and can't be placed`);return!!this.container.particles.find((t=>en(e,t.position)<r+t.getRadius()))},this._getRollColor=e=>{if(!e||!this.roll||!this.backColor&&!this.roll.alter)return e;const t=this.roll.horizontal&&this.roll.vertical?2:1,n=this.roll.horizontal?Math.PI/2:0;return Math.floor(((this.roll.angle??0)+n)/(Math.PI/t))%2?this.backColor?this.backColor:this.roll.alter?function(e,t,n){return{h:e.h,s:e.s,l:e.l+("darken"===t?-1:1)*n}}(e,this.roll.alter.type,this.roll.alter.value):e:e},this._initPosition=e=>{const t=this.container,n=Gt(this.options.zIndex.value);this.position=this._calcPosition(t,e,Ht(n,0,t.zLayers)),this.initialPosition=this.position.copy();const r=t.canvas.size;switch(this.moveCenter={..._n(this.options.move.center,r),radius:this.options.move.center.radius??0,mode:this.options.move.center.mode??"percent"},this.direction=function(e,t,n){if(On(e))return e*Math.PI/180;switch(e){case"top":return-Math.PI/2;case"top-right":return-Math.PI/4;case"right":return 0;case"bottom-right":return Math.PI/4;case"bottom":return Math.PI/2;case"bottom-left":return 3*Math.PI/4;case"left":return Math.PI;case"top-left":return-3*Math.PI/4;case"inside":return Math.atan2(n.y-t.y,n.x-t.x);case"outside":return Math.atan2(t.y-n.y,t.x-n.x);default:return $t()*Math.PI*2}}(this.options.move.direction,this.position,this.moveCenter),this.options.move.direction){case"inside":this.outType="inside";break;case"outside":this.outType="outside"}this.offset=Ft.origin},this._loadShapeData=(e,t)=>{const n=e.options[this.shape];if(n)return mn({close:e.close,fill:e.fill},xn(n,this.id,t))},this._engine=e,this.init(t,r,i,o)}destroy(e){if(this.unbreakable||this.destroyed)return;this.destroyed=!0,this.bubble.inRange=!1,this.slow.inRange=!1;const t=this.container,n=this.pathGenerator;for(const[,n]of t.plugins)n.particleDestroyed&&n.particleDestroyed(this,e);for(const n of t.particles.updaters)n.particleDestroyed&&n.particleDestroyed(this,e);n&&n.reset(this)}draw(e){const t=this.container;for(const[,n]of t.plugins)t.canvas.drawParticlePlugin(n,this,e);t.canvas.drawParticle(this,e)}getFillColor(){return this._getRollColor(this.bubble.color??Kn(this.color))}getMass(){return this.getRadius()**2*Math.PI/2}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){return this.bubble.radius??this.size.value}getStrokeColor(){return this._getRollColor(this.bubble.color??Kn(this.strokeColor))}init(e,t,n,r){const i=this.container,o=this._engine;this.id=e,this.group=r,this.fill=!0,this.pathRotation=!1,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.rotation=0,this.misplaced=!1,this.retina={maxDistance:{}},this.outType="normal",this.ignoresResizeRatio=!0;const a=i.retina.pixelRatio,s=i.actualOptions,l=ci(this._engine,i,s.particles),c=l.shape.type,{reduceDuplicates:u}=l;this.shape=xn(c,this.id,u);const d=l.shape;if(n&&n.shape&&n.shape.type){const e=xn(n.shape.type,this.id,u);e&&(this.shape=e,d.load(n.shape))}this.shapeData=this._loadShapeData(d,u),l.load(n);const h=this.shapeData;h&&l.load(h.particles);const p=new br(o,i);p.load(i.actualOptions.interactivity),p.load(l.interactivity),this.interactivity=p,this.fill=h?.fill??l.shape.fill,this.close=h?.close??l.shape.close,this.options=l;const f=this.options.move.path;this.pathDelay=1e3*Jt(f.delay),f.generator&&(this.pathGenerator=this._engine.plugins.getPathGenerator(f.generator),this.pathGenerator&&i.addPath(f.generator,this.pathGenerator)&&this.pathGenerator.init(i)),i.retina.initParticle(this),this.size=Bn(this.options.size,a),this.bubble={inRange:!1},this.slow={inRange:!1,factor:1},this._initPosition(t),this.initialVelocity=this._calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-Gt(this.options.move.decay);const g=i.particles;g.needsSort=g.needsSort||g.lastZIndex<this.position.z,g.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/i.zLayers,this.sides=24;let m=i.drawers.get(this.shape);m||(m=this._engine.plugins.getShapeDrawer(this.shape),m&&i.drawers.set(this.shape,m)),m&&m.loadShape&&m.loadShape(this);const A=m?.getSidesCount;A&&(this.sides=A(this)),this.spawning=!1,this.shadowColor=jn(this.options.shadow.color);for(const e of i.particles.updaters)e.init(this);for(const e of i.particles.movers)e.init&&e.init(this);m&&m.particleInit&&m.particleInit(i,this);for(const[,e]of i.plugins)e.particleCreated&&e.particleCreated(this)}isInsideCanvas(){const e=this.getRadius(),t=this.container.canvas.size,n=this.position;return n.x>=-e&&n.y>=-e&&n.y<=t.height+e&&n.x<=t.width+e}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}reset(){for(const e of this.container.particles.updaters)e.reset&&e.reset(this)}}class fi{constructor(e,t){this.position=e,this.particle=t}}class gi{constructor(e,t){this.position={x:e,y:t}}}class mi extends gi{constructor(e,t,n,r){super(e,t),this.size={height:r,width:n}}contains(e){const t=this.size.width,n=this.size.height,r=this.position;return e.x>=r.x&&e.x<=r.x+t&&e.y>=r.y&&e.y<=r.y+n}intersects(e){e instanceof Ai&&e.intersects(this);const t=this.size.width,n=this.size.height,r=this.position,i=e.position,o=e instanceof mi?e.size:{width:0,height:0},a=o.width,s=o.height;return i.x<r.x+t&&i.x+a>r.x&&i.y<r.y+n&&i.y+s>r.y}}class Ai extends gi{constructor(e,t,n){super(e,t),this.radius=n}contains(e){return en(e,this.position)<=this.radius}intersects(e){const t=this.position,n=e.position,r=Math.abs(n.x-t.x),i=Math.abs(n.y-t.y),o=this.radius;if(e instanceof Ai)return o+e.radius>Math.sqrt(r**2+i**2);if(e instanceof mi){const{width:t,height:n}=e.size;return Math.pow(r-t,2)+Math.pow(i-n,2)<=o**2||r<=o+t&&i<=o+n||r<=t||i<=n}return!1}}class bi{constructor(e,t){this.rectangle=e,this.capacity=t,this._subdivide=()=>{const{x:e,y:t}=this.rectangle.position,{width:n,height:r}=this.rectangle.size,{capacity:i}=this;for(let o=0;o<4;o++)this._subs.push(new bi(new mi(e+n/2*(o%2),t+r/2*(Math.round(o/2)-o%2),n/2,r/2),i));this._divided=!0},this._points=[],this._divided=!1,this._subs=[]}insert(e){return!!this.rectangle.contains(e.position)&&(this._points.length<this.capacity?(this._points.push(e),!0):(this._divided||this._subdivide(),this._subs.some((t=>t.insert(e)))))}query(e,t,n){const r=n||[];if(!e.intersects(this.rectangle))return[];for(const n of this._points)!e.contains(n.position)&&en(e.position,n.position)>n.particle.getRadius()&&(!t||t(n.particle))||r.push(n.particle);if(this._divided)for(const n of this._subs)n.query(e,t,r);return r}queryCircle(e,t,n){return this.query(new Ai(e.x,e.y,t),n)}queryRectangle(e,t,n){return this.query(new mi(e.x,e.y,t.width,t.height),n)}}const yi=e=>new mi(-e.width/4,-e.height/4,3*e.width/2,3*e.height/2);class vi{constructor(e,t){this._applyDensity=(e,t,n)=>{if(!e.number.density?.enable)return;const r=e.number,i=this._initDensityFactor(r.density),o=r.value,a=r.limit>0?r.limit:o,s=Math.min(o,a)*i+t,l=Math.min(this.count,this.filter((e=>e.group===n)).length);this.limit=r.limit*i,l<s?this.push(Math.abs(s-l),void 0,e,n):l>s&&this.removeQuantity(l-s,n)},this._initDensityFactor=e=>{const t=this._container;if(!t.canvas.element||!e.enable)return 1;const n=t.canvas.element,r=t.retina.pixelRatio;return n.width*n.height/(e.factor*r**2*e.area)},this._pushParticle=(e,t,n,r)=>{try{let i=this.pool.pop();i?i.init(this._nextId,e,t,n):i=new pi(this._engine,this._nextId,this._container,e,t,n);let o=!0;if(r&&(o=r(i)),!o)return;return this._array.push(i),this._zArray.push(i),this._nextId++,this._engine.dispatchEvent("particleAdded",{container:this._container,data:{particle:i}}),i}catch(e){return void sn().warning(`${Nt} adding particle: ${e}`)}},this._removeParticle=(e,t,n)=>{const r=this._array[e];if(!r||r.group!==t)return!1;r.destroy(n);const i=this._zArray.indexOf(r);return this._array.splice(e,1),this._zArray.splice(i,1),this.pool.push(r),this._engine.dispatchEvent("particleRemoved",{container:this._container,data:{particle:r}}),!0},this._engine=e,this._container=t,this._nextId=0,this._array=[],this._zArray=[],this.pool=[],this.limit=0,this.needsSort=!1,this.lastZIndex=0,this._interactionManager=new di(e,t);const n=t.canvas.size;this.quadTree=new bi(yi(n),4),this.movers=this._engine.plugins.getMovers(t,!0),this.updaters=this._engine.plugins.getUpdaters(t,!0)}get count(){return this._array.length}addManualParticles(){const e=this._container,t=e.actualOptions;for(const n of t.manualParticles)this.addParticle(n.position?_n(n.position,e.canvas.size):void 0,n.options)}addParticle(e,t,n,r){const i=this._container.actualOptions.particles.number.limit;if(i>0){const e=this.count+1-i;e>0&&this.removeQuantity(e)}return this._pushParticle(e,t,n,r)}clear(){this._array=[],this._zArray=[]}destroy(){this._array=[],this._zArray=[],this.movers=[],this.updaters=[]}async draw(e){const t=this._container;t.canvas.clear(),await this.update(e);for(const[,n]of t.plugins)t.canvas.drawPlugin(n,e);for(const t of this._zArray)t.draw(e)}filter(e){return this._array.filter(e)}find(e){return this._array.find(e)}handleClickMode(e){this._interactionManager.handleClickMode(e)}init(){const e=this._container,t=e.actualOptions;this.lastZIndex=0,this.needsSort=!1;let n=!1;this.updaters=this._engine.plugins.getUpdaters(e,!0),this._interactionManager.init();for(const[,t]of e.plugins)if(void 0!==t.particlesInitialization&&(n=t.particlesInitialization()),n)break;this._interactionManager.init();for(const[,t]of e.pathGenerators)t.init(e);if(this.addManualParticles(),!n){for(const e in t.particles.groups){const n=t.particles.groups[e];for(let r=this.count,i=0;i<n.number?.value&&r<t.particles.number.value;r++,i++)this.addParticle(void 0,n,e)}for(let e=this.count;e<t.particles.number.value;e++)this.addParticle()}}push(e,t,n,r){this.pushing=!0;for(let i=0;i<e;i++)this.addParticle(t?.position,n,r);this.pushing=!1}async redraw(){this.clear(),this.init(),await this.draw({value:0,factor:0})}remove(e,t,n){this.removeAt(this._array.indexOf(e),void 0,t,n)}removeAt(e,t=1,n,r){if(e<0||e>this.count)return;let i=0;for(let o=e;i<t&&o<this.count;o++)this._removeParticle(o--,n,r)&&i++}removeQuantity(e,t){this.removeAt(0,e,t)}setDensity(){const e=this._container.actualOptions,t=e.particles.groups;for(const e in t)this._applyDensity(t[e],0,e);this._applyDensity(e.particles,e.manualParticles.length)}async update(e){const t=this._container,n=new Set;this.quadTree=new bi(yi(t.canvas.size),4);for(const[,e]of t.pathGenerators)e.update();for(const[,n]of t.plugins)n.update&&n.update(e);for(const r of this._array){const i=t.canvas.resizeFactor;i&&!r.ignoresResizeRatio&&(r.position.x*=i.width,r.position.y*=i.height,r.initialPosition.x*=i.width,r.initialPosition.y*=i.height),r.ignoresResizeRatio=!1,await this._interactionManager.reset(r);for(const[,t]of this._container.plugins){if(r.destroyed)break;t.particleUpdate&&t.particleUpdate(r,e)}for(const t of this.movers)t.isEnabled(r)&&t.move(r,e);r.destroyed?n.add(r):this.quadTree.insert(new fi(r.getPosition(),r))}if(n.size){const e=e=>!n.has(e);this._array=this.filter(e),this._zArray=this._zArray.filter(e),this.pool.push(...n)}await this._interactionManager.externalInteract(e);for(const t of this._array){for(const n of this.updaters)n.update(t,e);t.destroyed||t.spawning||await this._interactionManager.particlesInteract(t,e)}if(delete t.canvas.resizeFactor,this.needsSort){const e=this._zArray;e.sort(((e,t)=>t.position.z-e.position.z||e.id-t.id)),this.lastZIndex=e[e.length-1].position.z,this.needsSort=!1}}}class wi{constructor(e){this.container=e,this.pixelRatio=1,this.reduceFactor=1}init(){const e=this.container,t=e.actualOptions;this.pixelRatio=!t.detectRetina||cn()?1:window.devicePixelRatio,this.reduceFactor=1;const n=this.pixelRatio;if(e.canvas.element){const t=e.canvas.element;e.canvas.size.width=t.offsetWidth*n,e.canvas.size.height=t.offsetHeight*n}const r=t.particles,i=r.move;this.attractDistance=Gt(i.attract.distance)*n,this.maxSpeed=Gt(i.gravity.maxSpeed)*n,this.sizeAnimationSpeed=Gt(r.size.animation.speed)*n}initParticle(e){const t=e.options,n=this.pixelRatio,r=t.move,i=r.distance,o=e.retina;o.attractDistance=Gt(r.attract.distance)*n,o.moveDrift=Gt(r.drift)*n,o.moveSpeed=Gt(r.speed)*n,o.sizeAnimationSpeed=Gt(t.size.animation.speed)*n;const a=o.maxDistance;a.horizontal=void 0!==i.horizontal?i.horizontal*n:void 0,a.vertical=void 0!==i.vertical?i.vertical*n:void 0,o.maxSpeed=Gt(r.gravity.maxSpeed)*n}}function Ei(e){return e&&!e.destroyed}function Ci(e,t,...n){const r=new ui(e,t);return li(r,...n),r}const xi={generate:e=>e.velocity,init:()=>{},update:()=>{},reset:()=>{}};class ki{constructor(e,t,n){this.id=t,this._intersectionManager=e=>{if(Ei(this)&&this.actualOptions.pauseOnOutsideViewport)for(const t of e)t.target===this.interactivity.element&&(t.isIntersecting?this.play:this.pause)()},this._nextFrame=async e=>{try{if(!this.smooth&&void 0!==this.lastFrameTime&&e<this.lastFrameTime+1e3/this.fpsLimit)return void this.draw(!1);this.lastFrameTime??=e;const t=function(e,t=60,n=!1){return{value:e,factor:n?60/t:60*e/1e3}}(e-this.lastFrameTime,this.fpsLimit,this.smooth);if(this.addLifeTime(t.value),this.lastFrameTime=e,t.value>1e3)return void this.draw(!1);if(await this.particles.draw(t),!this.alive())return void this.destroy();this.getAnimationStatus()&&this.draw(!1)}catch(e){sn().error(`${Nt} in animation loop`,e)}},this._engine=e,this.fpsLimit=120,this.smooth=!1,this._delay=0,this._duration=0,this._lifeTime=0,this._firstStart=!0,this.started=!1,this.destroyed=!1,this._paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=n,this._initialSourceOptions=n,this.retina=new wi(this),this.canvas=new rr(this),this.particles=new vi(this._engine,this),this.pathGenerators=new Map,this.interactivity={mouse:{clicking:!1,inside:!1}},this.plugins=new Map,this.drawers=new Map,this._options=Ci(this._engine,this),this.actualOptions=Ci(this._engine,this),this._eventListeners=new or(this),"undefined"!=typeof IntersectionObserver&&IntersectionObserver&&(this._intersectionObserver=new IntersectionObserver((e=>this._intersectionManager(e)))),this._engine.dispatchEvent("containerBuilt",{container:this})}get options(){return this._options}get sourceOptions(){return this._sourceOptions}addClickHandler(e){if(!Ei(this))return;const t=this.interactivity.element;if(!t)return;const n=(t,n,r)=>{if(!Ei(this))return;const i=this.retina.pixelRatio,o={x:n.x*i,y:n.y*i},a=this.particles.quadTree.queryCircle(o,r*i);e(t,a)};let r=!1,i=!1;t.addEventListener("click",(e=>{if(!Ei(this))return;const t=e,r={x:t.offsetX||t.clientX,y:t.offsetY||t.clientY};n(e,r,1)})),t.addEventListener("touchstart",(()=>{Ei(this)&&(r=!0,i=!1)})),t.addEventListener("touchmove",(()=>{Ei(this)&&(i=!0)})),t.addEventListener("touchend",(e=>{if(Ei(this)){if(r&&!i){const t=e;let r=t.touches[t.touches.length-1];if(!r&&(r=t.changedTouches[t.changedTouches.length-1],!r))return;const i=this.canvas.element,o=i?i.getBoundingClientRect():void 0,a={x:r.clientX-(o?o.left:0),y:r.clientY-(o?o.top:0)};n(e,a,Math.max(r.radiusX,r.radiusY))}r=!1,i=!1}})),t.addEventListener("touchcancel",(()=>{Ei(this)&&(r=!1,i=!1)}))}addLifeTime(e){this._lifeTime+=e}addPath(e,t,n=!1){return!(!Ei(this)||!n&&this.pathGenerators.has(e)||(this.pathGenerators.set(e,t??xi),0))}alive(){return!this._duration||this._lifeTime<=this._duration}destroy(){if(!Ei(this))return;this.stop(),this.particles.destroy(),this.canvas.destroy();for(const[,e]of this.drawers)e.destroy&&e.destroy(this);for(const e of this.drawers.keys())this.drawers.delete(e);this._engine.plugins.destroy(this),this.destroyed=!0;const e=this._engine.dom(),t=e.findIndex((e=>e===this));t>=0&&e.splice(t,1),this._engine.dispatchEvent("containerDestroyed",{container:this})}draw(e){if(!Ei(this))return;let t=e;this._drawAnimationFrame=requestAnimationFrame((async e=>{t&&(this.lastFrameTime=void 0,t=!1),await this._nextFrame(e)}))}async export(e,t={}){for(const[,n]of this.plugins){if(!n.export)continue;const r=await n.export(e,t);if(r.supported)return r.blob}sn().error(`${Nt} - Export plugin with type ${e} not found`)}getAnimationStatus(){return!this._paused&&!this.pageHidden&&Ei(this)}handleClickMode(e){if(Ei(this)){this.particles.handleClickMode(e);for(const[,t]of this.plugins)t.handleClickMode&&t.handleClickMode(e)}}async init(){if(!Ei(this))return;const e=this._engine.plugins.getSupportedShapes();for(const t of e){const e=this._engine.plugins.getShapeDrawer(t);e&&this.drawers.set(t,e)}this._options=Ci(this._engine,this,this._initialSourceOptions,this.sourceOptions),this.actualOptions=Ci(this._engine,this,this._options);const t=this._engine.plugins.getAvailablePlugins(this);for(const[e,n]of t)this.plugins.set(e,n);this.retina.init(),await this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this._duration=1e3*Gt(this.actualOptions.duration),this._delay=1e3*Gt(this.actualOptions.delay),this._lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:120,this.smooth=this.actualOptions.smooth;for(const[,e]of this.drawers)e.init&&await e.init(this);for(const[,e]of this.plugins)e.init&&await e.init();this._engine.dispatchEvent("containerInit",{container:this}),this.particles.init(),this.particles.setDensity();for(const[,e]of this.plugins)e.particlesSetup&&e.particlesSetup();this._engine.dispatchEvent("particlesSetup",{container:this})}async loadTheme(e){Ei(this)&&(this._currentTheme=e,await this.refresh())}pause(){if(Ei(this)&&(void 0!==this._drawAnimationFrame&&(cancelAnimationFrame(this._drawAnimationFrame),delete this._drawAnimationFrame),!this._paused)){for(const[,e]of this.plugins)e.pause&&e.pause();this.pageHidden||(this._paused=!0),this._engine.dispatchEvent("containerPaused",{container:this})}}play(e){if(!Ei(this))return;const t=this._paused||e;if(!this._firstStart||this.actualOptions.autoPlay){if(this._paused&&(this._paused=!1),t)for(const[,e]of this.plugins)e.play&&e.play();this._engine.dispatchEvent("containerPlay",{container:this}),this.draw(t||!1)}else this._firstStart=!1}async refresh(){if(Ei(this))return this.stop(),this.start()}async reset(){if(Ei(this))return this._initialSourceOptions=void 0,this._options=Ci(this._engine,this),this.actualOptions=Ci(this._engine,this,this._options),this.refresh()}setNoise(e,t,n){Ei(this)&&this.setPath(e,t,n)}setPath(e,t,n){if(!e||!Ei(this))return;const r={...xi};if(Dn(e))r.generate=e,t&&(r.init=t),n&&(r.update=n);else{const t=r;r.generate=e.generate||t.generate,r.init=e.init||t.init,r.update=e.update||t.update}this.addPath("default",r,!0)}async start(){Ei(this)&&!this.started&&(await this.init(),this.started=!0,await new Promise((e=>{this._delayTimeout=setTimeout((async()=>{this._eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this._intersectionObserver&&this._intersectionObserver.observe(this.interactivity.element);for(const[,e]of this.plugins)e.start&&await e.start();this._engine.dispatchEvent("containerStarted",{container:this}),this.play(),e()}),this._delay)})))}stop(){if(Ei(this)&&this.started){this._delayTimeout&&(clearTimeout(this._delayTimeout),delete this._delayTimeout),this._firstStart=!0,this.started=!1,this._eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.stop(),this.interactivity.element instanceof HTMLElement&&this._intersectionObserver&&this._intersectionObserver.unobserve(this.interactivity.element);for(const[,e]of this.plugins)e.stop&&e.stop();for(const e of this.plugins.keys())this.plugins.delete(e);this._sourceOptions=this._options,this._engine.dispatchEvent("containerStopped",{container:this})}}updateActualOptions(){this.actualOptions.responsive=[];const e=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this._currentTheme),this.responsiveMaxWidth!==e&&(this.responsiveMaxWidth=e,!0)}}class Bi{constructor(){this._listeners=new Map}addEventListener(e,t){this.removeEventListener(e,t);let n=this._listeners.get(e);n||(n=[],this._listeners.set(e,n)),n.push(t)}dispatchEvent(e,t){const n=this._listeners.get(e);n&&n.forEach((e=>e(t)))}hasEventListener(e){return!!this._listeners.get(e)}removeAllEventListeners(e){e?this._listeners.delete(e):this._listeners=new Map}removeEventListener(e,t){const n=this._listeners.get(e);if(!n)return;const r=n.length,i=n.indexOf(t);i<0||(1===r?this._listeners.delete(e):n.splice(i,1))}}function Si(e,t,n,r=!1){let i=t.get(e);return i&&!r||(i=[...n.values()].map((t=>t(e))),t.set(e,i)),i}class _i{constructor(e){this._engine=e,this.plugins=[],this._initializers={interactors:new Map,movers:new Map,updaters:new Map},this.interactors=new Map,this.movers=new Map,this.updaters=new Map,this.presets=new Map,this.drawers=new Map,this.pathGenerators=new Map}addInteractor(e,t){this._initializers.interactors.set(e,t)}addParticleMover(e,t){this._initializers.movers.set(e,t)}addParticleUpdater(e,t){this._initializers.updaters.set(e,t)}addPathGenerator(e,t){!this.getPathGenerator(e)&&this.pathGenerators.set(e,t)}addPlugin(e){!this.getPlugin(e.id)&&this.plugins.push(e)}addPreset(e,t,n=!1){(n||!this.getPreset(e))&&this.presets.set(e,t)}addShapeDrawer(e,t){Cn(e,(e=>{!this.getShapeDrawer(e)&&this.drawers.set(e,t)}))}destroy(e){this.updaters.delete(e),this.movers.delete(e),this.interactors.delete(e)}getAvailablePlugins(e){const t=new Map;for(const n of this.plugins)n.needsPlugin(e.actualOptions)&&t.set(n.id,n.getPlugin(e));return t}getInteractors(e,t=!1){return Si(e,this.interactors,this._initializers.interactors,t)}getMovers(e,t=!1){return Si(e,this.movers,this._initializers.movers,t)}getPathGenerator(e){return this.pathGenerators.get(e)}getPlugin(e){return this.plugins.find((t=>t.id===e))}getPreset(e){return this.presets.get(e)}getShapeDrawer(e){return this.drawers.get(e)}getSupportedShapes(){return this.drawers.keys()}getUpdaters(e,t=!1){return Si(e,this.updaters,this._initializers.updaters,t)}loadOptions(e,t){for(const n of this.plugins)n.loadOptions(e,t)}loadParticlesOptions(e,t,...n){const r=this.updaters.get(e);if(r)for(const e of r)e.loadOptions&&e.loadOptions(t,...n)}}class zi{constructor(){this._configs=new Map,this._domArray=[],this._eventDispatcher=new Bi,this._initialized=!1,this.plugins=new _i(this)}get configs(){const e={};for(const[t,n]of this._configs)e[t]=n;return e}get version(){return"2.12.0"}addConfig(e,t){Pn(e)?t&&(t.name=e,this._configs.set(e,t)):this._configs.set(e.name??"default",e)}addEventListener(e,t){this._eventDispatcher.addEventListener(e,t)}async addInteractor(e,t,n=!0){this.plugins.addInteractor(e,t),await this.refresh(n)}async addMover(e,t,n=!0){this.plugins.addParticleMover(e,t),await this.refresh(n)}async addParticleUpdater(e,t,n=!0){this.plugins.addParticleUpdater(e,t),await this.refresh(n)}async addPathGenerator(e,t,n=!0){this.plugins.addPathGenerator(e,t),await this.refresh(n)}async addPlugin(e,t=!0){this.plugins.addPlugin(e),await this.refresh(t)}async addPreset(e,t,n=!1,r=!0){this.plugins.addPreset(e,t,n),await this.refresh(r)}async addShape(e,t,n,r,i,o=!0){let a,s,l,c,u=o;zn(n)?(u=n,s=void 0):s=n,zn(r)?(u=r,l=void 0):l=r,zn(i)?(u=i,c=void 0):c=i,a=Dn(t)?{afterEffect:l,destroy:c,draw:t,init:s}:t,this.plugins.addShapeDrawer(e,a),await this.refresh(u)}dispatchEvent(e,t){this._eventDispatcher.dispatchEvent(e,t)}dom(){return this._domArray}domItem(e){const t=this.dom(),n=t[e];if(n&&!n.destroyed)return n;t.splice(e,1)}init(){this._initialized||(this._initialized=!0)}async load(e,t){return this.loadFromArray(e,t)}async loadFromArray(e,t,n){let r;return function(e){return!!((t=e).id||t.element||t.url||t.options);var t}(e)?r=e:(r={},Pn(e)?r.id=e:r.options=e,On(t)?r.index=t:r.options=t??r.options,r.index=n??r.index),this._loadParams(r)}async loadJSON(e,t,n){let r,i;return On(t)||void 0===t?r=e:(i=e,r=t),this._loadParams({id:i,url:r,index:n})}async refresh(e=!0){e&&this.dom().forEach((e=>e.refresh()))}removeEventListener(e,t){this._eventDispatcher.removeEventListener(e,t)}async set(e,t,n,r){const i={index:r};return Pn(e)?i.id=e:i.element=e,t instanceof HTMLElement?i.element=t:i.options=t,On(n)?i.index=n:i.options=n??i.options,this._loadParams(i)}async setJSON(e,t,n,r){const i={};return e instanceof HTMLElement?(i.element=e,i.url=t,i.index=n):(i.id=e,i.element=t,i.url=n,i.index=r),this._loadParams(i)}setOnClickHandler(e){const t=this.dom();if(!t.length)throw new Error(`${Nt} can only set click handlers after calling tsParticles.load()`);for(const n of t)n.addClickHandler(e)}async _loadParams(e){const t=e.id??`tsparticles${Math.floor(1e4*$t())}`,{index:n,url:r}=e,i=r?await async function(e){const t=xn(e.url,e.index);if(!t)return e.fallback;const n=await fetch(t);return n.ok?n.json():(sn().error(`${Nt} ${n.status} while retrieving config file`),e.fallback)}({fallback:e.options,url:r,index:n}):e.options;let o=e.element??document.getElementById(t);o||(o=document.createElement("div"),o.id=t,document.body.append(o));const a=xn(i,n),s=this.dom(),l=s.findIndex((e=>e.id===t));if(l>=0){const e=this.domItem(l);e&&!e.destroyed&&(e.destroy(),s.splice(l,1))}let c;if("canvas"===o.tagName.toLowerCase())c=o,c.dataset[Mt]="false";else{const e=o.getElementsByTagName("canvas");e.length?(c=e[0],c.dataset[Mt]="false"):(c=document.createElement("canvas"),c.dataset[Mt]="true",o.appendChild(c))}c.style.width||(c.style.width="100%"),c.style.height||(c.style.height="100%");const u=new ki(this,t,a);return l>=0?s.splice(l,0,u):s.push(u),u.canvas.loadCanvas(c),await u.start(),u}}class Pi{constructor(){this.key="hsl",this.stringPrefix="hsl"}handleColor(e){const t=e.value.hsl??e.value;if(void 0!==t.h&&void 0!==t.s&&void 0!==t.l)return $n(t)}handleRangeColor(e){const t=e.value.hsl??e.value;if(void 0!==t.h&&void 0!==t.l)return $n({h:Gt(t.h),l:Gt(t.l),s:Gt(t.s)})}parseString(e){if(!e.startsWith("hsl"))return;const t=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.%]+)\s*)?\)/i.exec(e);return t?function(e){const t=$n(e);return{a:e.a,b:t.b,g:t.g,r:t.r}}({a:t.length>4?on(t[5]):1,h:parseInt(t[1],10),l:parseInt(t[3],10),s:parseInt(t[2],10)}):void 0}}class Oi{constructor(){this.key="rgb",this.stringPrefix="rgb"}handleColor(e){const t=e.value.rgb??e.value;if(void 0!==t.r)return t}handleRangeColor(e){const t=e.value.rgb??e.value;if(void 0!==t.r)return{r:Gt(t.r),g:Gt(t.g),b:Gt(t.b)}}parseString(e){if(!e.startsWith(this.stringPrefix))return;const t=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.%]+)\s*)?\)/i.exec(e);return t?{a:t.length>4?on(t[5]):1,b:parseInt(t[3],10),g:parseInt(t[2],10),r:parseInt(t[1],10)}:void 0}}const Di=function(){const e=new Oi,t=new Pi;Ln(e),Ln(t);const n=new zi;return n.init(),n}();cn()||(window.tsParticles=Di);const Mi=e=>"object"==typeof e&&null!==e;function Ti(e,t,n=(()=>!1)){if(!Mi(e)||!Mi(t))return e===t;const r=Object.keys(e).filter((e=>!n(e))),i=Object.keys(t).filter((e=>!n(e)));if(r.length!==i.length)return!1;for(const i of r){console.log("key");const r=e[i],o=t[i];if(Mi(r)&&Mi(o)){if(r===t&&o===e)continue;if(!Ti(r,o,n))return!1}else if(Array.isArray(r)&&Array.isArray(o)){if(!Ri(r,o,n))return!1}else if(r!==o)return!1}return!0}function Ri(e,t,n){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++){const i=e[r],o=t[r];if(Array.isArray(i)&&Array.isArray(o)){if(!Ri(i,o,n))return!1}else if(Mi(i)&&Mi(o)){if(!Ti(i,o,n))return!1}else if(i!==o)return!1}return!0}const Ii="tsparticles";class Ni extends n.Component{constructor(e){super(e),this.state={init:!1,library:void 0}}destroy(){this.state.library&&(this.state.library.destroy(),this.setState({library:void 0}))}shouldComponentUpdate(e){return e.url!==this.props.url&&e.id!==this.props.id&&e.canvasClassName!==this.props.canvasClassName&&e.className!==this.props.className&&e.height!==this.props.height&&e.width!==this.props.width&&!Ti(e.style,this.props.style)&&e.init!==this.props.init&&e.loaded!==this.props.loaded&&!Ti(e.options??e.params,this.props.options&&this.props.params)}componentDidUpdate(){this.refresh()}forceUpdate(){this.refresh().then((()=>{super.forceUpdate()}))}componentDidMount(){(async()=>{this.props.init&&await this.props.init(Di),this.setState({init:!0},(async()=>{await this.loadParticles()}))})()}componentWillUnmount(){this.destroy()}render(){const{width:e,height:t,className:r,canvasClassName:i,id:o}=this.props;return n.createElement("div",{className:r,id:o},n.createElement("canvas",{className:i,style:{...this.props.style,width:e,height:t}}))}async refresh(){this.destroy(),await this.loadParticles()}async loadParticles(){if(!this.state.init)return;const e=this.props.id??Ni.defaultProps.id??Ii,t=await Di.load({url:this.props.url,id:e,options:this.props.options??this.props.params});this.props.container&&(this.props.container.current=t),this.setState({library:t}),this.props.loaded&&await this.props.loaded(t)}}Ni.defaultProps={width:"100%",height:"100%",options:{},style:{},url:void 0,id:Ii};const Li=Ni;class Fi{constructor(){this.radius=0,this.mass=0}load(e){e&&(void 0!==e.mass&&(this.mass=e.mass),void 0!==e.radius&&(this.radius=e.radius))}}class ji extends zr{constructor(){super(),this.density=5,this.value=50,this.limit=new Fi}load(e){e&&(super.load(e),void 0!==e.density&&(this.density=e.density),On(e.limit)?this.limit.radius=e.limit:this.limit.load(e.limit))}}class Ui{constructor(){this.color=new ar,this.color.value="#000000",this.draggable=!1,this.opacity=1,this.destroy=!0,this.orbits=!1,this.size=new ji}load(e){void 0!==e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.draggable&&(this.draggable=e.draggable),this.name=e.name,void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=Kt(e.position.x)),void 0!==e.position.y&&(this.position.y=Kt(e.position.y))),void 0!==e.size&&this.size.load(e.size),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.orbits&&(this.orbits=e.orbits))}}class qi{constructor(e,t,n,r){this.absorbers=e,this.container=t,this._calcPosition=()=>{const e=rn({size:this.container.canvas.size,position:this.options.position});return Ft.create(e.x,e.y)},this._updateParticlePosition=(e,t)=>{if(e.destroyed)return;const n=this.container,r=n.canvas.size;if(e.needsNewPosition){const t=nn({size:r});e.position.setTo(t),e.velocity.setTo(e.initialVelocity),e.absorberOrbit=void 0,e.needsNewPosition=!1}if(this.options.orbits){if(void 0===e.absorberOrbit&&(e.absorberOrbit=Ft.create(0,0),e.absorberOrbit.length=en(e.getPosition(),this.position),e.absorberOrbit.angle=$t()*Math.PI*2),e.absorberOrbit.length<=this.size&&!this.options.destroy){const t=Math.min(r.width,r.height);e.absorberOrbit.length=t*(.2*$t()-.1+1)}void 0===e.absorberOrbitDirection&&(e.absorberOrbitDirection=e.velocity.x>=0?"clockwise":"counter-clockwise");const i=e.absorberOrbit.length,o=e.absorberOrbit.angle,a=e.absorberOrbitDirection;e.velocity.setTo(Ft.origin);const s={x:"clockwise"===a?Math.cos:Math.sin,y:"clockwise"===a?Math.sin:Math.cos};e.position.x=this.position.x+i*s.x(o),e.position.y=this.position.y+i*s.y(o),e.absorberOrbit.length-=t.length,e.absorberOrbit.angle+=(e.retina.moveSpeed??0)*n.retina.pixelRatio/100*n.retina.reduceFactor}else{const n=Ft.origin;n.length=t.length,n.angle=t.angle,e.velocity.addTo(n)}},this.initialPosition=r?Ft.create(r.x,r.y):void 0,n instanceof Ui?this.options=n:(this.options=new Ui,this.options.load(n)),this.dragging=!1,this.name=this.options.name,this.opacity=this.options.opacity,this.size=Gt(this.options.size.value)*t.retina.pixelRatio,this.mass=this.size*this.options.size.density*t.retina.reduceFactor;const i=this.options.size.limit;this.limit={radius:i.radius*t.retina.pixelRatio*t.retina.reduceFactor,mass:i.mass},this.color=jn(this.options.color)??{b:0,g:0,r:0},this.position=this.initialPosition?.copy()??this._calcPosition()}attract(e){const t=this.container,n=this.options;if(n.draggable){const e=t.interactivity.mouse;e.clicking&&e.downPosition?en(this.position,e.downPosition)<=this.size&&(this.dragging=!0):this.dragging=!1,this.dragging&&e.position&&(this.position.x=e.position.x,this.position.y=e.position.y)}const r=e.getPosition(),{dx:i,dy:o,distance:a}=Zt(this.position,r),s=Ft.create(i,o);if(s.length=this.mass/Math.pow(a,2)*t.retina.reduceFactor,a<this.size+e.getRadius()){const r=.033*e.getRadius()*t.retina.pixelRatio;this.size>e.getRadius()&&a<this.size-e.getRadius()||void 0!==e.absorberOrbit&&e.absorberOrbit.length<0?n.destroy?e.destroy():(e.needsNewPosition=!0,this._updateParticlePosition(e,s)):(n.destroy&&(e.size.value-=r),this._updateParticlePosition(e,s)),(this.limit.radius<=0||this.size<this.limit.radius)&&(this.size+=r),(this.limit.mass<=0||this.mass<this.limit.mass)&&(this.mass+=r*this.options.size.density*t.retina.reduceFactor)}else this._updateParticlePosition(e,s)}draw(e){e.translate(this.position.x,this.position.y),e.beginPath(),e.arc(0,0,this.size,0,2*Math.PI,!1),e.closePath(),e.fillStyle=Vn(this.color,this.opacity),e.fill()}resize(){const e=this.initialPosition;this.position=e&&fn(e,this.container.canvas.size,Ft.origin)?e:this._calcPosition()}}class Wi{constructor(e){this.container=e,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[],e.getAbsorber=e=>void 0===e||On(e)?this.array[e||0]:this.array.find((t=>t.name===e)),e.addAbsorber=(e,t)=>this.addAbsorber(e,t)}addAbsorber(e,t){const n=new qi(this,this.container,e,t);return this.array.push(n),n}draw(e){for(const t of this.array)t.draw(e)}handleClickMode(e){const t=this.absorbers,n=this.interactivityAbsorbers;if("absorber"===e){const e=xn(n)??xn(t),r=this.container.interactivity.mouse.clickPosition;this.addAbsorber(e,r)}}async init(){this.absorbers=this.container.actualOptions.absorbers,this.interactivityAbsorbers=this.container.actualOptions.interactivity.modes.absorbers,Cn(this.absorbers,(e=>{this.addAbsorber(e)}))}particleUpdate(e){for(const t of this.array)if(t.attract(e),e.destroyed)break}removeAbsorber(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}resize(){for(const e of this.array)e.resize()}stop(){this.array=[]}}class $i{constructor(){this.id="absorbers"}getPlugin(e){return new Wi(e)}loadOptions(e,t){(this.needsPlugin(e)||this.needsPlugin(t))&&(t?.absorbers&&(e.absorbers=Cn(t.absorbers,(e=>{const t=new Ui;return t.load(e),t}))),e.interactivity.modes.absorbers=Cn(t?.interactivity?.modes?.absorbers,(e=>{const t=new Ui;return t.load(e),t})))}needsPlugin(e){if(!e)return!1;const t=e.absorbers;return Tn(t)?!!t.length:!!t||!(!e.interactivity?.events?.onClick?.mode||!dn("absorber",e.interactivity.events.onClick.mode))}}class Hi{load(e){e&&(void 0!==e.bottom&&(this.bottom=Kt(e.bottom)),void 0!==e.left&&(this.left=Kt(e.left)),void 0!==e.right&&(this.right=Kt(e.right)),void 0!==e.top&&(this.top=Kt(e.top)))}}class Vi extends zr{constructor(){super(),this.value=3}}class Yi extends zr{constructor(){super(),this.value={min:4,max:9}}}class Gi{constructor(){this.count=1,this.factor=new Vi,this.rate=new Yi,this.sizeOffset=!0}load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.count&&(this.count=e.count),this.factor.load(e.factor),this.rate.load(e.rate),this.particles=Cn(e.particles,(e=>mn({},e))),void 0!==e.sizeOffset&&(this.sizeOffset=e.sizeOffset),e.colorOffset&&(this.colorOffset=this.colorOffset??{},void 0!==e.colorOffset.h&&(this.colorOffset.h=e.colorOffset.h),void 0!==e.colorOffset.s&&(this.colorOffset.s=e.colorOffset.s),void 0!==e.colorOffset.l&&(this.colorOffset.l=e.colorOffset.l)))}}class Qi{constructor(){this.bounds=new Hi,this.mode="none",this.split=new Gi}load(e){e&&(e.mode&&(this.mode=e.mode),e.bounds&&this.bounds.load(e.bounds),this.split.load(e.split))}}function Xi(e,t,n,r){const i=n.options.destroy;if(!i)return;const o=i.split,a=ci(e,t,n.options),s=Jt(o.factor),l=n.getFillColor();o.color?a.color.load(o.color):o.colorOffset&&l?a.color.load({value:{hsl:{h:l.h+Gt(o.colorOffset.h??0),s:l.s+Gt(o.colorOffset.s??0),l:l.l+Gt(o.colorOffset.l??0)}}}):a.color.load({value:{hsl:n.getFillColor()}}),a.move.load({center:{x:n.position.x,y:n.position.y,mode:"precise"}}),On(a.size.value)?a.size.value/=s:(a.size.value.min/=s,a.size.value.max/=s),a.load(r);const c=o.sizeOffset?Kt(-n.size.value,n.size.value):0,u={x:n.position.x+Yt(c),y:n.position.y+Yt(c)};return t.particles.addParticle(u,a,n.group,(e=>!(e.size.value<.5||(e.velocity.length=Yt(Kt(n.velocity.length,e.velocity.length)),e.splitCount=(n.splitCount??0)+1,e.unbreakable=!0,setTimeout((()=>{e.unbreakable=!1}),500),0))))}class Ki{constructor(e,t){this.engine=e,this.container=t}init(e){const t=this.container,n=e.options.destroy;if(!n)return;e.splitCount=0;const r=n.bounds;e.destroyBounds||(e.destroyBounds={});const{bottom:i,left:o,right:a,top:s}=r,{destroyBounds:l}=e,c=t.canvas.size;i&&(l.bottom=Gt(i)*c.height/100),o&&(l.left=Gt(o)*c.width/100),a&&(l.right=Gt(a)*c.width/100),s&&(l.top=Gt(s)*c.height/100)}isEnabled(e){return!e.destroyed}loadOptions(e,...t){e.destroy||(e.destroy=new Qi);for(const n of t)e.destroy.load(n?.destroy)}particleDestroyed(e,t){if(t)return;const n=e.options.destroy;n&&"split"===n.mode&&function(e,t,n){const r=n.options.destroy;if(!r)return;const i=r.split;if(i.count>=0&&(void 0===n.splitCount||n.splitCount++>i.count))return;const o=Jt(i.rate),a=xn(i.particles);for(let r=0;r<o;r++)Xi(e,t,n,a)}(this.engine,this.container,e)}update(e){if(!this.isEnabled(e))return;const t=e.getPosition(),n=e.destroyBounds;n&&(void 0!==n.bottom&&t.y>=n.bottom||void 0!==n.left&&t.x<=n.left||void 0!==n.right&&t.x>=n.right||void 0!==n.top&&t.y<=n.top)&&e.destroy()}}class Ji{randomPosition(e,t,n){const[r,i]=[t.width/2,t.height/2],o=((e,t)=>{const n=$t()/4,r=Math.atan(t/e*Math.tan(2*Math.PI*n)),i=$t();return i<.25?r:i<.5?Math.PI-r:i<.75?Math.PI+r:-r})(r,i),a=((e,t,n)=>e*t/Math.sqrt((t*Math.cos(n))**2+(e*Math.sin(n))**2))(r,i,o),s=n?a*Math.sqrt($t()):a;return{x:e.x+s*Math.cos(o),y:e.y+s*Math.sin(o)}}}class Zi{constructor(){this.wait=!1}load(e){e&&(void 0!==e.count&&(this.count=e.count),void 0!==e.delay&&(this.delay=Kt(e.delay)),void 0!==e.duration&&(this.duration=Kt(e.duration)),void 0!==e.wait&&(this.wait=e.wait))}}class eo{constructor(){this.quantity=1,this.delay=.1}load(e){void 0!==e&&(void 0!==e.quantity&&(this.quantity=Kt(e.quantity)),void 0!==e.delay&&(this.delay=Kt(e.delay)))}}class to{constructor(){this.mode="percent",this.height=0,this.width=0}load(e){void 0!==e&&(void 0!==e.mode&&(this.mode=e.mode),void 0!==e.height&&(this.height=e.height),void 0!==e.width&&(this.width=e.width))}}class no{constructor(){this.autoPlay=!0,this.fill=!0,this.life=new Zi,this.rate=new eo,this.shape="square",this.startCount=0}load(e){e&&(void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay),void 0!==e.size&&(this.size||(this.size=new to),this.size.load(e.size)),void 0!==e.direction&&(this.direction=e.direction),this.domId=e.domId,void 0!==e.fill&&(this.fill=e.fill),this.life.load(e.life),this.name=e.name,this.particles=Cn(e.particles,(e=>mn({},e))),this.rate.load(e.rate),void 0!==e.shape&&(this.shape=e.shape),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=Kt(e.position.x)),void 0!==e.position.y&&(this.position.y=Kt(e.position.y))),void 0!==e.spawnColor&&(void 0===this.spawnColor&&(this.spawnColor=new kr),this.spawnColor.load(e.spawnColor)),void 0!==e.startCount&&(this.startCount=e.startCount))}}class ro{constructor(e,t,n,r,i){this.emitters=t,this.container=n,this._calcPosition=()=>rn({size:this.container.canvas.size,position:this.options.position}),this._destroy=()=>{this.emitters.removeEmitter(this),this._engine.dispatchEvent("emitterDestroyed",{container:this.container,data:{emitter:this}})},this._emit=()=>{if(this._paused)return;const e=Gt(this.options.rate.quantity);this._emitParticles(e)},this._emitParticles=e=>{const t=this.getPosition(),n=this.getSize(),r=xn(this._particlesOptions);for(let i=0;i<e;i++){const e=mn({},r);if(this.spawnColor){const t=this.options.spawnColor?.animation;t&&(this.spawnColor.h=this._setColorAnimation(t.h,this.spawnColor.h,360),this.spawnColor.s=this._setColorAnimation(t.s,this.spawnColor.s,100),this.spawnColor.l=this._setColorAnimation(t.l,this.spawnColor.l,100)),e.color?e.color.value=this.spawnColor:e.color={value:this.spawnColor}}if(!t)return;const i=this._shape?.randomPosition(t,n,this.fill)??t;this.container.particles.addParticle(i,e)}},this._prepareToDie=()=>{if(this._paused)return;const e=void 0!==this.options.life?.duration?Gt(this.options.life.duration):void 0;this.container.retina.reduceFactor&&(this._lifeCount>0||this._immortal)&&void 0!==e&&e>0&&(this._duration=1e3*e)},this._setColorAnimation=(e,t,n)=>{const r=this.container;if(!e.enable)return t;const i=Yt(e.offset),o=1e3*Gt(this.options.rate.delay)/r.retina.reduceFactor;return(t+Gt(e.speed??0)*r.fpsLimit/o+3.6*i)%n},this._engine=e,this._currentDuration=0,this._currentEmitDelay=0,this._currentSpawnDelay=0,this._initialPosition=i,r instanceof no?this.options=r:(this.options=new no,this.options.load(r)),this._spawnDelay=1e3*Gt(this.options.life.delay??0)/this.container.retina.reduceFactor,this.position=this._initialPosition??this._calcPosition(),this.name=this.options.name,this._shape=this._engine.emitterShapeManager?.getShape(this.options.shape),this.fill=this.options.fill,this._firstSpawn=!this.options.life.wait,this._startParticlesAdded=!1;let o=mn({},this.options.particles);o??={},o.move??={},o.move.direction??=this.options.direction,this.options.spawnColor&&(this.spawnColor=qn(this.options.spawnColor)),this._paused=!this.options.autoPlay,this._particlesOptions=o,this.size=this.options.size??(()=>{const e=new to;return e.load({height:0,mode:"percent",width:0}),e})(),this._lifeCount=this.options.life.count??-1,this._immortal=this._lifeCount<=0,this._engine.dispatchEvent("emitterCreated",{container:n,data:{emitter:this}}),this.play()}externalPause(){this._paused=!0,this.pause()}externalPlay(){this._paused=!1,this.play()}getPosition(){if(this.options.domId){const e=this.container,t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{x:(n.x+n.width/2)*e.retina.pixelRatio,y:(n.y+n.height/2)*e.retina.pixelRatio}}}return this.position}getSize(){const e=this.container;if(this.options.domId){const t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{width:n.width*e.retina.pixelRatio,height:n.height*e.retina.pixelRatio}}}return Sn(this.size,e.canvas.size)}pause(){this._paused||delete this._emitDelay}play(){if(!this._paused&&this.container.retina.reduceFactor&&(this._lifeCount>0||this._immortal||!this.options.life.count)&&(this._firstSpawn||this._currentSpawnDelay>=(this._spawnDelay??0))){if(void 0===this._emitDelay){const e=Gt(this.options.rate.delay);this._emitDelay=1e3*e/this.container.retina.reduceFactor}(this._lifeCount>0||this._immortal)&&this._prepareToDie()}}resize(){const e=this._initialPosition;this.position=e&&fn(e,this.container.canvas.size,Ft.origin)?e:this._calcPosition()}update(e){this._paused||(this._firstSpawn&&(this._firstSpawn=!1,this._currentSpawnDelay=this._spawnDelay??0,this._currentEmitDelay=this._emitDelay??0),this._startParticlesAdded||(this._startParticlesAdded=!0,this._emitParticles(this.options.startCount)),void 0!==this._duration&&(this._currentDuration+=e.value,this._currentDuration>=this._duration&&(this.pause(),void 0!==this._spawnDelay&&delete this._spawnDelay,this._immortal||this._lifeCount--,this._lifeCount>0||this._immortal?(this.position=this._calcPosition(),this._spawnDelay=1e3*Gt(this.options.life.delay??0)/this.container.retina.reduceFactor):this._destroy(),this._currentDuration-=this._duration,delete this._duration)),void 0!==this._spawnDelay&&(this._currentSpawnDelay+=e.value,this._currentSpawnDelay>=this._spawnDelay&&(this._engine.dispatchEvent("emitterPlay",{container:this.container}),this.play(),this._currentSpawnDelay-=this._currentSpawnDelay,delete this._spawnDelay)),void 0!==this._emitDelay&&(this._currentEmitDelay+=e.value,this._currentEmitDelay>=this._emitDelay&&(this._emit(),this._currentEmitDelay-=this._emitDelay)))}}class io{constructor(e,t){this.container=t,this._engine=e,this.array=[],this.emitters=[],this.interactivityEmitters={random:{count:1,enable:!1},value:[]},t.getEmitter=e=>void 0===e||On(e)?this.array[e||0]:this.array.find((t=>t.name===e)),t.addEmitter=(e,t)=>this.addEmitter(e,t),t.removeEmitter=e=>{const n=t.getEmitter(e);n&&this.removeEmitter(n)},t.playEmitter=e=>{const n=t.getEmitter(e);n&&n.externalPlay()},t.pauseEmitter=e=>{const n=t.getEmitter(e);n&&n.externalPause()}}addEmitter(e,t){const n=new no;n.load(e);const r=new ro(this._engine,this,this.container,n,t);return this.array.push(r),r}handleClickMode(e){const t=this.emitters,n=this.interactivityEmitters;if("emitter"!==e)return;let r;if(n&&Tn(n.value))if(n.value.length>0&&n.random.enable){r=[];const e=[];for(let t=0;t<n.random.count;t++){const i=hn(n.value);e.includes(i)&&e.length<n.value.length?t--:(e.push(i),r.push(pn(n.value,i)))}}else r=n.value;else r=n?.value;const i=r??t,o=this.container.interactivity.mouse.clickPosition;Cn(i,(e=>{this.addEmitter(e,o)}))}async init(){if(this.emitters=this.container.actualOptions.emitters,this.interactivityEmitters=this.container.actualOptions.interactivity.modes.emitters,this.emitters)if(Tn(this.emitters))for(const e of this.emitters)this.addEmitter(e);else this.addEmitter(this.emitters)}pause(){for(const e of this.array)e.pause()}play(){for(const e of this.array)e.play()}removeEmitter(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}resize(){for(const e of this.array)e.resize()}stop(){this.array=[]}update(e){for(const t of this.array)t.update(e)}}const oo=new Map;class ao{constructor(e){this._engine=e}addShape(e,t){this.getShape(e)||oo.set(e,t)}getShape(e){return oo.get(e)}getSupportedShapes(){return oo.keys()}}function so(e,t){return e+t*($t()-.5)}class lo{randomPosition(e,t,n){if(n)return{x:so(e.x,t.width),y:so(e.y,t.height)};{const n=t.width/2,r=t.height/2,i=Math.floor(4*$t()),o=2*($t()-.5);switch(i){case 0:return{x:e.x+o*n,y:e.y-r};case 1:return{x:e.x-n,y:e.y+o*r};case 2:return{x:e.x+o*n,y:e.y+r};default:return{x:e.x+n,y:e.y+o*r}}}}}class co{constructor(e){this._engine=e,this.id="emitters"}getPlugin(e){return new io(this._engine,e)}loadOptions(e,t){if(!this.needsPlugin(e)&&!this.needsPlugin(t))return;t?.emitters&&(e.emitters=Cn(t.emitters,(e=>{const t=new no;return t.load(e),t})));const n=t?.interactivity?.modes?.emitters;if(n)if(Tn(n))e.interactivity.modes.emitters={random:{count:1,enable:!0},value:n.map((e=>{const t=new no;return t.load(e),t}))};else{const t=n;if(void 0!==t.value)if(Tn(t.value))e.interactivity.modes.emitters={random:{count:t.random.count??1,enable:t.random.enable??!1},value:t.value.map((e=>{const t=new no;return t.load(e),t}))};else{const n=new no;n.load(t.value),e.interactivity.modes.emitters={random:{count:t.random.count??1,enable:t.random.enable??!1},value:n}}else(e.interactivity.modes.emitters={random:{count:1,enable:!1},value:new no}).value.load(n)}}needsPlugin(e){if(!e)return!1;const t=e.emitters;return Tn(t)&&!!t.length||void 0!==t||!!e.interactivity?.events?.onClick?.mode&&dn("emitter",e.interactivity.events.onClick.mode)}}class uo{constructor(e){this.container=e,this.type="external"}}class ho{constructor(){this.delay=1,this.pauseOnStop=!1,this.quantity=1}load(e){e&&(void 0!==e.delay&&(this.delay=e.delay),void 0!==e.quantity&&(this.quantity=e.quantity),void 0!==e.particles&&(this.particles=mn({},e.particles)),void 0!==e.pauseOnStop&&(this.pauseOnStop=e.pauseOnStop))}}class po extends uo{constructor(e){super(e),this._delay=0}clear(){}init(){}async interact(e){const t=this.container,{interactivity:n}=t;if(!t.retina.reduceFactor)return;const r=t.actualOptions.interactivity.modes.trail;if(!r)return;const i=1e3*r.delay/this.container.retina.reduceFactor;if(this._delay<i&&(this._delay+=e.value),this._delay<i)return;const o=!(r.pauseOnStop&&(n.mouse.position===this._lastPosition||n.mouse.position?.x===this._lastPosition?.x&&n.mouse.position?.y===this._lastPosition?.y)),a=t.interactivity.mouse.position;a?this._lastPosition={...a}:delete this._lastPosition,o&&t.particles.push(r.quantity,t.interactivity.mouse,r.particles),this._delay-=i}isEnabled(e){const t=this.container,n=t.actualOptions,r=t.interactivity.mouse,i=(e?.interactivity??n.interactivity).events;return r.clicking&&r.inside&&!!r.position&&dn("trail",i.onClick.mode)||r.inside&&!!r.position&&dn("trail",i.onHover.mode)}loadModeOptions(e,...t){e.trail||(e.trail=new ho);for(const n of t)e.trail.load(n?.trail)}reset(){}}class fo{constructor(){this.enable=!1,this.value=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.value&&(this.value=Kt(e.value)))}}class go{constructor(){this.darken=new fo,this.enable=!1,this.enlighten=new fo,this.mode="vertical",this.speed=25}load(e){e&&(void 0!==e.backColor&&(this.backColor=ar.create(this.backColor,e.backColor)),this.darken.load(e.darken),void 0!==e.enable&&(this.enable=e.enable),this.enlighten.load(e.enlighten),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.speed&&(this.speed=Kt(e.speed)))}}class mo{getTransformValues(e){const t=e.roll?.enable&&e.roll,n=t&&t.horizontal,r=t&&t.vertical;return{a:n?Math.cos(t.angle):void 0,d:r?Math.sin(t.angle):void 0}}init(e){!function(e){const t=e.options.roll;if(t?.enable)if(e.roll={enable:t.enable,horizontal:"horizontal"===t.mode||"both"===t.mode,vertical:"vertical"===t.mode||"both"===t.mode,angle:$t()*Math.PI*2,speed:Gt(t.speed)/360},t.backColor)e.backColor=qn(t.backColor);else if(t.darken.enable&&t.enlighten.enable){const n=$t()>=.5?"darken":"enlighten";e.roll.alter={type:n,value:Gt("darken"===n?t.darken.value:t.enlighten.value)}}else t.darken.enable?e.roll.alter={type:"darken",value:Gt(t.darken.value)}:t.enlighten.enable&&(e.roll.alter={type:"enlighten",value:Gt(t.enlighten.value)});else e.roll={enable:!1,horizontal:!1,vertical:!1,angle:0,speed:0}}(e)}isEnabled(e){const t=e.options.roll;return!e.destroyed&&!e.spawning&&!!t?.enable}loadOptions(e,...t){e.roll||(e.roll=new go);for(const n of t)e.roll.load(n?.roll)}update(e,t){this.isEnabled(e)&&function(e,t){const n=e.options.roll,r=e.roll;if(!r||!n?.enable)return;const i=r.speed*t.factor,o=2*Math.PI;r.angle+=i,r.angle>o&&(r.angle-=o)}(e,t)}}class Ao{static init(e){const t=new Ao,n=e.selector;if(!n)throw new Error("No selector provided");const r=document.querySelector(n);if(!r)throw new Error("No element found for selector");return Di.set(n.replace(".","").replace("!",""),r,{fullScreen:{enable:!1},particles:{color:{value:e.color??"!000000"},links:{color:"random",distance:e.minDistance??120,enable:e.connectParticles??!1},move:{enable:!0,speed:e.speed??.5},number:{value:e.maxParticles??100},size:{value:{min:1,max:e.sizeVariations??3}}},responsive:e.responsive?.map((t=>({maxWidth:t.breakpoint,options:{particles:{color:{value:t.options?.color},links:{distance:t.options?.minDistance,enable:t.options?.connectParticles},number:{value:e.maxParticles},move:{enable:!0,speed:t.options?.speed},size:{value:t.options?.sizeVariations}}}})))}).then((e=>{t._container=e})),t}destroy(){const e=this._container;e&&e.destroy()}pauseAnimation(){const e=this._container;e&&e.pause()}resumeAnimation(){const e=this._container;e&&e.play()}}const bo=e=>{const{particlesJS:t,pJSDom:n}=(e=>{const t=(t,n)=>e.load(t,n);return t.load=(t,n,r)=>{e.loadJSON(t,n).then((e=>{e&&r(e)})).catch((()=>{r(void 0)}))},t.setOnClickHandler=t=>{e.setOnClickHandler(t)},{particlesJS:t,pJSDom:e.dom()}})(e);return window.particlesJS=t,window.pJSDom=n,window.Particles=Ao,{particlesJS:t,pJSDom:n,Particles:Ao}};class yo{constructor(){this._initSpin=e=>{const t=e.container,n=e.options.move.spin;if(!n.enable)return;const r=n.position??{x:50,y:50},i={x:r.x/100*t.canvas.size.width,y:r.y/100*t.canvas.size.height},o=en(e.getPosition(),i),a=Gt(n.acceleration);e.retina.spinAcceleration=a*t.retina.pixelRatio,e.spin={center:i,direction:e.velocity.x>=0?"clockwise":"counter-clockwise",angle:e.velocity.angle,radius:o,acceleration:e.retina.spinAcceleration}}}init(e){const t=e.options.move.gravity;e.gravity={enable:t.enable,acceleration:Gt(t.acceleration),inverse:t.inverse},this._initSpin(e)}isEnabled(e){return!e.destroyed&&e.options.move.enable}move(e,t){const n=e.options,r=n.move;if(!r.enable)return;const i=e.container,o=i.retina.pixelRatio,a=function(e){return e.slow.inRange?e.slow.factor:1}(e),s=(e.retina.moveSpeed??=Gt(r.speed)*o)*i.retina.reduceFactor,l=e.retina.moveDrift??=Gt(e.options.move.drift)*o,c=Xt(n.size.value)*o,u=s*(r.size?e.getRadius()/c:1)*a*(t.factor||1)/2,d=e.retina.maxSpeed??i.retina.maxSpeed;r.spin.enable?function(e,t){const n=e.container;if(!e.spin)return;const r={x:"clockwise"===e.spin.direction?Math.cos:Math.sin,y:"clockwise"===e.spin.direction?Math.sin:Math.cos};e.position.x=e.spin.center.x+e.spin.radius*r.x(e.spin.angle),e.position.y=e.spin.center.y+e.spin.radius*r.y(e.spin.angle),e.spin.radius+=e.spin.acceleration;const i=Math.max(n.canvas.size.width,n.canvas.size.height);e.spin.radius>i/2?(e.spin.radius=i/2,e.spin.acceleration*=-1):e.spin.radius<0&&(e.spin.radius=0,e.spin.acceleration*=-1),e.spin.angle+=t/100*(1-e.spin.radius/i)}(e,u):function(e,t,n,r,i,o){!function(e,t){const n=e.options.move.path;if(!n.enable)return;if(e.lastPathTime<=e.pathDelay)return void(e.lastPathTime+=t.value);const r=e.pathGenerator?.generate(e,t);r&&e.velocity.addTo(r),n.clamp&&(e.velocity.x=Ht(e.velocity.x,-1,1),e.velocity.y=Ht(e.velocity.y,-1,1)),e.lastPathTime-=e.pathDelay}(e,o);const a=e.gravity,s=a?.enable&&a.inverse?-1:1;i&&n&&(e.velocity.x+=i*o.factor/(60*n)),a?.enable&&n&&(e.velocity.y+=s*(a.acceleration*o.factor)/(60*n));const l=e.moveDecay;e.velocity.multTo(l);const c=e.velocity.mult(n);a?.enable&&r>0&&(!a.inverse&&c.y>=0&&c.y>=r||a.inverse&&c.y<=0&&c.y<=-r)&&(c.y=s*r,n&&(e.velocity.y=c.y/n));const u=e.options.zIndex,d=(1-e.zIndexFactor)**u.velocityRate;c.multTo(d);const{position:h}=e;h.addTo(c),t.vibrate&&(h.x+=Math.sin(h.x*Math.cos(h.y)),h.y+=Math.cos(h.y*Math.sin(h.x)))}(e,r,u,d,l,t),function(e){const t=e.initialPosition,{dx:n,dy:r}=Zt(t,e.position),i=Math.abs(n),o=Math.abs(r),{maxDistance:a}=e.retina,s=a.horizontal,l=a.vertical;if(s||l)if((s&&i>=s||l&&o>=l)&&!e.misplaced)e.misplaced=!!s&&i>s||!!l&&o>l,s&&(e.velocity.x=e.velocity.y/2-e.velocity.x),l&&(e.velocity.y=e.velocity.x/2-e.velocity.y);else if((!s||i<s)&&(!l||o<l)&&e.misplaced)e.misplaced=!1;else if(e.misplaced){const n=e.position,r=e.velocity;s&&(n.x<t.x&&r.x<0||n.x>t.x&&r.x>0)&&(r.x*=-$t()),l&&(n.y<t.y&&r.y<0||n.y>t.y&&r.y>0)&&(r.y*=-$t())}}(e)}}class vo{draw(e,t,n){t.circleRange||(t.circleRange={min:0,max:2*Math.PI});const r=t.circleRange;e.arc(0,0,n,r.min,r.max,!1)}getSidesCount(){return 12}particleInit(e,t){const n=t.shapeData,r=n?.angle??{max:360,min:0};t.circleRange=Mn(r)?{min:r.min*Math.PI/180,max:r.max*Math.PI/180}:{min:0,max:r*Math.PI/180}}}function wo(e,t,n,r,i){if(!t||!n.enable||(t.maxLoops??0)>0&&(t.loops??0)>(t.maxLoops??0))return;if(t.time||(t.time=0),(t.delayTime??0)>0&&t.time<(t.delayTime??0)&&(t.time+=e.value),(t.delayTime??0)>0&&t.time<(t.delayTime??0))return;const o=Yt(n.offset),a=(t.velocity??0)*e.factor+3.6*o,s=t.decay??1;i&&"increasing"!==t.status?(t.value-=a,t.value<0&&(t.loops||(t.loops=0),t.loops++,t.status="increasing",t.value+=t.value)):(t.value+=a,t.value>r&&(t.loops||(t.loops=0),t.loops++,i&&(t.status="decreasing",t.value-=t.value%r))),t.velocity&&1!==s&&(t.velocity*=s),t.value>r&&(t.value%=r)}class Eo{constructor(e){this.container=e}init(e){const t=qn(e.options.color,e.id,e.options.reduceDuplicates);t&&(e.color=Jn(t,e.options.color.animation,this.container.retina.reduceFactor))}isEnabled(e){const{h:t,s:n,l:r}=e.options.color.animation,{color:i}=e;return!e.destroyed&&!e.spawning&&(void 0!==i?.h.value&&t.enable||void 0!==i?.s.value&&n.enable||void 0!==i?.l.value&&r.enable)}update(e,t){!function(e,t){const{h:n,s:r,l:i}=e.options.color.animation,{color:o}=e;if(!o)return;const{h:a,s,l}=o;a&&wo(t,a,n,360,!1),s&&wo(t,s,r,100,!0),l&&wo(t,l,i,100,!0)}(e,t)}}class Co{constructor(e){this.container=e}init(e){const t=e.options.opacity;e.opacity=Bn(t,1);const n=t.animation;n.enable&&(e.opacity.velocity=Gt(n.speed)/100*this.container.retina.reduceFactor,n.sync||(e.opacity.velocity*=$t()))}isEnabled(e){return!e.destroyed&&!e.spawning&&!!e.opacity&&e.opacity.enable&&((e.opacity.maxLoops??0)<=0||(e.opacity.maxLoops??0)>0&&(e.opacity.loops??0)<(e.opacity.maxLoops??0))}reset(e){e.opacity&&(e.opacity.time=0,e.opacity.loops=0)}update(e,t){this.isEnabled(e)&&function(e,t){const n=e.opacity;if(e.destroyed||!n?.enable||(n.maxLoops??0)>0&&(n.loops??0)>(n.maxLoops??0))return;const r=n.min,i=n.max,o=n.decay??1;if(n.time||(n.time=0),(n.delayTime??0)>0&&n.time<(n.delayTime??0)&&(n.time+=t.value),!((n.delayTime??0)>0&&n.time<(n.delayTime??0))){switch(n.status){case"increasing":n.value>=i?(n.status="decreasing",n.loops||(n.loops=0),n.loops++):n.value+=(n.velocity??0)*t.factor;break;case"decreasing":n.value<=r?(n.status="increasing",n.loops||(n.loops=0),n.loops++):n.value-=(n.velocity??0)*t.factor}n.velocity&&1!==n.decay&&(n.velocity*=o),function(e,t,n,r){switch(e.options.opacity.animation.destroy){case"max":t>=r&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,n.value,r,i),e.destroyed||(n.value=Ht(n.value,r,i))}}(e,t)}}class xo{constructor(e){this.container=e,this.modes=["bounce","bounce-vertical","bounce-horizontal","bounceVertical","bounceHorizontal","split"]}update(e,t,n,r){if(!this.modes.includes(r))return;const i=this.container;let o=!1;for(const[,r]of i.plugins)if(void 0!==r.particleBounce&&(o=r.particleBounce(e,n,t)),o)break;if(o)return;const a=e.getPosition(),s=e.offset,l=e.getRadius(),c=gn(a,l),u=i.canvas.size;!function(e){if("bounce"!==e.outMode&&"bounce-horizontal"!==e.outMode&&"bounceHorizontal"!==e.outMode&&"split"!==e.outMode||"left"!==e.direction&&"right"!==e.direction)return;e.bounds.right<0&&"left"===e.direction?e.particle.position.x=e.size+e.offset.x:e.bounds.left>e.canvasSize.width&&"right"===e.direction&&(e.particle.position.x=e.canvasSize.width-e.size-e.offset.x);const t=e.particle.velocity.x;let n=!1;if("right"===e.direction&&e.bounds.right>=e.canvasSize.width&&t>0||"left"===e.direction&&e.bounds.left<=0&&t<0){const t=Jt(e.particle.options.bounce.horizontal);e.particle.velocity.x*=-t,n=!0}if(!n)return;const r=e.offset.x+e.size;e.bounds.right>=e.canvasSize.width&&"right"===e.direction?e.particle.position.x=e.canvasSize.width-r:e.bounds.left<=0&&"left"===e.direction&&(e.particle.position.x=r),"split"===e.outMode&&e.particle.destroy()}({particle:e,outMode:r,direction:t,bounds:c,canvasSize:u,offset:s,size:l}),function(e){if("bounce"!==e.outMode&&"bounce-vertical"!==e.outMode&&"bounceVertical"!==e.outMode&&"split"!==e.outMode||"bottom"!==e.direction&&"top"!==e.direction)return;e.bounds.bottom<0&&"top"===e.direction?e.particle.position.y=e.size+e.offset.y:e.bounds.top>e.canvasSize.height&&"bottom"===e.direction&&(e.particle.position.y=e.canvasSize.height-e.size-e.offset.y);const t=e.particle.velocity.y;let n=!1;if("bottom"===e.direction&&e.bounds.bottom>=e.canvasSize.height&&t>0||"top"===e.direction&&e.bounds.top<=0&&t<0){const t=Jt(e.particle.options.bounce.vertical);e.particle.velocity.y*=-t,n=!0}if(!n)return;const r=e.offset.y+e.size;e.bounds.bottom>=e.canvasSize.height&&"bottom"===e.direction?e.particle.position.y=e.canvasSize.height-r:e.bounds.top<=0&&"top"===e.direction&&(e.particle.position.y=r),"split"===e.outMode&&e.particle.destroy()}({particle:e,outMode:r,direction:t,bounds:c,canvasSize:u,offset:s,size:l})}}class ko{constructor(e){this.container=e,this.modes=["destroy"]}update(e,t,n,r){if(!this.modes.includes(r))return;const i=this.container;switch(e.outType){case"normal":case"outside":if(fn(e.position,i.canvas.size,Ft.origin,e.getRadius(),t))return;break;case"inside":{const{dx:t,dy:n}=Zt(e.position,e.moveCenter),{x:r,y:i}=e.velocity;if(r<0&&t>e.moveCenter.radius||i<0&&n>e.moveCenter.radius||r>=0&&t<-e.moveCenter.radius||i>=0&&n<-e.moveCenter.radius)return;break}}i.particles.remove(e,void 0,!0)}}class Bo{constructor(e){this.container=e,this.modes=["none"]}update(e,t,n,r){if(!this.modes.includes(r))return;if(e.options.move.distance.horizontal&&("left"===t||"right"===t)||e.options.move.distance.vertical&&("top"===t||"bottom"===t))return;const i=e.options.move.gravity,o=this.container,a=o.canvas.size,s=e.getRadius();if(i.enable){const n=e.position;(!i.inverse&&n.y>a.height+s&&"bottom"===t||i.inverse&&n.y<-s&&"top"===t)&&o.particles.remove(e)}else{if(e.velocity.y>0&&e.position.y<=a.height+s||e.velocity.y<0&&e.position.y>=-s||e.velocity.x>0&&e.position.x<=a.width+s||e.velocity.x<0&&e.position.x>=-s)return;fn(e.position,o.canvas.size,Ft.origin,s,t)||o.particles.remove(e)}}}class So{constructor(e){this.container=e,this.modes=["out"]}update(e,t,n,r){if(!this.modes.includes(r))return;const i=this.container;switch(e.outType){case"inside":{const{x:t,y:n}=e.velocity,r=Ft.origin;r.length=e.moveCenter.radius,r.angle=e.velocity.angle+Math.PI,r.addTo(Ft.create(e.moveCenter));const{dx:o,dy:a}=Zt(e.position,r);if(t<=0&&o>=0||n<=0&&a>=0||t>=0&&o<=0||n>=0&&a<=0)return;e.position.x=Math.floor(Yt({min:0,max:i.canvas.size.width})),e.position.y=Math.floor(Yt({min:0,max:i.canvas.size.height}));const{dx:s,dy:l}=Zt(e.position,e.moveCenter);e.direction=Math.atan2(-l,-s),e.velocity.angle=e.direction;break}default:if(fn(e.position,i.canvas.size,Ft.origin,e.getRadius(),t))return;switch(e.outType){case"outside":{e.position.x=Math.floor(Yt({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.x,e.position.y=Math.floor(Yt({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.y;const{dx:t,dy:n}=Zt(e.position,e.moveCenter);e.moveCenter.radius&&(e.direction=Math.atan2(n,t),e.velocity.angle=e.direction);break}case"normal":{const n=e.options.move.warp,r=i.canvas.size,o={bottom:r.height+e.getRadius()+e.offset.y,left:-e.getRadius()-e.offset.x,right:r.width+e.getRadius()+e.offset.x,top:-e.getRadius()-e.offset.y},a=e.getRadius(),s=gn(e.position,a);"right"===t&&s.left>r.width+e.offset.x?(e.position.x=o.left,e.initialPosition.x=e.position.x,n||(e.position.y=$t()*r.height,e.initialPosition.y=e.position.y)):"left"===t&&s.right<-e.offset.x&&(e.position.x=o.right,e.initialPosition.x=e.position.x,n||(e.position.y=$t()*r.height,e.initialPosition.y=e.position.y)),"bottom"===t&&s.top>r.height+e.offset.y?(n||(e.position.x=$t()*r.width,e.initialPosition.x=e.position.x),e.position.y=o.top,e.initialPosition.y=e.position.y):"top"===t&&s.bottom<-e.offset.y&&(n||(e.position.x=$t()*r.width,e.initialPosition.x=e.position.x),e.position.y=o.bottom,e.initialPosition.y=e.position.y);break}}}}}class _o{constructor(e){this.container=e,this._updateOutMode=(e,t,n,r)=>{for(const i of this.updaters)i.update(e,r,t,n)},this.updaters=[new xo(e),new ko(e),new So(e),new Bo(e)]}init(){}isEnabled(e){return!e.destroyed&&!e.spawning}update(e,t){const n=e.options.move.outModes;this._updateOutMode(e,t,n.bottom??n.default,"bottom"),this._updateOutMode(e,t,n.left??n.default,"left"),this._updateOutMode(e,t,n.right??n.default,"right"),this._updateOutMode(e,t,n.top??n.default,"top")}}class zo{init(e){const t=e.container,n=e.options.size.animation;n.enable&&(e.size.velocity=(e.retina.sizeAnimationSpeed??t.retina.sizeAnimationSpeed)/100*t.retina.reduceFactor,n.sync||(e.size.velocity*=$t()))}isEnabled(e){return!e.destroyed&&!e.spawning&&e.size.enable&&((e.size.maxLoops??0)<=0||(e.size.maxLoops??0)>0&&(e.size.loops??0)<(e.size.maxLoops??0))}reset(e){e.size.loops=0}update(e,t){this.isEnabled(e)&&function(e,t){const n=e.size;if(e.destroyed||!n||!n.enable||(n.maxLoops??0)>0&&(n.loops??0)>(n.maxLoops??0))return;const r=(n.velocity??0)*t.factor,i=n.min,o=n.max,a=n.decay??1;if(n.time||(n.time=0),(n.delayTime??0)>0&&n.time<(n.delayTime??0)&&(n.time+=t.value),!((n.delayTime??0)>0&&n.time<(n.delayTime??0))){switch(n.status){case"increasing":n.value>=o?(n.status="decreasing",n.loops||(n.loops=0),n.loops++):n.value+=r;break;case"decreasing":n.value<=i?(n.status="increasing",n.loops||(n.loops=0),n.loops++):n.value-=r}n.velocity&&1!==a&&(n.velocity*=a),function(e,t,n,r){switch(e.options.size.animation.destroy){case"max":t>=r&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,n.value,i,o),e.destroyed||(n.value=Ht(n.value,i,o))}}(e,t)}}class Po{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed),void 0!==e.speed&&(this.speed=e.speed))}}class Oo extends uo{constructor(e,t){super(t),this._clickAttract=()=>{const e=this.container;e.attract||(e.attract={particles:[]});const{attract:t}=e;if(t.finish||(t.count||(t.count=0),t.count++,t.count===e.particles.count&&(t.finish=!0)),t.clicking){const t=e.interactivity.mouse.clickPosition,n=e.retina.attractModeDistance;if(!n||n<0||!t)return;this._processAttract(t,n,new Ai(t.x,t.y,n))}else!1===t.clicking&&(t.particles=[])},this._hoverAttract=()=>{const e=this.container,t=e.interactivity.mouse.position,n=e.retina.attractModeDistance;!n||n<0||!t||this._processAttract(t,n,new Ai(t.x,t.y,n))},this._processAttract=(e,t,n)=>{const r=this.container,i=r.actualOptions.interactivity.modes.attract;if(!i)return;const o=r.particles.quadTree.query(n,(e=>this.isEnabled(e)));for(const n of o){const{dx:r,dy:o,distance:a}=Zt(n.position,e),s=i.speed*i.factor,l=Ht(Wt(i.easing)(1-a/t)*s,0,i.maxSpeed),c=Ft.create(0===a?s:r/a*l,0===a?s:o/a*l);n.position.subFrom(c)}},this._engine=e,t.attract||(t.attract={particles:[]}),this.handleClickMode=e=>{const n=this.container.actualOptions.interactivity.modes.attract;if(n&&"attract"===e){t.attract||(t.attract={particles:[]}),t.attract.clicking=!0,t.attract.count=0;for(const e of t.attract.particles)this.isEnabled(e)&&e.velocity.setTo(e.initialVelocity);t.attract.particles=[],t.attract.finish=!1,setTimeout((()=>{t.destroyed||(t.attract||(t.attract={particles:[]}),t.attract.clicking=!1)}),1e3*n.duration)}}}clear(){}init(){const e=this.container,t=e.actualOptions.interactivity.modes.attract;t&&(e.retina.attractModeDistance=t.distance*e.retina.pixelRatio)}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===Rt,r=t.interactivity.events,i=r.onHover.enable,o=r.onHover.mode,a=r.onClick.enable,s=r.onClick.mode;n&&i&&dn("attract",o)?this._hoverAttract():a&&dn("attract",s)&&this._clickAttract()}isEnabled(e){const t=this.container,n=t.actualOptions,r=t.interactivity.mouse,i=(e?.interactivity??n.interactivity).events;if(!(r.position&&i.onHover.enable||r.clickPosition&&i.onClick.enable))return!1;const o=i.onHover.mode,a=i.onClick.mode;return dn("attract",o)||dn("attract",a)}loadModeOptions(e,...t){e.attract||(e.attract=new Po);for(const n of t)e.attract.load(n?.attract)}reset(){}}class Do{constructor(){this.distance=200}load(e){e&&void 0!==e.distance&&(this.distance=e.distance)}}class Mo extends uo{constructor(e){super(e),this._processBounce=(e,t,n)=>{const r=this.container.particles.quadTree.query(n,(e=>this.isEnabled(e)));for(const i of r)n instanceof Ai?wn(vn(i),{position:e,radius:t,mass:t**2*Math.PI/2,velocity:Ft.origin,factor:Ft.origin}):n instanceof mi&&En(i,gn(e,t))},this._processMouseBounce=()=>{const e=this.container,t=10*e.retina.pixelRatio,n=e.interactivity.mouse.position,r=e.retina.bounceModeDistance;!r||r<0||!n||this._processBounce(n,r,new Ai(n.x,n.y,r+t))},this._singleSelectorBounce=(e,t)=>{const n=this.container,r=document.querySelectorAll(e);r.length&&r.forEach((e=>{const r=e,i=n.retina.pixelRatio,o={x:(r.offsetLeft+r.offsetWidth/2)*i,y:(r.offsetTop+r.offsetHeight/2)*i},a=r.offsetWidth/2*i,s=10*i,l="circle"===t.type?new Ai(o.x,o.y,a+s):new mi(r.offsetLeft*i-s,r.offsetTop*i-s,r.offsetWidth*i+2*s,r.offsetHeight*i+2*s);this._processBounce(o,a,l)}))}}clear(){}init(){const e=this.container,t=e.actualOptions.interactivity.modes.bounce;t&&(e.retina.bounceModeDistance=t.distance*e.retina.pixelRatio)}async interact(){const e=this.container,t=e.actualOptions.interactivity.events,n=e.interactivity.status===Rt,r=t.onHover.enable,i=t.onHover.mode,o=t.onDiv;n&&r&&dn("bounce",i)?this._processMouseBounce():bn("bounce",o,((e,t)=>this._singleSelectorBounce(e,t)))}isEnabled(e){const t=this.container,n=t.actualOptions,r=t.interactivity.mouse,i=(e?.interactivity??n.interactivity).events,o=i.onDiv;return r.position&&i.onHover.enable&&dn("bounce",i.onHover.mode)||An("bounce",o)}loadModeOptions(e,...t){e.bounce||(e.bounce=new Do);for(const n of t)e.bounce.load(n?.bounce)}reset(){}}class To{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(e){if(e){if(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.mix&&(this.mix=e.mix),void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.color){const t=Tn(this.color)?void 0:this.color;this.color=Cn(e.color,(e=>ar.create(t,e)))}void 0!==e.size&&(this.size=e.size)}}}class Ro extends To{constructor(){super(),this.selectors=[]}get ids(){return Cn(this.selectors,(e=>e.replace("#","")))}set ids(e){this.selectors=Cn(e,(e=>`#${e}`))}load(e){super.load(e),e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}class Io extends To{load(e){super.load(e),e&&(this.divs=Cn(e.divs,(e=>{const t=new Ro;return t.load(e),t})))}}function No(e,t,n,r){return t>=n?Ht(e+(t-n)*r,e,t):t<n?Ht(e-(n-t)*r,t,e):void 0}class Lo extends uo{constructor(e){super(e),this._clickBubble=()=>{const e=this.container,t=e.actualOptions,n=e.interactivity.mouse.clickPosition,r=t.interactivity.modes.bubble;if(!r||!n)return;e.bubble||(e.bubble={});const i=e.retina.bubbleModeDistance;if(!i||i<0)return;const o=e.particles.quadTree.queryCircle(n,i,(e=>this.isEnabled(e))),{bubble:a}=e;for(const t of o){if(!a.clicking)continue;t.bubble.inRange=!a.durationEnd;const o=en(t.getPosition(),n),s=((new Date).getTime()-(e.interactivity.mouse.clickTime||0))/1e3;s>r.duration&&(a.durationEnd=!0),s>2*r.duration&&(a.clicking=!1,a.durationEnd=!1);const l={bubbleObj:{optValue:e.retina.bubbleModeSize,value:t.bubble.radius},particlesObj:{optValue:Xt(t.options.size.value)*e.retina.pixelRatio,value:t.size.value},type:"size"};this._process(t,o,s,l);const c={bubbleObj:{optValue:r.opacity,value:t.bubble.opacity},particlesObj:{optValue:Xt(t.options.opacity.value),value:t.opacity?.value??1},type:"opacity"};this._process(t,o,s,c),!a.durationEnd&&o<=i?this._hoverBubbleColor(t,o):delete t.bubble.color}},this._hoverBubble=()=>{const e=this.container,t=e.interactivity.mouse.position,n=e.retina.bubbleModeDistance;if(!n||n<0||void 0===t)return;const r=e.particles.quadTree.queryCircle(t,n,(e=>this.isEnabled(e)));for(const i of r){i.bubble.inRange=!0;const r=en(i.getPosition(),t),o=1-r/n;r<=n?o>=0&&e.interactivity.status===Rt&&(this._hoverBubbleSize(i,o),this._hoverBubbleOpacity(i,o),this._hoverBubbleColor(i,o)):this.reset(i),e.interactivity.status===Tt&&this.reset(i)}},this._hoverBubbleColor=(e,t,n)=>{const r=this.container.actualOptions,i=n??r.interactivity.modes.bubble;if(i){if(!e.bubble.finalColor){const t=i.color;if(!t)return;const n=xn(t);e.bubble.finalColor=qn(n)}if(e.bubble.finalColor)if(i.mix){e.bubble.color=void 0;const n=e.getFillColor();e.bubble.color=n?Wn(Gn(n,e.bubble.finalColor,1-t,t)):e.bubble.finalColor}else e.bubble.color=e.bubble.finalColor}},this._hoverBubbleOpacity=(e,t,n)=>{const r=this.container.actualOptions,i=n?.opacity??r.interactivity.modes.bubble?.opacity;if(!i)return;const o=e.options.opacity.value,a=No(e.opacity?.value??1,i,Xt(o),t);void 0!==a&&(e.bubble.opacity=a)},this._hoverBubbleSize=(e,t,n)=>{const r=this.container,i=n?.size?n.size*r.retina.pixelRatio:r.retina.bubbleModeSize;if(void 0===i)return;const o=Xt(e.options.size.value)*r.retina.pixelRatio,a=No(e.size.value,i,o,t);void 0!==a&&(e.bubble.radius=a)},this._process=(e,t,n,r)=>{const i=this.container,o=r.bubbleObj.optValue,a=i.actualOptions.interactivity.modes.bubble;if(!a||void 0===o)return;const s=a.duration,l=i.retina.bubbleModeDistance,c=r.particlesObj.optValue,u=r.bubbleObj.value,d=r.particlesObj.value||0,h=r.type;if(l&&!(l<0)&&o!==c)if(i.bubble||(i.bubble={}),i.bubble.durationEnd)u&&("size"===h&&delete e.bubble.radius,"opacity"===h&&delete e.bubble.opacity);else if(t<=l){if((u??d)!==o){const t=d-n*(d-o)/s;"size"===h&&(e.bubble.radius=t),"opacity"===h&&(e.bubble.opacity=t)}}else"size"===h&&delete e.bubble.radius,"opacity"===h&&delete e.bubble.opacity},this._singleSelectorHover=(e,t,n)=>{const r=this.container,i=document.querySelectorAll(t),o=r.actualOptions.interactivity.modes.bubble;o&&i.length&&i.forEach((t=>{const i=t,a=r.retina.pixelRatio,s={x:(i.offsetLeft+i.offsetWidth/2)*a,y:(i.offsetTop+i.offsetHeight/2)*a},l=i.offsetWidth/2*a,c="circle"===n.type?new Ai(s.x,s.y,l):new mi(i.offsetLeft*a,i.offsetTop*a,i.offsetWidth*a,i.offsetHeight*a),u=r.particles.quadTree.query(c,(e=>this.isEnabled(e)));for(const t of u){if(!c.contains(t.getPosition()))continue;t.bubble.inRange=!0;const n=yn(o.divs,i);t.bubble.div&&t.bubble.div===i||(this.clear(t,e,!0),t.bubble.div=i),this._hoverBubbleSize(t,1,n),this._hoverBubbleOpacity(t,1,n),this._hoverBubbleColor(t,1,n)}}))},e.bubble||(e.bubble={}),this.handleClickMode=t=>{"bubble"===t&&(e.bubble||(e.bubble={}),e.bubble.clicking=!0)}}clear(e,t,n){e.bubble.inRange&&!n||(delete e.bubble.div,delete e.bubble.opacity,delete e.bubble.radius,delete e.bubble.color)}init(){const e=this.container,t=e.actualOptions.interactivity.modes.bubble;t&&(e.retina.bubbleModeDistance=t.distance*e.retina.pixelRatio,void 0!==t.size&&(e.retina.bubbleModeSize=t.size*e.retina.pixelRatio))}async interact(e){const t=this.container.actualOptions.interactivity.events,n=t.onHover,r=t.onClick,i=n.enable,o=n.mode,a=r.enable,s=r.mode,l=t.onDiv;i&&dn("bubble",o)?this._hoverBubble():a&&dn("bubble",s)?this._clickBubble():bn("bubble",l,((t,n)=>this._singleSelectorHover(e,t,n)))}isEnabled(e){const t=this.container,n=t.actualOptions,r=t.interactivity.mouse,i=(e?.interactivity??n.interactivity).events,{onClick:o,onDiv:a,onHover:s}=i,l=An("bubble",a);return!!(l||s.enable&&r.position||o.enable&&r.clickPosition)&&(dn("bubble",s.mode)||dn("bubble",o.mode)||l)}loadModeOptions(e,...t){e.bubble||(e.bubble=new Io);for(const n of t)e.bubble.load(n?.bubble)}reset(e){e.bubble.inRange=!1}}class Fo{constructor(){this.opacity=.5}load(e){e&&void 0!==e.opacity&&(this.opacity=e.opacity)}}class jo{constructor(){this.distance=80,this.links=new Fo,this.radius=60}get lineLinked(){return this.links}set lineLinked(e){this.links=e}get line_linked(){return this.links}set line_linked(e){this.links=e}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(e.links??e.lineLinked??e.line_linked),void 0!==e.radius&&(this.radius=e.radius))}}function Uo(e,t,n){e.canvas.draw((r=>{const i=function(e,t,n,r){const i=e.actualOptions.interactivity.modes.connect;if(i)return function(e,t,n,r){const i=Math.floor(n.getRadius()/t.getRadius()),o=t.getFillColor(),a=n.getFillColor();if(!o||!a)return;const s=t.getPosition(),l=n.getPosition(),c=Gn(o,a,t.getRadius(),n.getRadius()),u=e.createLinearGradient(s.x,s.y,l.x,l.y);return u.addColorStop(0,Yn(o,r)),u.addColorStop(i>1?1:i,Vn(c,r)),u.addColorStop(1,Yn(a,r)),u}(t,n,r,i.links.opacity)}(e,r,t,n);if(!i)return;const o=t.getPosition(),a=n.getPosition();!function(e,t,n,r,i){er(e,r,i),e.lineWidth=t,e.strokeStyle=n,e.stroke()}(r,t.retina.linksWidth??0,i,o,a)}))}class qo extends uo{constructor(e){super(e)}clear(){}init(){const e=this.container,t=e.actualOptions.interactivity.modes.connect;t&&(e.retina.connectModeDistance=t.distance*e.retina.pixelRatio,e.retina.connectModeRadius=t.radius*e.retina.pixelRatio)}async interact(){const e=this.container;if(e.actualOptions.interactivity.events.onHover.enable&&"pointermove"===e.interactivity.status){const t=e.interactivity.mouse.position;if(!e.retina.connectModeDistance||e.retina.connectModeDistance<0||!e.retina.connectModeRadius||e.retina.connectModeRadius<0||!t)return;const n=Math.abs(e.retina.connectModeRadius),r=e.particles.quadTree.queryCircle(t,n,(e=>this.isEnabled(e)));let i=0;for(const t of r){const n=t.getPosition();for(const o of r.slice(i+1)){const r=o.getPosition(),i=Math.abs(e.retina.connectModeDistance),a=Math.abs(n.x-r.x),s=Math.abs(n.y-r.y);a<i&&s<i&&Uo(e,t,o)}++i}}}isEnabled(e){const t=this.container,n=t.interactivity.mouse,r=(e?.interactivity??t.actualOptions.interactivity).events;return!(!r.onHover.enable||!n.position)&&dn("connect",r.onHover.mode)}loadModeOptions(e,...t){e.connect||(e.connect=new jo);for(const n of t)e.connect.load(n?.connect)}reset(){}}class Wo{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(e){e&&(void 0!==e.blink&&(this.blink=e.blink),void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.opacity&&(this.opacity=e.opacity))}}class $o{constructor(){this.distance=100,this.links=new Wo}get lineLinked(){return this.links}set lineLinked(e){this.links=e}get line_linked(){return this.links}set line_linked(e){this.links=e}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(e.links??e.lineLinked??e.line_linked))}}function Ho(e,t,n,r,i){e.canvas.draw((e=>{const o=t.getPosition();!function(e,t,n,r,i,o){er(e,n,r),e.strokeStyle=Vn(i,o),e.lineWidth=t,e.stroke()}(e,t.retina.linksWidth??0,o,i,n,r)}))}class Vo extends uo{constructor(e){super(e)}clear(){}init(){const e=this.container,t=e.actualOptions.interactivity.modes.grab;t&&(e.retina.grabModeDistance=t.distance*e.retina.pixelRatio)}async interact(){const e=this.container,t=e.actualOptions.interactivity;if(!t.modes.grab||!t.events.onHover.enable||e.interactivity.status!==Rt)return;const n=e.interactivity.mouse.position;if(!n)return;const r=e.retina.grabModeDistance;if(!r||r<0)return;const i=e.particles.quadTree.queryCircle(n,r,(e=>this.isEnabled(e)));for(const o of i){const i=en(o.getPosition(),n);if(i>r)continue;const a=t.modes.grab.links,s=a.opacity,l=s-i*s/r;if(l<=0)continue;const c=a.color??o.options.links?.color;if(!e.particles.grabLineColor&&c){const n=t.modes.grab.links;e.particles.grabLineColor=Xn(c,n.blink,n.consent)}const u=Qn(o,void 0,e.particles.grabLineColor);u&&Ho(e,o,u,l,n)}}isEnabled(e){const t=this.container,n=t.interactivity.mouse,r=(e?.interactivity??t.actualOptions.interactivity).events;return r.onHover.enable&&!!n.position&&dn("grab",r.onHover.mode)}loadModeOptions(e,...t){e.grab||(e.grab=new $o);for(const n of t)e.grab.load(n?.grab)}reset(){}}class Yo extends uo{constructor(e){super(e),this.handleClickMode=e=>{if("pause"!==e)return;const t=this.container;t.getAnimationStatus()?t.pause():t.play()}}clear(){}init(){}async interact(){}isEnabled(){return!0}reset(){}}class Go{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=Kt(e)}load(e){if(!e)return;void 0!==e.default&&(this.default=e.default),void 0!==e.groups&&(this.groups=e.groups.map((e=>e))),this.groups.length||(this.default=!0);const t=e.quantity??e.particles_nb;void 0!==t&&(this.quantity=Kt(t))}}class Qo extends uo{constructor(e){super(e),this.handleClickMode=e=>{if("push"!==e)return;const t=this.container,n=t.actualOptions.interactivity.modes.push;if(!n)return;const r=Gt(n.quantity);if(r<=0)return;const i=pn([void 0,...n.groups]),o=void 0!==i?t.actualOptions.particles.groups[i]:void 0;t.particles.push(r,t.interactivity.mouse,o,i)}}clear(){}init(){}async interact(){}isEnabled(){return!0}loadModeOptions(e,...t){e.push||(e.push=new Go);for(const n of t)e.push.load(n?.push)}reset(){}}class Xo{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=Kt(e)}load(e){if(!e)return;const t=e.quantity??e.particles_nb;void 0!==t&&(this.quantity=Kt(t))}}class Ko extends uo{constructor(e){super(e),this.handleClickMode=e=>{const t=this.container,n=t.actualOptions;if(!n.interactivity.modes.remove||"remove"!==e)return;const r=Gt(n.interactivity.modes.remove.quantity);t.particles.removeQuantity(r)}}clear(){}init(){}async interact(){}isEnabled(){return!0}loadModeOptions(e,...t){e.remove||(e.remove=new Xo);for(const n of t)e.remove.load(n?.remove)}reset(){}}class Jo{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing="ease-out-quad"}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.speed&&(this.speed=e.speed),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed))}}class Zo extends Jo{constructor(){super(),this.selectors=[]}get ids(){return Cn(this.selectors,(e=>e.replace("#","")))}set ids(e){this.selectors=Cn(e,(e=>`#${e}`))}load(e){super.load(e),e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}class ea extends Jo{load(e){super.load(e),e&&(this.divs=Cn(e.divs,(e=>{const t=new Zo;return t.load(e),t})))}}class ta extends uo{constructor(e,t){super(t),this._clickRepulse=()=>{const e=this.container,t=e.actualOptions.interactivity.modes.repulse;if(!t)return;const n=e.repulse||{particles:[]};if(n.finish||(n.count||(n.count=0),n.count++,n.count===e.particles.count&&(n.finish=!0)),n.clicking){const r=e.retina.repulseModeDistance;if(!r||r<0)return;const i=Math.pow(r/6,3),o=e.interactivity.mouse.clickPosition;if(void 0===o)return;const a=new Ai(o.x,o.y,i),s=e.particles.quadTree.query(a,(e=>this.isEnabled(e)));for(const e of s){const{dx:r,dy:a,distance:s}=Zt(o,e.position),l=s**2,c=-i*t.speed/l;if(l<=i){n.particles.push(e);const t=Ft.create(r,a);t.length=c,e.velocity.setTo(t)}}}else if(!1===n.clicking){for(const e of n.particles)e.velocity.setTo(e.initialVelocity);n.particles=[]}},this._hoverRepulse=()=>{const e=this.container,t=e.interactivity.mouse.position,n=e.retina.repulseModeDistance;!n||n<0||!t||this._processRepulse(t,n,new Ai(t.x,t.y,n))},this._processRepulse=(e,t,n,r)=>{const i=this.container,o=i.particles.quadTree.query(n,(e=>this.isEnabled(e))),a=i.actualOptions.interactivity.modes.repulse;if(a)for(const n of o){const{dx:i,dy:o,distance:s}=Zt(n.position,e),l=(r?.speed??a.speed)*a.factor,c=Ht(Wt(a.easing)(1-s/t)*l,0,a.maxSpeed),u=Ft.create(0===s?l:i/s*c,0===s?l:o/s*c);n.position.addTo(u)}},this._singleSelectorRepulse=(e,t)=>{const n=this.container,r=n.actualOptions.interactivity.modes.repulse;if(!r)return;const i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,o=n.retina.pixelRatio,a={x:(i.offsetLeft+i.offsetWidth/2)*o,y:(i.offsetTop+i.offsetHeight/2)*o},s=i.offsetWidth/2*o,l="circle"===t.type?new Ai(a.x,a.y,s):new mi(i.offsetLeft*o,i.offsetTop*o,i.offsetWidth*o,i.offsetHeight*o),c=yn(r.divs,i);this._processRepulse(a,s,l,c)}))},this._engine=e,t.repulse||(t.repulse={particles:[]}),this.handleClickMode=e=>{const n=this.container.actualOptions.interactivity.modes.repulse;if(!n||"repulse"!==e)return;t.repulse||(t.repulse={particles:[]});const r=t.repulse;r.clicking=!0,r.count=0;for(const e of t.repulse.particles)this.isEnabled(e)&&e.velocity.setTo(e.initialVelocity);r.particles=[],r.finish=!1,setTimeout((()=>{t.destroyed||(r.clicking=!1)}),1e3*n.duration)}}clear(){}init(){const e=this.container,t=e.actualOptions.interactivity.modes.repulse;t&&(e.retina.repulseModeDistance=t.distance*e.retina.pixelRatio)}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===Rt,r=t.interactivity.events,i=r.onHover,o=i.enable,a=i.mode,s=r.onClick,l=s.enable,c=s.mode,u=r.onDiv;n&&o&&dn("repulse",a)?this._hoverRepulse():l&&dn("repulse",c)?this._clickRepulse():bn("repulse",u,((e,t)=>this._singleSelectorRepulse(e,t)))}isEnabled(e){const t=this.container,n=t.actualOptions,r=t.interactivity.mouse,i=(e?.interactivity??n.interactivity).events,o=i.onDiv,a=i.onHover,s=i.onClick,l=An("repulse",o);if(!(l||a.enable&&r.position||s.enable&&r.clickPosition))return!1;const c=a.mode,u=s.mode;return dn("repulse",c)||dn("repulse",u)||l}loadModeOptions(e,...t){e.repulse||(e.repulse=new ea);for(const n of t)e.repulse.load(n?.repulse)}reset(){}}class na{constructor(){this.factor=3,this.radius=200}load(e){e&&(void 0!==e.factor&&(this.factor=e.factor),void 0!==e.radius&&(this.radius=e.radius))}}class ra extends uo{constructor(e){super(e)}clear(e,t,n){e.slow.inRange&&!n||(e.slow.factor=1)}init(){const e=this.container,t=e.actualOptions.interactivity.modes.slow;t&&(e.retina.slowModeRadius=t.radius*e.retina.pixelRatio)}async interact(){}isEnabled(e){const t=this.container,n=t.interactivity.mouse,r=(e?.interactivity??t.actualOptions.interactivity).events;return r.onHover.enable&&!!n.position&&dn("slow",r.onHover.mode)}loadModeOptions(e,...t){e.slow||(e.slow=new na);for(const n of t)e.slow.load(n?.slow)}reset(e){e.slow.inRange=!1;const t=this.container,n=t.actualOptions,r=t.interactivity.mouse.position,i=t.retina.slowModeRadius,o=n.interactivity.modes.slow;if(!o||!i||i<0||!r)return;const a=en(r,e.getPosition()),s=a/i,l=o.factor,{slow:c}=e;a>i||(c.inRange=!0,c.factor=s/l)}}const ia=[0,4,2,1],oa=[8,8,4,2];class aa{constructor(e){this.pos=0,this.data=new Uint8ClampedArray(e)}getString(e){const t=this.data.slice(this.pos,this.pos+e);return this.pos+=t.length,t.reduce(((e,t)=>e+String.fromCharCode(t)),"")}nextByte(){return this.data[this.pos++]}nextTwoBytes(){return this.pos+=2,this.data[this.pos-2]+(this.data[this.pos-1]<<8)}readSubBlocks(){let e="",t=0;do{t=this.data[this.pos++];for(let n=t;--n>=0;e+=String.fromCharCode(this.data[this.pos++]));}while(0!==t);return e}readSubBlocksBin(){let e=0,t=0;for(let n=0;0!==(e=this.data[this.pos+n]);n+=e+1)t+=e;const n=new Uint8Array(t);for(let t=0;0!==(e=this.data[this.pos++]);)for(let r=e;--r>=0;n[t++]=this.data[this.pos++]);return n}skipSubBlocks(){for(;0!==this.data[this.pos];this.pos+=this.data[this.pos]+1);this.pos++}}function sa(e,t){const n=[];for(let r=0;r<t;r++)n.push({r:e.data[e.pos],g:e.data[e.pos+1],b:e.data[e.pos+2]}),e.pos+=3;return n}async function la(e,t,n,r,i,o){switch(e.nextByte()){case 59:return!0;case 44:await async function(e,t,n,r,i,o){const a=t.frames[r(!0)];a.left=e.nextTwoBytes(),a.top=e.nextTwoBytes(),a.width=e.nextTwoBytes(),a.height=e.nextTwoBytes();const s=e.nextByte(),l=128==(128&s),c=64==(64&s);a.sortFlag=32==(32&s),a.reserved=(24&s)>>>3;const u=1<<1+(7&s);l&&(a.localColorTable=sa(e,u));const d=e=>{const{r,g:o,b:s}=(l?a.localColorTable:t.globalColorTable)[e];return{r,g:o,b:s,a:e===i(null)?n?~~((r+o+s)/3):0:255}},h=(()=>{try{return new ImageData(a.width,a.height,{colorSpace:"srgb"})}catch(e){if(e instanceof DOMException&&"IndexSizeError"===e.name)return null;throw e}})();if(null==h)throw new EvalError("GIF frame size is to large");const p=e.nextByte(),f=e.readSubBlocksBin(),g=1<<p,m=(e,t)=>{const n=e>>>3,r=7&e;return(f[n]+(f[n+1]<<8)+(f[n+2]<<16)&(1<<t)-1<<r)>>>r};if(c){for(let n=0,i=p+1,s=0,l=[[0]],c=0;c<4;c++){if(ia[c]<a.height)for(let e=0,t=0;;){const r=n;if(n=m(s,i),s+=i+1,n===g){i=p+1,l.length=g+2;for(let e=0;e<l.length;e++)l[e]=e<g?[e]:[]}else{n>=l.length?l.push(l[r].concat(l[r][0])):r!==g&&l.push(l[r].concat(l[n][0]));for(let r=0;r<l[n].length;r++){const{r:i,g:o,b:s,a:u}=d(l[n][r]);h.data.set([i,o,s,u],ia[c]*a.width+oa[c]*t+e%(4*a.width)),e+=4}l.length===1<<i&&i<12&&i++}if(e===4*a.width*(t+1)&&(t++,ia[c]+oa[c]*t>=a.height))break}o?.(e.pos/(e.data.length-1),r(!1)+1,h,{x:a.left,y:a.top},{width:t.width,height:t.height})}a.image=h,a.bitmap=await createImageBitmap(h)}else{for(let e=0,t=p+1,n=0,r=[[0]],i=-4;;){const o=e;if(e=m(n,t),n+=t,e===g){t=p+1,r.length=g+2;for(let e=0;e<r.length;e++)r[e]=e<g?[e]:[]}else{if(e===g+1)break;e>=r.length?r.push(r[o].concat(r[o][0])):o!==g&&r.push(r[o].concat(r[e][0]));for(let t=0;t<r[e].length;t++){const{r:n,g:o,b:a,a:s}=d(r[e][t]);h.data.set([n,o,a,s],i+=4)}r.length>=1<<t&&t<12&&t++}}a.image=h,a.bitmap=await createImageBitmap(h),o?.((e.pos+1)/e.data.length,r(!1)+1,a.image,{x:a.left,y:a.top},{width:t.width,height:t.height})}}(e,t,n,r,i,o);break;case 33:await async function(e,t,n,r){switch(e.nextByte()){case 249:{const i=t.frames[n(!1)];e.pos++;const o=e.nextByte();i.GCreserved=(224&o)>>>5,i.disposalMethod=(28&o)>>>2,i.userInputDelayFlag=2==(2&o);const a=1==(1&o);i.delayTime=10*e.nextTwoBytes();const s=e.nextByte();a&&r(s),e.pos++;break}case 255:{e.pos++;const n={identifier:e.getString(8),authenticationCode:e.getString(3),data:e.readSubBlocksBin()};t.applicationExtensions.push(n);break}case 254:t.comments.push([n(!1),e.readSubBlocks()]);break;case 1:if(0===t.globalColorTable.length)throw new EvalError("plain text extension without global color table");e.pos++,t.frames[n(!1)].plainTextData={left:e.nextTwoBytes(),top:e.nextTwoBytes(),width:e.nextTwoBytes(),height:e.nextTwoBytes(),charSize:{width:e.nextTwoBytes(),height:e.nextTwoBytes()},foregroundColor:e.nextByte(),backgroundColor:e.nextByte(),text:e.readSubBlocks()};break;default:e.skipSubBlocks()}}(e,t,r,i);break;default:throw new EvalError("undefined block found")}return!1}const ca=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;async function ua(e){return new Promise((t=>{e.loading=!0;const n=new Image;e.element=n,n.addEventListener("load",(()=>{e.loading=!1,t()})),n.addEventListener("error",(()=>{e.element=void 0,e.error=!0,e.loading=!1,sn().error(`${Nt} loading image: ${e.source}`),t()})),n.src=e.source}))}async function da(e){if("gif"===e.type){e.loading=!0;try{e.gifData=await async function(e,t,n){n||(n=!1);const r=await fetch(e);if(!r.ok&&404===r.status)throw new EvalError("file not found");const i=await r.arrayBuffer(),o={width:0,height:0,totalTime:0,colorRes:0,pixelAspectRatio:0,frames:[],sortFlag:!1,globalColorTable:[],backgroundImage:new ImageData(1,1,{colorSpace:"srgb"}),comments:[],applicationExtensions:[]},a=new aa(new Uint8ClampedArray(i));if("GIF89a"!==a.getString(6))throw new Error("not a supported GIF file");o.width=a.nextTwoBytes(),o.height=a.nextTwoBytes();const s=a.nextByte(),l=128==(128&s);o.colorRes=(112&s)>>>4,o.sortFlag=8==(8&s);const c=1<<1+(7&s),u=a.nextByte();o.pixelAspectRatio=a.nextByte(),0!==o.pixelAspectRatio&&(o.pixelAspectRatio=(o.pixelAspectRatio+15)/64),l&&(o.globalColorTable=sa(a,c));const d=(()=>{try{return new ImageData(o.width,o.height,{colorSpace:"srgb"})}catch(e){if(e instanceof DOMException&&"IndexSizeError"===e.name)return null;throw e}})();if(null==d)throw new Error("GIF frame size is to large");const{r:h,g:p,b:f}=o.globalColorTable[u];d.data.set(l?[h,p,f,255]:[0,0,0,0]);for(let e=4;e<d.data.length;e*=2)d.data.copyWithin(e,0,e);o.backgroundImage=d;let g=-1,m=!0,A=-1;const b=e=>(e&&(m=!0),g),y=e=>(null!=e&&(A=e),A);try{do{m&&(o.frames.push({left:0,top:0,width:0,height:0,disposalMethod:0,image:new ImageData(1,1,{colorSpace:"srgb"}),plainTextData:null,userInputDelayFlag:!1,delayTime:0,sortFlag:!1,localColorTable:[],reserved:0,GCreserved:0}),g++,A=-1,m=!1)}while(!await la(a,o,n,b,y,undefined));o.frames.length--;for(const e of o.frames){if(e.userInputDelayFlag&&0===e.delayTime){o.totalTime=1/0;break}o.totalTime+=e.delayTime}return o}catch(e){if(e instanceof EvalError)throw new Error(`error while parsing frame ${g} "${e.message}"`);throw e}}(e.source),e.gifLoopCount=function(e){for(const t of e.applicationExtensions)if(t.identifier+t.authenticationCode==="NETSCAPE2.0")return t.data[1]+(t.data[2]<<8);return NaN}(e.gifData)??0,0===e.gifLoopCount&&(e.gifLoopCount=1/0)}catch{e.error=!0}e.loading=!1}else await ua(e)}async function ha(e){if("svg"!==e.type)return void await ua(e);e.loading=!0;const t=await fetch(e.source);t.ok?e.svgData=await t.text():(sn().error(`${Nt} Image not found`),e.error=!0),e.loading=!1}class pa{constructor(e){this.loadImageShape=async e=>{if(!this._engine.loadImage)throw new Error(`${Nt} image shape not initialized`);await this._engine.loadImage({gif:e.gif,name:e.name,replaceColor:e.replaceColor??e.replace_color??!1,src:e.src})},this._engine=e}addImage(e){this._engine.images||(this._engine.images=[]),this._engine.images.push(e)}draw(e,t,n,r,i){const o=t.image,a=o?.element;if(o){if(e.globalAlpha=r,o.gif&&o.gifData){const r=new OffscreenCanvas(o.gifData.width,o.gifData.height),a=r.getContext("2d");if(!a)throw new Error("could not create offscreen canvas context");a.imageSmoothingQuality="low",a.imageSmoothingEnabled=!1,a.clearRect(0,0,r.width,r.height),void 0===t.gifLoopCount&&(t.gifLoopCount=o.gifLoopCount??0);let s=t.gifFrame??0;const l={x:.5*-o.gifData.width,y:.5*-o.gifData.height},c=o.gifData.frames[s];if(void 0===t.gifTime&&(t.gifTime=0),!c.bitmap)return;switch(e.scale(n/o.gifData.width,n/o.gifData.height),c.disposalMethod){case 4:case 5:case 6:case 7:case 0:a.drawImage(c.bitmap,c.left,c.top),e.drawImage(r,l.x,l.y),a.clearRect(0,0,r.width,r.height);break;case 1:a.drawImage(c.bitmap,c.left,c.top),e.drawImage(r,l.x,l.y);break;case 2:a.drawImage(c.bitmap,c.left,c.top),e.drawImage(r,l.x,l.y),a.clearRect(0,0,r.width,r.height),0===o.gifData.globalColorTable.length?a.putImageData(o.gifData.frames[0].image,l.x+c.left,l.y+c.top):a.putImageData(o.gifData.backgroundImage,l.x,l.y);break;case 3:{const t=a.getImageData(0,0,r.width,r.height);a.drawImage(c.bitmap,c.left,c.top),e.drawImage(r,l.x,l.y),a.clearRect(0,0,r.width,r.height),a.putImageData(t,0,0)}}if(t.gifTime+=i.value,t.gifTime>c.delayTime){if(t.gifTime-=c.delayTime,++s>=o.gifData.frames.length){if(--t.gifLoopCount<=0)return;s=0,a.clearRect(0,0,r.width,r.height)}t.gifFrame=s}e.scale(o.gifData.width/n,o.gifData.height/n)}else if(a){const t=o.ratio,r={x:-n,y:-n};e.drawImage(a,r.x,r.y,2*n,2*n/t)}e.globalAlpha=1}}getSidesCount(){return 12}async init(e){const t=e.actualOptions;if(t.preload&&this._engine.loadImage)for(const e of t.preload)await this._engine.loadImage(e)}loadShape(e){if("image"!==e.shape&&"images"!==e.shape)return;this._engine.images||(this._engine.images=[]);const t=e.shapeData;this._engine.images.find((e=>e.name===t.name||e.source===t.src))||this.loadImageShape(t).then((()=>{this.loadShape(e)}))}particleInit(e,t){if("image"!==t.shape&&"images"!==t.shape)return;this._engine.images||(this._engine.images=[]);const n=this._engine.images,r=t.shapeData,i=t.getFillColor(),o=n.find((e=>e.name===r.name||e.source===r.src));if(!o)return;const a=r.replaceColor??r.replace_color??o.replaceColor;o.loading?setTimeout((()=>{this.particleInit(e,t)})):(async()=>{let e;e=o.svgData&&i?await function(e,t,n,r){const i=function(e,t,n){const{svgData:r}=e;if(!r)return"";const i=Yn(t,n);if(r.includes("fill"))return r.replace(ca,(()=>i));const o=r.indexOf(">");return`${r.substring(0,o)} fill="${i}"${r.substring(o)}`}(e,n,r.opacity?.value??1),o={color:n,gif:t.gif,data:{...e,svgData:i},loaded:!1,ratio:t.width/t.height,replaceColor:t.replaceColor??t.replace_color,source:t.src};return new Promise((t=>{const n=new Blob([i],{type:"image/svg+xml"}),r=URL||window.URL||window.webkitURL||window,a=r.createObjectURL(n),s=new Image;s.addEventListener("load",(()=>{o.loaded=!0,o.element=s,t(o),r.revokeObjectURL(a)})),s.addEventListener("error",(async()=>{r.revokeObjectURL(a);const n={...e,error:!1,loading:!0};await ua(n),o.loaded=!0,o.element=n.element,t(o)})),s.src=a}))}(o,r,i,t):{color:i,data:o,element:o.element,gif:o.gif,gifData:o.gifData,gifLoopCount:o.gifLoopCount,loaded:!0,ratio:r.width&&r.height?r.width/r.height:o.ratio??1,replaceColor:a,source:r.src},e.ratio||(e.ratio=1);const n={image:e,fill:r.fill??t.fill,close:r.close??t.close};t.image=n.image,t.fill=n.fill,t.close=n.close})()}}class fa{constructor(){this.src="",this.gif=!1}load(e){e&&(void 0!==e.gif&&(this.gif=e.gif),void 0!==e.height&&(this.height=e.height),void 0!==e.name&&(this.name=e.name),void 0!==e.replaceColor&&(this.replaceColor=e.replaceColor),void 0!==e.src&&(this.src=e.src),void 0!==e.width&&(this.width=e.width))}}class ga{constructor(e){this.id="imagePreloader",this._engine=e}getPlugin(){return{}}loadOptions(e,t){if(!t||!t.preload)return;e.preload||(e.preload=[]);const n=e.preload;for(const e of t.preload){const t=n.find((t=>t.name===e.name||t.src===e.src));if(t)t.load(e);else{const t=new fa;t.load(e),n.push(t)}}}needsPlugin(){return!0}}class ma extends zr{constructor(){super(),this.sync=!1}load(e){e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}class Aa extends zr{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(e){e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}class ba{constructor(){this.count=0,this.delay=new ma,this.duration=new Aa}load(e){e&&(void 0!==e.count&&(this.count=e.count),this.delay.load(e.delay),this.duration.load(e.duration))}}class ya{constructor(e){this.container=e}init(e){const t=this.container,n=e.options.life;n&&(e.life={delay:t.retina.reduceFactor?Gt(n.delay.value)*(n.delay.sync?1:$t())/t.retina.reduceFactor*1e3:0,delayTime:0,duration:t.retina.reduceFactor?Gt(n.duration.value)*(n.duration.sync?1:$t())/t.retina.reduceFactor*1e3:0,time:0,count:n.count},e.life.duration<=0&&(e.life.duration=-1),e.life.count<=0&&(e.life.count=-1),e.life&&(e.spawning=e.life.delay>0))}isEnabled(e){return!e.destroyed}loadOptions(e,...t){e.life||(e.life=new ba);for(const n of t)e.life.load(n?.life)}update(e,t){if(!this.isEnabled(e)||!e.life)return;const n=e.life;let r=!1;if(e.spawning){if(n.delayTime+=t.value,!(n.delayTime>=e.life.delay))return;r=!0,e.spawning=!1,n.delayTime=0,n.time=0}if(-1===n.duration)return;if(e.spawning)return;if(r?n.time=0:n.time+=t.value,n.time<n.duration)return;if(n.time=0,e.life.count>0&&e.life.count--,0===e.life.count)return void e.destroy();const i=this.container.canvas.size,o=Kt(0,i.width),a=Kt(0,i.width);e.position.x=Yt(o),e.position.y=Yt(a),e.spawning=!0,n.delayTime=0,n.time=0,e.reset();const s=e.options.life;s&&(n.delay=1e3*Gt(s.delay.value),n.duration=1e3*Gt(s.duration.value))}}class va{draw(e,t,n){const r=t.shapeData;e.moveTo(-n/2,0),e.lineTo(n/2,0),e.lineCap=r?.cap??"butt"}getSidesCount(){return 1}}class wa{init(){}isEnabled(e){return!cn()&&!e.destroyed&&e.container.actualOptions.interactivity.events.onHover.parallax.enable}move(e){const t=e.container,n=t.actualOptions.interactivity.events.onHover.parallax;if(cn()||!n.enable)return;const r=n.force,i=t.interactivity.mouse.position;if(!i)return;const o=t.canvas.size,a=o.width/2,s=o.height/2,l=n.smooth,c=e.getRadius()/r,u=(i.x-a)*c,d=(i.y-s)*c,{offset:h}=e;h.x+=(u-h.x)/l,h.y+=(d-h.y)/l}}class Ea{constructor(e){this.container=e,this.type="particles"}}class Ca extends Ea{constructor(e){super(e)}clear(){}init(){}async interact(e){const t=this.container,n=e.retina.attractDistance??t.retina.attractDistance,r=e.getPosition(),i=t.particles.quadTree.queryCircle(r,n);for(const t of i){if(e===t||!t.options.move.attract.enable||t.destroyed||t.spawning)continue;const n=t.getPosition(),{dx:i,dy:o}=Zt(r,n),a=e.options.move.attract.rotate,s=i/(1e3*a.x),l=o/(1e3*a.y),c=t.size.value/e.size.value,u=1/c;e.velocity.x-=s*c,e.velocity.y-=l*c,t.velocity.x+=s*u,t.velocity.y+=l*u}}isEnabled(e){return e.options.move.attract.enable}reset(){}}function xa(e,t,n,r,i,o){const a=Ht(e.options.collisions.absorb.speed*i.factor/10,0,r);e.size.value+=a/2,n.size.value-=a,r<=o&&(n.size.value=0,n.destroy())}const ka=e=>{void 0===e.collisionMaxSpeed&&(e.collisionMaxSpeed=Gt(e.options.collisions.maxSpeed)),e.velocity.length>e.collisionMaxSpeed&&(e.velocity.length=e.collisionMaxSpeed)};function Ba(e,t){wn(vn(e),vn(t)),ka(e),ka(t)}function Sa(e,t,n,r){switch(e.options.collisions.mode){case"absorb":!function(e,t,n,r){const i=e.getRadius(),o=t.getRadius();void 0===i&&void 0!==o?e.destroy():void 0!==i&&void 0===o?t.destroy():void 0!==i&&void 0!==o&&(i>=o?xa(e,0,t,o,n,r):xa(t,0,e,i,n,r))}(e,t,n,r);break;case"bounce":Ba(e,t);break;case"destroy":!function(e,t){e.unbreakable||t.unbreakable||Ba(e,t),void 0===e.getRadius()&&void 0!==t.getRadius()?e.destroy():void 0!==e.getRadius()&&void 0===t.getRadius()?t.destroy():void 0!==e.getRadius()&&void 0!==t.getRadius()&&(e.getRadius()>=t.getRadius()?t:e).destroy()}(e,t)}}class _a extends Ea{constructor(e){super(e)}clear(){}init(){}async interact(e,t){if(e.destroyed||e.spawning)return;const n=this.container,r=e.getPosition(),i=e.getRadius(),o=n.particles.quadTree.queryCircle(r,2*i);for(const a of o){if(e===a||!a.options.collisions.enable||e.options.collisions.mode!==a.options.collisions.mode||a.destroyed||a.spawning)continue;const o=a.getPosition(),s=a.getRadius();Math.abs(Math.round(r.z)-Math.round(o.z))>i+s||(en(r,o)>i+s||Sa(e,a,t,n.retina.pixelRatio))}}isEnabled(e){return e.options.collisions.enable}reset(){}}class za extends Ai{constructor(e,t,n,r){super(e,t,n),this.canvasSize=r,this.canvasSize={...r}}contains(e){const{width:t,height:n}=this.canvasSize,{x:r,y:i}=e;return super.contains(e)||super.contains({x:r-t,y:i})||super.contains({x:r-t,y:i-n})||super.contains({x:r,y:i-n})}intersects(e){if(super.intersects(e))return!0;const t=e,n=e,r={x:e.position.x-this.canvasSize.width,y:e.position.y-this.canvasSize.height};if(void 0!==n.radius){const e=new Ai(r.x,r.y,2*n.radius);return super.intersects(e)}if(void 0!==t.size){const e=new mi(r.x,r.y,2*t.size.width,2*t.size.height);return super.intersects(e)}return!1}}class Pa{constructor(){this.blur=5,this.color=new ar,this.color.value="#000",this.enable=!1}load(e){e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=ar.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable))}}class Oa{constructor(){this.enable=!1,this.frequency=1}load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity))}}class Da{constructor(){this.blink=!1,this.color=new ar,this.color.value="#fff",this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new Pa,this.triangles=new Oa,this.width=1,this.warp=!1}load(e){e&&(void 0!==e.id&&(this.id=e.id),void 0!==e.blink&&(this.blink=e.blink),this.color=ar.create(this.color,e.color),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.distance&&(this.distance=e.distance),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity),this.shadow.load(e.shadow),this.triangles.load(e.triangles),void 0!==e.width&&(this.width=e.width),void 0!==e.warp&&(this.warp=e.warp))}}function Ma(e,t,n,r,i){const{dx:o,dy:a,distance:s}=Zt(e,t);if(!i||s<=n)return s;const l={x:Math.abs(o),y:Math.abs(a)},c=Math.min(l.x,r.width-l.x),u=Math.min(l.y,r.height-l.y);return Math.sqrt(c**2+u**2)}class Ta extends Ea{constructor(e){super(e),this._setColor=e=>{if(!e.options.links)return;const t=this.linkContainer,n=e.options.links;let r=void 0===n.id?t.particles.linksColor:t.particles.linksColors.get(n.id);r||(r=Xn(n.color,n.blink,n.consent),void 0===n.id?t.particles.linksColor=r:t.particles.linksColors.set(n.id,r))},this.linkContainer=e}clear(){}init(){this.linkContainer.particles.linksColor=void 0,this.linkContainer.particles.linksColors=new Map}async interact(e){if(!e.options.links)return;e.links=[];const t=e.getPosition(),n=this.container,r=n.canvas.size;if(t.x<0||t.y<0||t.x>r.width||t.y>r.height)return;const i=e.options.links,o=i.opacity,a=e.retina.linksDistance??0,s=i.warp,l=s?new za(t.x,t.y,a,r):new Ai(t.x,t.y,a),c=n.particles.quadTree.query(l);for(const n of c){const l=n.options.links;if(e===n||!l?.enable||i.id!==l.id||n.spawning||n.destroyed||!n.links||e.links.some((e=>e.destination===n))||n.links.some((t=>t.destination===e)))continue;const c=n.getPosition();if(c.x<0||c.y<0||c.x>r.width||c.y>r.height)continue;const u=Ma(t,c,a,r,s&&l.warp);if(u>a)continue;const d=(1-u/a)*o;this._setColor(e),e.links.push({destination:n,opacity:d})}}isEnabled(e){return!!e.options.links?.enable}loadParticlesOptions(e,...t){e.links||(e.links=new Da);for(const n of t)e.links.load(n?.links??n?.lineLinked??n?.line_linked)}reset(){}}function Ra(e,t){const n=((r=e.map((e=>e.id))).sort(((e,t)=>e-t)),r.join("_"));var r;let i=t.get(n);return void 0===i&&(i=$t(),t.set(n,i)),i}class Ia{constructor(e){this.container=e,this._drawLinkLine=(e,t)=>{const n=e.options.links;if(!n?.enable)return;const r=this.container,i=r.actualOptions,o=t.destination,a=e.getPosition(),s=o.getPosition();let l=t.opacity;r.canvas.draw((t=>{let c;const u=e.options.twinkle?.lines;if(u?.enable){const e=u.frequency,t=jn(u.color);$t()<e&&t&&(c=t,l=Gt(u.opacity))}if(!c){const t=void 0!==n.id?r.particles.linksColors.get(n.id):r.particles.linksColor;c=Qn(e,o,t)}if(!c)return;const d=e.retina.linksWidth??0,h=e.retina.linksDistance??0,{backgroundMask:p}=i;!function(e){let t=!1;const{begin:n,end:r,maxDistance:i,context:o,canvasSize:a,width:s,backgroundMask:l,colorLine:c,opacity:u,links:d}=e;if(en(n,r)<=i)er(o,n,r),t=!0;else if(d.warp){let e,s;const l=Zt(n,{x:r.x-a.width,y:r.y});if(l.distance<=i){const t=n.y-l.dy/l.dx*n.x;e={x:0,y:t},s={x:a.width,y:t}}else{const t=Zt(n,{x:r.x,y:r.y-a.height});if(t.distance<=i){const r=-(n.y-t.dy/t.dx*n.x)/(t.dy/t.dx);e={x:r,y:0},s={x:r,y:a.height}}else{const t=Zt(n,{x:r.x-a.width,y:r.y-a.height});if(t.distance<=i){const r=n.y-t.dy/t.dx*n.x;e={x:-r/(t.dy/t.dx),y:r},s={x:e.x+a.width,y:e.y+a.height}}}}e&&s&&(er(o,n,e),er(o,r,s),t=!0)}if(!t)return;o.lineWidth=s,l.enable&&(o.globalCompositeOperation=l.composite),o.strokeStyle=Vn(c,u);const{shadow:h}=d;if(h.enable){const e=jn(h.color);e&&(o.shadowBlur=h.blur,o.shadowColor=Vn(e))}o.stroke()}({context:t,width:d,begin:a,end:s,maxDistance:h,canvasSize:r.canvas.size,links:n,backgroundMask:p,colorLine:c,opacity:l})}))},this._drawLinkTriangle=(e,t,n)=>{const r=e.options.links;if(!r?.enable)return;const i=r.triangles;if(!i.enable)return;const o=this.container,a=o.actualOptions,s=t.destination,l=n.destination,c=i.opacity??(t.opacity+n.opacity)/2;c<=0||o.canvas.draw((t=>{const n=e.getPosition(),u=s.getPosition(),d=l.getPosition(),h=e.retina.linksDistance??0;if(en(n,u)>h||en(d,u)>h||en(d,n)>h)return;let p=jn(i.color);if(!p){const t=void 0!==r.id?o.particles.linksColors.get(r.id):o.particles.linksColor;p=Qn(e,s,t)}p&&function(e){const{context:t,pos1:n,pos2:r,pos3:i,backgroundMask:o,colorTriangle:a,opacityTriangle:s}=e;!function(e,t,n,r){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.lineTo(r.x,r.y),e.closePath()}(t,n,r,i),o.enable&&(t.globalCompositeOperation=o.composite),t.fillStyle=Vn(a,s),t.fill()}({context:t,pos1:n,pos2:u,pos3:d,backgroundMask:a.backgroundMask,colorTriangle:p,opacityTriangle:c})}))},this._drawTriangles=(e,t,n,r)=>{const i=n.destination;if(!e.links?.triangles.enable||!i.options.links?.triangles.enable)return;const o=i.links?.filter((e=>{const t=this._getLinkFrequency(i,e.destination);return i.options.links&&t<=i.options.links.frequency&&r.findIndex((t=>t.destination===e.destination))>=0}));if(o?.length)for(const r of o){const o=r.destination;this._getTriangleFrequency(t,i,o)>e.links.triangles.frequency||this._drawLinkTriangle(t,n,r)}},this._getLinkFrequency=(e,t)=>Ra([e,t],this._freqs.links),this._getTriangleFrequency=(e,t,n)=>Ra([e,t,n],this._freqs.triangles),this._freqs={links:new Map,triangles:new Map}}drawParticle(e,t){const{links:n,options:r}=t;if(!n||n.length<=0)return;const i=n.filter((e=>r.links&&this._getLinkFrequency(t,e.destination)<=r.links.frequency));for(const e of i)this._drawTriangles(r,t,e,i),e.opacity>0&&(t.retina.linksWidth??0)>0&&this._drawLinkLine(t,e)}async init(){this._freqs.links=new Map,this._freqs.triangles=new Map}particleCreated(e){if(e.links=[],!e.options.links)return;const t=this.container.retina.pixelRatio,{retina:n}=e,{distance:r,width:i}=e.options.links;n.linksDistance=r*t,n.linksWidth=i*t}particleDestroyed(e){e.links=[]}}class Na{constructor(){this.id="links"}getPlugin(e){return new Ia(e)}loadOptions(){}needsPlugin(){return!0}}class La{draw(e,t,n){const r=this.getCenter(t,n),i=this.getSidesData(t,n),o=i.count.numerator*i.count.denominator,a=i.count.numerator/i.count.denominator,s=180*(a-2)/a,l=Math.PI-Math.PI*s/180;if(e){e.beginPath(),e.translate(r.x,r.y),e.moveTo(0,0);for(let t=0;t<o;t++)e.lineTo(i.length,0),e.translate(i.length,0),e.rotate(l)}}getSidesCount(e){const t=e.shapeData;return Math.round(Gt(t?.sides??t?.nb_sides??5))}}class Fa extends La{getCenter(e,t){return{x:-t/(e.sides/3.5),y:-t/.76}}getSidesData(e,t){const n=e.sides;return{count:{denominator:1,numerator:n},length:2.66*t/(n/3)}}}class ja extends La{getCenter(e,t){return{x:-t,y:t/1.66}}getSidesCount(){return 3}getSidesData(e,t){return{count:{denominator:2,numerator:3},length:2*t}}}class Ua{constructor(){this.enable=!1,this.speed=0,this.decay=0,this.sync=!1}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=Kt(e.speed)),void 0!==e.decay&&(this.decay=Kt(e.decay)),void 0!==e.sync&&(this.sync=e.sync))}}class qa extends zr{constructor(){super(),this.animation=new Ua,this.direction="clockwise",this.path=!1,this.value=0}load(e){e&&(super.load(e),void 0!==e.direction&&(this.direction=e.direction),this.animation.load(e.animation),void 0!==e.path&&(this.path=e.path))}}class Wa{constructor(e){this.container=e}init(e){const t=e.options.rotate;if(!t)return;e.rotate={enable:t.animation.enable,value:Gt(t.value)*Math.PI/180},e.pathRotation=t.path;let n=t.direction;switch("random"===n&&(n=Math.floor(2*$t())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.rotate.status="decreasing";break;case"clockwise":e.rotate.status="increasing"}const r=t.animation;r.enable&&(e.rotate.decay=1-Gt(r.decay),e.rotate.velocity=Gt(r.speed)/360*this.container.retina.reduceFactor,r.sync||(e.rotate.velocity*=$t())),e.rotation=e.rotate.value}isEnabled(e){const t=e.options.rotate;return!!t&&!e.destroyed&&!e.spawning&&t.animation.enable&&!t.path}loadOptions(e,...t){e.rotate||(e.rotate=new qa);for(const n of t)e.rotate.load(n?.rotate)}update(e,t){this.isEnabled(e)&&(function(e,t){const n=e.rotate,r=e.options.rotate;if(!n||!r)return;const i=r.animation,o=(n.velocity??0)*t.factor,a=2*Math.PI,s=n.decay??1;i.enable&&("increasing"===n.status?(n.value+=o,n.value>a&&(n.value-=a)):(n.value-=o,n.value<0&&(n.value+=a)),n.velocity&&1!==s&&(n.velocity*=s))}(e,t),e.rotation=e.rotate?.value??0)}}const $a=Math.sqrt(2);class Ha{draw(e,t,n){const r=n/$a,i=2*r;e.rect(-r,-r,i,i)}getSidesCount(){return 4}}class Va{draw(e,t,n){const r=t.sides,i=t.starInset??2;e.moveTo(0,0-n);for(let t=0;t<r;t++)e.rotate(Math.PI/r),e.lineTo(0,0-n*i),e.rotate(Math.PI/r),e.lineTo(0,0-n)}getSidesCount(e){const t=e.shapeData;return Math.round(Gt(t?.sides??t?.nb_sides??5))}particleInit(e,t){const n=t.shapeData,r=Gt(n?.inset??2);t.starInset=r}}function Ya(e,t,n,r,i){if(!t||!n.enable||(t.maxLoops??0)>0&&(t.loops??0)>(t.maxLoops??0))return;if(t.time||(t.time=0),(t.delayTime??0)>0&&t.time<(t.delayTime??0)&&(t.time+=e.value),(t.delayTime??0)>0&&t.time<(t.delayTime??0))return;const o=Yt(n.offset),a=(t.velocity??0)*e.factor+3.6*o,s=t.decay??1;i&&"increasing"!==t.status?(t.value-=a,t.value<0&&(t.loops||(t.loops=0),t.loops++,t.status="increasing",t.value+=t.value)):(t.value+=a,t.value>r&&(t.loops||(t.loops=0),t.loops++,i&&(t.status="decreasing",t.value-=t.value%r))),t.velocity&&1!==s&&(t.velocity*=s),t.value>r&&(t.value%=r)}class Ga{constructor(e){this.container=e}init(e){const t=this.container,n=e.options,r=xn(n.stroke,e.id,n.reduceDuplicates);e.strokeWidth=Gt(r.width)*t.retina.pixelRatio,e.strokeOpacity=Gt(r.opacity??1),e.strokeAnimation=r.color?.animation;const i=qn(r.color)??e.getFillColor();i&&(e.strokeColor=Jn(i,e.strokeAnimation,t.retina.reduceFactor))}isEnabled(e){const t=e.strokeAnimation,{strokeColor:n}=e;return!e.destroyed&&!e.spawning&&!!t&&(void 0!==n?.h.value&&n.h.enable||void 0!==n?.s.value&&n.s.enable||void 0!==n?.l.value&&n.l.enable)}update(e,t){this.isEnabled(e)&&function(e,t){if(!e.strokeColor||!e.strokeAnimation)return;const{h:n,s:r,l:i}=e.strokeColor,{h:o,s:a,l:s}=e.strokeAnimation;n&&Ya(t,n,o,360,!1),r&&Ya(t,r,a,100,!0),i&&Ya(t,i,s,100,!0)}(e,t)}}const Qa=["text","character","char"];class Xa{draw(e,t,n,r){const i=t.shapeData;if(void 0===i)return;const o=i.value;if(void 0===o)return;void 0===t.text&&(t.text=xn(o,t.randomIndexData));const a=t.text,s=i.style??"",l=i.weight??"400",c=2*Math.round(n),u=i.font??"Verdana",d=t.fill,h=a.length*n/2;e.font=`${s} ${l} ${c}px "${u}"`;const p={x:-h,y:n/2};e.globalAlpha=r,d?e.fillText(a,p.x,p.y):e.strokeText(a,p.x,p.y),e.globalAlpha=1}getSidesCount(){return 12}async init(e){const t=e.actualOptions;if(Qa.find((e=>dn(e,t.particles.shape.type)))){const e=Qa.map((e=>t.particles.shape.options[e])).find((e=>!!e)),n=[];Cn(e,(e=>{n.push(async function(e,t){try{await document.fonts.load(`${t??"400"} 36px '${e??"Verdana"}'`)}catch{}}(e.font,e.weight))})),await Promise.all(n)}}particleInit(e,t){if(!t.shape||!Qa.includes(t.shape))return;const n=t.shapeData;if(void 0===n)return;const r=n.value;void 0!==r&&(t.text=xn(r,t.randomIndexData))}}async function Ka(e,t=!0){bo(e),await async function(e,t=!0){await e.addMover("parallax",(()=>new wa),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalAttract",(t=>new Oo(e,t)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalBounce",(e=>new Mo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalBubble",(e=>new Lo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalConnect",(e=>new qo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalGrab",(e=>new Vo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalPause",(e=>new Yo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalPush",(e=>new Qo(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalRemove",(e=>new Ko(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalRepulse",(t=>new ta(e,t)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalSlow",(e=>new ra(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("particlesAttract",(e=>new Ca(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("particlesCollisions",(e=>new _a(e)),t)}(e,!1),await async function(e,t=!0){await async function(e,t=!0){await e.addInteractor("particlesLinks",(e=>new Ta(e)),t)}(e,t),await async function(e,t=!0){const n=new Na;await e.addPlugin(n,t)}(e,t)}(e,!1),await async function(){qt("ease-in-quad",(e=>e**2)),qt("ease-out-quad",(e=>1-(1-e)**2)),qt("ease-in-out-quad",(e=>e<.5?2*e**2:1-(-2*e+2)**2/2))}(),await async function(e,t=!0){!function(e){e.loadImage||(e.loadImage=async t=>{if(!t.name&&!t.src)throw new Error(`${Nt} no image source provided`);if(e.images||(e.images=[]),!e.images.find((e=>e.name===t.name||e.source===t.src)))try{const n={gif:t.gif??!1,name:t.name??t.src,source:t.src,type:t.src.substring(t.src.length-3),error:!1,loading:!0,replaceColor:t.replaceColor,ratio:t.width&&t.height?t.width/t.height:void 0};e.images.push(n);const r=t.gif?da:t.replaceColor?ha:ua;await r(n)}catch{throw new Error(`${Nt} ${t.name??t.src} not found`)}})}(e);const n=new ga(e);await e.addPlugin(n,t),await e.addShape(["image","images"],new pa(e),t)}(e,!1),await async function(e,t=!0){await e.addShape("line",new va,t)}(e,!1),await async function(e,t=!0){await async function(e,t=!0){await e.addShape("polygon",new Fa,t)}(e,t),await async function(e,t=!0){await e.addShape("triangle",new ja,t)}(e,t)}(e,!1),await async function(e,t=!0){await e.addShape(["edge","square"],new Ha,t)}(e,!1),await async function(e,t=!0){await e.addShape("star",new Va,t)}(e,!1),await async function(e,t=!0){await e.addShape(Qa,new Xa,t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("life",(e=>new ya(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("rotate",(e=>new Wa(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("strokeColor",(e=>new Ga(e)),t)}(e,!1),await async function(e,t=!0){await async function(e,t=!0){await e.addMover("base",(()=>new yo),t)}(e,!1),await async function(e,t=!0){await e.addShape("circle",new vo,t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("color",(e=>new Eo(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("opacity",(e=>new Co(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("outModes",(e=>new _o(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("size",(()=>new zo),t)}(e,!1),await e.refresh(t)}(e,t)}class Ja{constructor(){this.enable=!1,this.speed=0,this.decay=0,this.sync=!1}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=Kt(e.speed)),void 0!==e.decay&&(this.decay=Kt(e.decay)),void 0!==e.sync&&(this.sync=e.sync))}}class Za extends zr{constructor(){super(),this.animation=new Ja,this.direction="clockwise",this.enable=!1,this.value=0}load(e){super.load(e),e&&(this.animation.load(e.animation),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.enable&&(this.enable=e.enable))}}class es{constructor(e){this.container=e}getTransformValues(e){const t=e.tilt?.enable&&e.tilt;return{b:t?Math.cos(t.value)*t.cosDirection:void 0,c:t?Math.sin(t.value)*t.sinDirection:void 0}}init(e){const t=e.options.tilt;if(!t)return;e.tilt={enable:t.enable,value:Gt(t.value)*Math.PI/180,sinDirection:$t()>=.5?1:-1,cosDirection:$t()>=.5?1:-1};let n=t.direction;switch("random"===n&&(n=Math.floor(2*$t())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.tilt.status="decreasing";break;case"clockwise":e.tilt.status="increasing"}const r=e.options.tilt?.animation;r?.enable&&(e.tilt.decay=1-Gt(r.decay),e.tilt.velocity=Gt(r.speed)/360*this.container.retina.reduceFactor,r.sync||(e.tilt.velocity*=$t()))}isEnabled(e){const t=e.options.tilt?.animation;return!e.destroyed&&!e.spawning&&!!t?.enable}loadOptions(e,...t){e.tilt||(e.tilt=new Za);for(const n of t)e.tilt.load(n?.tilt)}update(e,t){this.isEnabled(e)&&function(e,t){if(!e.tilt||!e.options.tilt)return;const n=e.options.tilt.animation,r=(e.tilt.velocity??0)*t.factor,i=2*Math.PI,o=e.tilt.decay??1;n.enable&&("increasing"===e.tilt.status?(e.tilt.value+=r,e.tilt.value>i&&(e.tilt.value-=i)):(e.tilt.value-=r,e.tilt.value<0&&(e.tilt.value+=i)),e.tilt.velocity&&1!==o&&(e.tilt.velocity*=o))}(e,t)}}class ts{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=ar.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=Kt(e.opacity)))}}class ns{constructor(){this.lines=new ts,this.particles=new ts}load(e){e&&(this.lines.load(e.lines),this.particles.load(e.particles))}}class rs{getColorStyles(e,t,n,r){const i=e.options.twinkle;if(!i)return{};const o=i.particles,a=o.enable&&$t()<o.frequency,s=e.options.zIndex,l=(1-e.zIndexFactor)**s.opacityRate,c=a?Gt(o.opacity)*l:r,u=qn(o.color),d=u?Yn(u,c):void 0,h={},p=a&&d;return h.fill=p?d:void 0,h.stroke=p?d:void 0,h}init(){}isEnabled(e){const t=e.options.twinkle;return!!t&&t.particles.enable}loadOptions(e,...t){e.twinkle||(e.twinkle=new ns);for(const n of t)e.twinkle.load(n?.twinkle)}update(){}}class is{constructor(){this.angle=50,this.move=10}load(e){e&&(void 0!==e.angle&&(this.angle=Kt(e.angle)),void 0!==e.move&&(this.move=Kt(e.move)))}}class os{constructor(){this.distance=5,this.enable=!1,this.speed=new is}load(e){if(e&&(void 0!==e.distance&&(this.distance=Kt(e.distance)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed))if(On(e.speed))this.speed.load({angle:e.speed});else{const t=e.speed;void 0!==t.min?this.speed.load({angle:t}):this.speed.load(e.speed)}}}class as{constructor(e){this.container=e}init(e){const t=e.options.wobble;e.wobble=t?.enable?{angle:$t()*Math.PI*2,angleSpeed:Gt(t.speed.angle)/360,moveSpeed:Gt(t.speed.move)/10}:{angle:0,angleSpeed:0,moveSpeed:0},e.retina.wobbleDistance=Gt(t?.distance??0)*this.container.retina.pixelRatio}isEnabled(e){return!e.destroyed&&!e.spawning&&!!e.options.wobble?.enable}loadOptions(e,...t){e.wobble||(e.wobble=new os);for(const n of t)e.wobble.load(n?.wobble)}update(e,t){this.isEnabled(e)&&function(e,t){const{wobble:n}=e.options,{wobble:r}=e;if(!n?.enable||!r)return;const i=r.angleSpeed*t.factor,o=r.moveSpeed*t.factor*((e.retina.wobbleDistance??0)*t.factor)/(1e3/60),a=2*Math.PI,{position:s}=e;r.angle+=i,r.angle>a&&(r.angle-=a),s.x+=o*Math.cos(r.angle),s.y+=o*Math.abs(Math.sin(r.angle))}(e,t)}}function ss(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}function ls(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){ss(o,r,i,a,s,"next",e)}function s(e){ss(o,r,i,a,s,"throw",e)}a(void 0)}))}}const cs=()=>{var e=(0,n.useCallback)(function(){var e=ls((function*(e){yield async function(e,t=!0){await async function(e,t=!0){await e.addParticleUpdater("destroy",(t=>new Ki(e,t)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("roll",(()=>new mo),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("tilt",(e=>new es(e)),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("twinkle",(()=>new rs),t)}(e,!1),await async function(e,t=!0){await e.addParticleUpdater("wobble",(e=>new as(e)),t)}(e,!1),await async function(e,t=!0){await e.addInteractor("externalTrail",(e=>new po(e)),t)}(e,!1),await async function(e,t=!0){await e.addPlugin(new $i,t)}(e,!1),await async function(e,t=!0){e.emitterShapeManager||(e.emitterShapeManager=new ao(e)),e.addEmitterShape||(e.addEmitterShape=(t,n)=>{e.emitterShapeManager?.addShape(t,n)});const n=new co(e);await e.addPlugin(n,t),e.addEmitterShape("circle",new Ji),e.addEmitterShape("square",new lo)}(e,!1),await Ka(e,t)}(e)}));return function(t){return e.apply(this,arguments)}}(),[]);return(0,n.useCallback)(function(){var e=ls((function*(e){}));return function(t){return e.apply(this,arguments)}}(),[]),n.createElement(Li,{id:"tsparticles",init:e,options:{fpsLimit:120,interactivity:{events:{onClick:{enable:!1,mode:"push"},onHover:{enable:!0,mode:"repulse"},resize:!0},modes:{push:{quantity:50},repulse:{distance:100,duration:.4}}},particles:{color:{value:"#FFFFFF"},collisions:{enable:!0},move:{directions:"none",enable:!0,outModes:{default:"bounce"},random:!1,speed:1.5,straight:!0},number:{density:{enable:!0,area:800},value:80},opacity:{value:.8},shape:{type:"circle"},size:{value:{min:1,max:2}}},detectRetina:!0}})};function us(e){this.message=e}us.prototype=new Error,us.prototype.name="InvalidCharacterError";var ds="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new us("'atob' failed: The string to be decoded is not correctly encoded.");for(var n,r,i=0,o=0,a="";r=t.charAt(o++);~r&&(n=i%4?64*n+r:r,i++%4)?a+=String.fromCharCode(255&n>>(-2*i&6)):0)r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r);return a};function hs(e){this.message=e}hs.prototype=new Error,hs.prototype.name="InvalidTokenError";function ps(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fs(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function gs(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}function ms(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){gs(o,r,i,a,s,"next",e)}function s(e){gs(o,r,i,a,s,"throw",e)}a(void 0)}))}}const As=function(){B();var{user:e}=j,{setUser:t}=j(),{id:r}=j(),{setId:i}=j(),{token:o}=j(),{setToken:a}=j(),[s,l]=(0,n.useState)(""),[c,u]=(0,n.useState)(""),[d,h]=(0,n.useState)(void 0),[p,f]=(0,n.useState)("Sign in"),g=function(){var t=ms((function*(t){if(t&&t.preventDefault(),e&&e.token)return h("navigating login page");if(""===s)return h("You must enter your email.");if(""===c)return h("You must enter your password");f("Signing in");try{var n=yield _t.Login({email:s,password:c});return n.data&&!0===n.data.success?h(n.data.msg):(console.log(n),m(n))}catch(e){return console.log(e),f("Sign in"),e.response?h(e.response.data.msg):h("There has been an error.")}}));return function(e){return t.apply(this,arguments)}}(),m=function(){var e=ms((function*(e){console.log(e);var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ps(Object(n),!0).forEach((function(t){fs(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ps(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e.data.user),r=e.data.access,o=function(e,t){if("string"!=typeof e)throw new hs("Invalid token specified");var n=!0===(t=t||{}).header?0:1;try{return JSON.parse(function(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return function(e){return decodeURIComponent(ds(e).replace(/(.)/g,(function(e,t){var n=t.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n})))}(t)}catch(e){return ds(t)}}(e.split(".")[n]))}catch(e){throw new hs("Invalid token specified: "+e.message)}}(r),s=o.user_id,l=o.name;n=JSON.stringify(n),localStorage.setItem("user",n),localStorage.setItem("id",s),localStorage.setItem("token",r),localStorage.setItem("name",l),t(n),i(s),a(r),window.location.reload()}));return function(t){return e.apply(this,arguments)}}();return n.createElement("div",{className:" loginnew "},n.createElement(cs,null),n.createElement(Ot,null),n.createElement("div",{className:" heading  text-white text-3xl mx-auto justify-center  flex h-fit w-fit items-center hover:cursor-pointer hover:text-blue-800"},"Diana Employee Monitoring software"),n.createElement("div",{className:"flex justify-center mt-8"},n.createElement("button",{className:" signinbutton mt-2 flex  border rounded-2xl py-2 "},n.createElement("h4",{className:" flex text-2xl  justify-center font-bold px-2 text-white"},"Sign in"))),n.createElement("div",{className:" mt-8  flex justify-center items-center md:pl-4 lg:pl-0 "},n.createElement("form",{method:"submit"},n.createElement(Dt,{style:{color:"white"},onChange:e=>{l(e.target.value),h(void 0)},autoComplete:"mail",name:"email",variant:"auth",extra:"mb-3 imputWidth ",label:"Email*",placeholder:"Enter your Email",id:"Email",type:"email",value:s,className:"input"}),n.createElement(Dt,{onChange:e=>{u(e.target.value),h(void 0)},variant:"auth",name:"password",extra:"mb-3 imputWidth ",label:"Password*",placeholder:"Password",id:"password",type:"password",value:c,autoComplete:"current-password"}),n.createElement("div",{className:" flex items-center justify-between py-2 px-2"},n.createElement("div",{className:"flex items-center"},n.createElement("input",{type:"checkbox"}),n.createElement("p",{className:"ml-2 text-sm font-medium text-white"},"Keep me logged In")),n.createElement("a",{className:"text-sm font-medium text-buttoncolor hover:text-blue-600 dark:text-white",href:" "},"Forgot Password?")),n.createElement("div",{className:"widthbutton"},n.createElement("button",{type:"Submit",onClick:g,className:" mt-4  buttonsize flex items-center    justify-center rounded-xl  py-[12px]  font-medium text-white buttoncolor"},p)),n.createElement("h1",{className:"text-red-500 flex justify-left float-left mt-4  "},d))),n.createElement("footer",null,n.createElement("h1",{className:"float-right text-white pt-10 mx-2 linked"},n.createElement("a",{onClick:()=>{window.open("https://www.dianasentinel.com/","_blank")},href:"#"},"www.dianasentinel.com"))))};var bs={"aria-busy":!0,role:"status"},ys=function(e){return{display:e?"flex":"none"}},vs=function(){return vs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},vs.apply(this,arguments)};const ws=function(e){var t=e.height,r=void 0===t?100:t,i=e.width,o=void 0===i?100:i,a=e.radius,s=void 0===a?5:a,l=e.color,c=void 0===l?"#4fa94d":l,u=e.ariaLabel,d=void 0===u?"ball-triangle-loading":u,h=e.wrapperClass,p=e.wrapperStyle,f=e.visible,g=void 0===f||f;return n.createElement("div",vs({style:vs(vs({},ys(g)),p),className:h,"data-testid":"ball-triangle-loading","aria-label":d},bs),n.createElement("svg",{height:r,width:o,stroke:c,viewBox:"0 0 57 57",xmlns:"http://www.w3.org/2000/svg","data-testid":"ball-triangle-svg"},n.createElement("g",{fill:"none",fillRule:"evenodd"},n.createElement("g",{transform:"translate(1 1)",strokeWidth:"2"},n.createElement("circle",{cx:"5",cy:"50",r:s},n.createElement("animate",{attributeName:"cy",begin:"0s",dur:"2.2s",values:"50;5;50;50",calcMode:"linear",repeatCount:"indefinite"}),n.createElement("animate",{attributeName:"cx",begin:"0s",dur:"2.2s",values:"5;27;49;5",calcMode:"linear",repeatCount:"indefinite"})),n.createElement("circle",{cx:"27",cy:"5",r:s},n.createElement("animate",{attributeName:"cy",begin:"0s",dur:"2.2s",from:"5",to:"5",values:"5;50;50;5",calcMode:"linear",repeatCount:"indefinite"}),n.createElement("animate",{attributeName:"cx",begin:"0s",dur:"2.2s",from:"27",to:"27",values:"27;49;5;27",calcMode:"linear",repeatCount:"indefinite"})),n.createElement("circle",{cx:"49",cy:"50",r:s},n.createElement("animate",{attributeName:"cy",begin:"0s",dur:"2.2s",values:"50;50;5;50",calcMode:"linear",repeatCount:"indefinite"}),n.createElement("animate",{attributeName:"cx",from:"49",to:"49",begin:"0s",dur:"2.2s",values:"49;5;27;49",calcMode:"linear",repeatCount:"indefinite"}))))))};var Es=i(864),Cs=i(774),xs=i.n(Cs);const ks=function(e){function t(e,r,l,c,h){for(var p,f,g,m,v,E=0,C=0,x=0,k=0,B=0,D=0,T=g=p=0,I=0,N=0,L=0,F=0,j=l.length,U=j-1,q="",W="",$="",H="";I<j;){if(f=l.charCodeAt(I),I===U&&0!==C+k+x+E&&(0!==C&&(f=47===C?10:47),k=x=E=0,j++,U++),0===C+k+x+E){if(I===U&&(0<N&&(q=q.replace(d,"")),0<q.trim().length)){switch(f){case 32:case 9:case 59:case 13:case 10:break;default:q+=l.charAt(I)}f=59}switch(f){case 123:for(p=(q=q.trim()).charCodeAt(0),g=1,F=++I;I<j;){switch(f=l.charCodeAt(I)){case 123:g++;break;case 125:g--;break;case 47:switch(f=l.charCodeAt(I+1)){case 42:case 47:e:{for(T=I+1;T<U;++T)switch(l.charCodeAt(T)){case 47:if(42===f&&42===l.charCodeAt(T-1)&&I+2!==T){I=T+1;break e}break;case 10:if(47===f){I=T+1;break e}}I=T}}break;case 91:f++;case 40:f++;case 34:case 39:for(;I++<U&&l.charCodeAt(I)!==f;);}if(0===g)break;I++}if(g=l.substring(F,I),0===p&&(p=(q=q.replace(u,"").trim()).charCodeAt(0)),64===p){switch(0<N&&(q=q.replace(d,"")),f=q.charCodeAt(1)){case 100:case 109:case 115:case 45:N=r;break;default:N=O}if(F=(g=t(r,N,g,f,h+1)).length,0<M&&(v=s(3,g,N=n(O,q,L),r,_,S,F,f,h,c),q=N.join(""),void 0!==v&&0===(F=(g=v.trim()).length)&&(f=0,g="")),0<F)switch(f){case 115:q=q.replace(w,a);case 100:case 109:case 45:g=q+"{"+g+"}";break;case 107:g=(q=q.replace(A,"$1 $2"))+"{"+g+"}",g=1===P||2===P&&o("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=q+g,112===c&&(W+=g,g="")}else g=""}else g=t(r,n(r,q,L),g,c,h+1);$+=g,g=L=N=T=p=0,q="",f=l.charCodeAt(++I);break;case 125:case 59:if(1<(F=(q=(0<N?q.replace(d,""):q).trim()).length))switch(0===T&&(p=q.charCodeAt(0),45===p||96<p&&123>p)&&(F=(q=q.replace(" ",":")).length),0<M&&void 0!==(v=s(1,q,r,e,_,S,W.length,c,h,c))&&0===(F=(q=v.trim()).length)&&(q="\0\0"),p=q.charCodeAt(0),f=q.charCodeAt(1),p){case 0:break;case 64:if(105===f||99===f){H+=q+l.charAt(I);break}default:58!==q.charCodeAt(F-1)&&(W+=i(q,p,f,q.charCodeAt(2)))}L=N=T=p=0,q="",f=l.charCodeAt(++I)}}switch(f){case 13:case 10:47===C?C=0:0===1+p&&107!==c&&0<q.length&&(N=1,q+="\0"),0<M*R&&s(0,q,r,e,_,S,W.length,c,h,c),S=1,_++;break;case 59:case 125:if(0===C+k+x+E){S++;break}default:switch(S++,m=l.charAt(I),f){case 9:case 32:if(0===k+E+C)switch(B){case 44:case 58:case 9:case 32:m="";break;default:32!==f&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===k+C+E&&(N=L=1,m="\f"+m);break;case 108:if(0===k+C+E+z&&0<T)switch(I-T){case 2:112===B&&58===l.charCodeAt(I-3)&&(z=B);case 8:111===D&&(z=D)}break;case 58:0===k+C+E&&(T=I);break;case 44:0===C+x+k+E&&(N=1,m+="\r");break;case 34:case 39:0===C&&(k=k===f?0:0===k?f:k);break;case 91:0===k+C+x&&E++;break;case 93:0===k+C+x&&E--;break;case 41:0===k+C+E&&x--;break;case 40:0===k+C+E&&(0===p&&(2*B+3*D==533||(p=1)),x++);break;case 64:0===C+x+k+E+T+g&&(g=1);break;case 42:case 47:if(!(0<k+E+x))switch(C){case 0:switch(2*f+3*l.charCodeAt(I+1)){case 235:C=47;break;case 220:F=I,C=42}break;case 42:47===f&&42===B&&F+2!==I&&(33===l.charCodeAt(F+2)&&(W+=l.substring(F,I+1)),m="",C=0)}}0===C&&(q+=m)}D=B,B=f,I++}if(0<(F=W.length)){if(N=r,0<M&&void 0!==(v=s(2,W,N,e,_,S,F,c,h,c))&&0===(W=v).length)return H+W+$;if(W=N.join(",")+"{"+W+"}",0!=P*z){switch(2!==P||o(W,2)||(z=0),z){case 111:W=W.replace(y,":-moz-$1")+W;break;case 112:W=W.replace(b,"::-webkit-input-$1")+W.replace(b,"::-moz-$1")+W.replace(b,":-ms-input-$1")+W}z=0}}return H+W+$}function n(e,t,n){var i=t.trim().split(g);t=i;var o=i.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<o;++s)t[s]=r(e,t[s],n).trim();break;default:var l=s=0;for(t=[];s<o;++s)for(var c=0;c<a;++c)t[l++]=r(e[c]+" ",i[s],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function i(e,t,n,r){var a=e+";",s=2*t+3*n+4*r;if(944===s){e=a.indexOf(":",9)+1;var l=a.substring(e,a.length-1).trim();return l=a.substring(0,e).trim()+l+";",1===P||2===P&&o(l,1)?"-webkit-"+l+l:l}if(0===P||2===P&&!o(a,1))return a;switch(s){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(B,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return p.test(a)?a.replace(h,":-webkit-")+a.replace(h,":-moz-")+a:a;case 1e3:switch(t=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=a.replace(v,"tb");break;case 232:l=a.replace(v,"tb-rl");break;case 220:l=a.replace(v,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,s=(l=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<s?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(C,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(C,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===k.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?i(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(f,"$1-webkit-$2")+a}return a}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),T(2!==t?r:r.replace(x,"$1"),n,t)}function a(e,t){var n=i(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,i,o,a,s,l,u){for(var d,h=0,p=t;h<M;++h)switch(d=D[h].call(c,e,p,n,r,i,o,a,s,l,u)){case void 0:case!1:case!0:case null:break;default:p=d}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(T=null,e?"function"!=typeof e?P=1:(P=2,T=e):P=0),l}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<M){var i=s(-1,n,r,r,_,S,0,0,0,0);void 0!==i&&"string"==typeof i&&(n=i)}var o=t(O,r,n,0,0);return 0<M&&void 0!==(i=s(-2,o,r,r,_,S,o.length,0,0,0))&&(o=i),z=0,S=_=1,o}var u=/^\0+/g,d=/[\0\r\f]/g,h=/: */g,p=/zoo|gra/,f=/([,: ])(transform)/g,g=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,A=/@(k\w+)\s*(\S*)\s*/,b=/::(place)/g,y=/:(read-only)/g,v=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,C=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,k=/stretch|:\s*\w+\-(?:conte|avail)/,B=/([^-])(image-set\()/,S=1,_=1,z=0,P=1,O=[],D=[],M=0,T=null,R=0;return c.use=function e(t){switch(t){case void 0:case null:M=D.length=0;break;default:if("function"==typeof t)D[M++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else R=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},Bs={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function Ss(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var _s=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,zs=Ss((function(e){return _s.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Ps=i(679),Os=i.n(Ps);function Ds(){return(Ds=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ms=function(e,t){for(var n=[e[0]],r=0,i=t.length;r<i;r+=1)n.push(t[r],e[r+1]);return n},Ts=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Es.typeOf)(e)},Rs=Object.freeze([]),Is=Object.freeze({});function Ns(e){return"function"==typeof e}function Ls(e){return e.displayName||e.name||"Component"}function Fs(e){return e&&"string"==typeof e.styledComponentId}var js="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",Us="undefined"!=typeof window&&"HTMLElement"in window,qs=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY));function Ws(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var $s=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,i=r;e>=i;)(i<<=1)<0&&Ws(16,""+e);this.groupSizes=new Uint32Array(i),this.groupSizes.set(n),this.length=i;for(var o=r;o<i;o++)this.groupSizes[o]=0}for(var a=this.indexOfGroup(e+1),s=0,l=t.length;s<l;s++)this.tag.insertRule(a,t[s])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var i=n;i<r;i++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),i=r+n,o=r;o<i;o++)t+=this.tag.getRule(o)+"/*!sc*/\n";return t},e}(),Hs=new Map,Vs=new Map,Ys=1,Gs=function(e){if(Hs.has(e))return Hs.get(e);for(;Vs.has(Ys);)Ys++;var t=Ys++;return Hs.set(e,t),Vs.set(t,e),t},Qs=function(e){return Vs.get(e)},Xs=function(e,t){t>=Ys&&(Ys=t+1),Hs.set(e,t),Vs.set(t,e)},Ks="style["+js+'][data-styled-version="5.3.11"]',Js=new RegExp("^"+js+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),Zs=function(e,t,n){for(var r,i=n.split(","),o=0,a=i.length;o<a;o++)(r=i[o])&&e.registerName(t,r)},el=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],i=0,o=n.length;i<o;i++){var a=n[i].trim();if(a){var s=a.match(Js);if(s){var l=0|parseInt(s[1],10),c=s[2];0!==l&&(Xs(c,l),Zs(e,c,s[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(a)}}},tl=function(){return i.nc},nl=function(e){var t=document.head,n=e||t,r=document.createElement("style"),i=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(js))return r}}(n),o=void 0!==i?i.nextSibling:null;r.setAttribute(js,"active"),r.setAttribute("data-styled-version","5.3.11");var a=tl();return a&&r.setAttribute("nonce",a),n.insertBefore(r,o),r},rl=function(){function e(e){var t=this.element=nl(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var i=t[n];if(i.ownerNode===e)return i}Ws(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),il=function(){function e(e){var t=this.element=nl(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ol=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),al=Us,sl={isServer:!Us,useCSSOMInjection:!qs},ll=function(){function e(e,t,n){void 0===e&&(e=Is),void 0===t&&(t={}),this.options=Ds({},sl,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&Us&&al&&(al=!1,function(e){for(var t=document.querySelectorAll(Ks),n=0,r=t.length;n<r;n++){var i=t[n];i&&"active"!==i.getAttribute(js)&&(el(e,i),i.parentNode&&i.parentNode.removeChild(i))}}(this))}e.registerId=function(e){return Gs(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ds({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,i=t.target,e=n?new ol(i):r?new rl(i):new il(i),new $s(e)));var e,t,n,r,i},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Gs(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Gs(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Gs(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",i=0;i<n;i++){var o=Qs(i);if(void 0!==o){var a=e.names.get(o),s=t.getGroup(i);if(a&&s&&a.size){var l=js+".g"+i+'[id="'+o+'"]',c="";void 0!==a&&a.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+s+l+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),cl=/(a)(d)/gi,ul=function(e){return String.fromCharCode(e+(e>25?39:97))};function dl(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ul(t%52)+n;return(ul(t%52)+n).replace(cl,"$1-$2")}var hl=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},pl=function(e){return hl(5381,e)};function fl(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Ns(n)&&!Fs(n))return!1}return!0}var gl=pl("5.3.11"),ml=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&fl(e),this.componentId=t,this.baseHash=hl(gl,t),this.baseStyle=n,ll.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,i=[];if(this.baseStyle&&i.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))i.push(this.staticRulesId);else{var o=Ml(this.rules,e,t,n).join(""),a=dl(hl(this.baseHash,o)>>>0);if(!t.hasNameForId(r,a)){var s=n(o,"."+a,void 0,r);t.insertRules(r,a,s)}i.push(a),this.staticRulesId=a}else{for(var l=this.rules.length,c=hl(this.baseHash,n.hash),u="",d=0;d<l;d++){var h=this.rules[d];if("string"==typeof h)u+=h;else if(h){var p=Ml(h,e,t,n),f=Array.isArray(p)?p.join(""):p;c=hl(c,f+d),u+=f}}if(u){var g=dl(c>>>0);if(!t.hasNameForId(r,g)){var m=n(u,"."+g,void 0,r);t.insertRules(r,g,m)}i.push(g)}}return i.join(" ")},e}(),Al=/^\s*\/\/.*$/gm,bl=[":","[",".","#"];function yl(e){var t,n,r,i,o=void 0===e?Is:e,a=o.options,s=void 0===a?Is:a,l=o.plugins,c=void 0===l?Rs:l,u=new ks(s),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,i,o,a,s,l,c,u,d){switch(n){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(i[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),p=function(e,r,o){return 0===r&&-1!==bl.indexOf(o[n.length])||o.match(i)?e:"."+t};function f(e,o,a,s){void 0===s&&(s="&");var l=e.replace(Al,""),c=o&&a?a+" "+o+" { "+l+" }":l;return t=s,n=o,r=new RegExp("\\"+n+"\\b","g"),i=new RegExp("(\\"+n+"\\b){2,}"),u(a||!o?"":o,c)}return u.use([].concat(c,[function(e,t,i){2===e&&i.length&&i[0].lastIndexOf(n)>0&&(i[0]=i[0].replace(r,p))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),f.hash=c.length?c.reduce((function(e,t){return t.name||Ws(15),hl(e,t.name)}),5381).toString():"",f}var vl=n.createContext(),wl=(vl.Consumer,n.createContext()),El=(wl.Consumer,new ll),Cl=yl();function xl(){return(0,n.useContext)(vl)||El}function kl(e){var t=(0,n.useState)(e.stylisPlugins),r=t[0],i=t[1],o=xl(),a=(0,n.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),s=(0,n.useMemo)((function(){return yl({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,n.useEffect)((function(){xs()(r,e.stylisPlugins)||i(e.stylisPlugins)}),[e.stylisPlugins]),n.createElement(vl.Provider,{value:a},n.createElement(wl.Provider,{value:s},e.children))}var Bl=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Cl);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Ws(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Cl),this.name+e.hash},e}(),Sl=/([A-Z])/,_l=/([A-Z])/g,zl=/^ms-/,Pl=function(e){return"-"+e.toLowerCase()};function Ol(e){return Sl.test(e)?e.replace(_l,Pl).replace(zl,"-ms-"):e}var Dl=function(e){return null==e||!1===e||""===e};function Ml(e,t,n,r){if(Array.isArray(e)){for(var i,o=[],a=0,s=e.length;a<s;a+=1)""!==(i=Ml(e[a],t,n,r))&&(Array.isArray(i)?o.push.apply(o,i):o.push(i));return o}return Dl(e)?"":Fs(e)?"."+e.styledComponentId:Ns(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:Ml(e(t),t,n,r):e instanceof Bl?n?(e.inject(n,r),e.getName(r)):e:Ts(e)?function e(t,n){var r,i,o=[];for(var a in t)t.hasOwnProperty(a)&&!Dl(t[a])&&(Array.isArray(t[a])&&t[a].isCss||Ns(t[a])?o.push(Ol(a)+":",t[a],";"):Ts(t[a])?o.push.apply(o,e(t[a],a)):o.push(Ol(a)+": "+(r=a,(null==(i=t[a])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||r in Bs||r.startsWith("--")?String(i).trim():i+"px")+";")));return n?[n+" {"].concat(o,["}"]):o}(e):e.toString();var l}var Tl=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Rl(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Ns(e)||Ts(e)?Tl(Ml(Ms(Rs,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Tl(Ml(Ms(e,n)))}new Set;var Il=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Nl=/(^-|-$)/g;function Ll(e){return e.replace(Il,"-").replace(Nl,"")}var Fl=function(e){return dl(pl(e)>>>0)};function jl(e){return"string"==typeof e&&!0}var Ul=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},ql=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Wl(e,t,n){var r=e[n];Ul(t)&&Ul(r)?$l(r,t):e[n]=t}function $l(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var i=0,o=n;i<o.length;i++){var a=o[i];if(Ul(a))for(var s in a)ql(s)&&Wl(e,a[s],s)}return e}var Hl=n.createContext();Hl.Consumer;var Vl={};function Yl(e,t,r){var i=Fs(e),o=!jl(e),a=t.attrs,s=void 0===a?Rs:a,l=t.componentId,c=void 0===l?function(e,t){var n="string"!=typeof e?"sc":Ll(e);Vl[n]=(Vl[n]||0)+1;var r=n+"-"+Fl("5.3.11"+n+Vl[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):l,u=t.displayName,d=void 0===u?function(e){return jl(e)?"styled."+e:"Styled("+Ls(e)+")"}(e):u,h=t.displayName&&t.componentId?Ll(t.displayName)+"-"+t.componentId:t.componentId||c,p=i&&e.attrs?Array.prototype.concat(e.attrs,s).filter(Boolean):s,f=t.shouldForwardProp;i&&e.shouldForwardProp&&(f=t.shouldForwardProp?function(n,r,i){return e.shouldForwardProp(n,r,i)&&t.shouldForwardProp(n,r,i)}:e.shouldForwardProp);var g,m=new ml(r,h,i?e.componentStyle:void 0),A=m.isStatic&&0===s.length,b=function(e,t){return function(e,t,r,i){var o=e.attrs,a=e.componentStyle,s=e.defaultProps,l=e.foldedComponentIds,c=e.shouldForwardProp,u=e.styledComponentId,d=e.target,h=function(e,t,n){void 0===e&&(e=Is);var r=Ds({},t,{theme:e}),i={};return n.forEach((function(e){var t,n,o,a=e;for(t in Ns(a)&&(a=a(r)),a)r[t]=i[t]="className"===t?(n=i[t],o=a[t],n&&o?n+" "+o:n||o):a[t]})),[r,i]}(function(e,t,n){return void 0===n&&(n=Is),e.theme!==n.theme&&e.theme||t||n.theme}(t,(0,n.useContext)(Hl),s)||Is,t,o),p=h[0],f=h[1],g=function(e,t,r,i){var o=xl(),a=(0,n.useContext)(wl)||Cl;return t?e.generateAndInjectStyles(Is,o,a):e.generateAndInjectStyles(r,o,a)}(a,i,p),m=r,A=f.$as||t.$as||f.as||t.as||d,b=jl(A),y=f!==t?Ds({},t,{},f):t,v={};for(var w in y)"$"!==w[0]&&"as"!==w&&("forwardedAs"===w?v.as=y[w]:(c?c(w,zs,A):!b||zs(w))&&(v[w]=y[w]));return t.style&&f.style!==t.style&&(v.style=Ds({},t.style,{},f.style)),v.className=Array.prototype.concat(l,u,g!==u?g:null,t.className,f.className).filter(Boolean).join(" "),v.ref=m,(0,n.createElement)(A,v)}(g,e,t,A)};return b.displayName=d,(g=n.forwardRef(b)).attrs=p,g.componentStyle=m,g.displayName=d,g.shouldForwardProp=f,g.foldedComponentIds=i?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):Rs,g.styledComponentId=h,g.target=i?e.target:e,g.withComponent=function(e){var n=t.componentId,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(t,["componentId"]),o=n&&n+"-"+(jl(e)?e:Ll(Ls(e)));return Yl(e,Ds({},i,{attrs:p,componentId:o}),r)},Object.defineProperty(g,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=i?$l({},e.defaultProps,t):t}}),Object.defineProperty(g,"toString",{value:function(){return"."+g.styledComponentId}}),o&&Os()(g,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),g}var Gl,Ql=function(e){return function e(t,n,r){if(void 0===r&&(r=Is),!(0,Es.isValidElementType)(n))return Ws(1,String(n));var i=function(){return t(n,r,Rl.apply(void 0,arguments))};return i.withConfig=function(i){return e(t,n,Ds({},r,{},i))},i.attrs=function(i){return e(t,n,Ds({},r,{attrs:Array.prototype.concat(r.attrs,i).filter(Boolean)}))},i}(Yl,e)};function Xl(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=Rl.apply(void 0,[e].concat(n)).join(""),o=Fl(i);return new Bl(o,i)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ql[e]=Ql(e)})),Gl=function(e,t){this.rules=e,this.componentId=t,this.isStatic=fl(e),ll.registerId(this.componentId+1)}.prototype,Gl.createStyles=function(e,t,n,r){var i=r(Ml(this.rules,t,n,r).join(""),""),o=this.componentId+e;n.insertRules(o,o,i)},Gl.removeStyles=function(e,t){t.clearRules(this.componentId+e)},Gl.renderStyles=function(e,t,n,r){e>2&&ll.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=tl();return"<style "+[n&&'nonce="'+n+'"',js+'="true"','data-styled-version="5.3.11"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Ws(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return Ws(2);var r=((t={})[js]="",t["data-styled-version"]="5.3.11",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),i=tl();return i&&(r.nonce=i),[n.createElement("style",Ds({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new ll({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?Ws(2):n.createElement(kl,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return Ws(3)}}();const Kl=Ql;var Jl,Zl,ec=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},tc=242.776657104492,nc=Xl(Jl||(Jl=ec(["\n  12.5% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n  43.75% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n  100% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n"],["\n  12.5% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n  43.75% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n  100% {\n    stroke-dasharray: ","px, ","px;\n    stroke-dashoffset: -","px;\n  }\n"])),.14*tc,tc,.11*tc,.35*tc,tc,.35*tc,.01*tc,tc,.99*tc);Kl.path(Zl||(Zl=ec(["\n  stroke-dasharray: ","px, ",";\n  stroke-dashoffset: 0;\n  animation: "," ","s linear infinite;\n"],["\n  stroke-dasharray: ","px, ",";\n  stroke-dashoffset: 0;\n  animation: "," ","s linear infinite;\n"])),.01*tc,tc,nc,1.6);var rc,ic,oc,ac,sc,lc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},cc=Xl(rc||(rc=lc(["\n to {\n    transform: rotate(360deg);\n  }\n"],["\n to {\n    transform: rotate(360deg);\n  }\n"])));Kl.svg(ic||(ic=lc(["\n  animation: "," 0.75s steps(12, end) infinite;\n  animation-duration: ","s;\n"],["\n  animation: "," 0.75s steps(12, end) infinite;\n  animation-duration: ","s;\n"])),cc,(ac="speed",sc="0.75",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(void 0!==e[ac])return e[ac];if(ac&&ac.indexOf(".")>0){for(var t=ac.split("."),n=t.length,r=e[t[0]],i=1;null!=r&&i<n;)r=r[t[i]],i+=1;if(void 0!==r)return r}return sc})),Kl.polyline(oc||(oc=lc(["\n  stroke-width: ","px;\n  stroke-linecap: round;\n\n  &:nth-child(12n + 0) {\n    stroke-opacity: 0.08;\n  }\n\n  &:nth-child(12n + 1) {\n    stroke-opacity: 0.17;\n  }\n\n  &:nth-child(12n + 2) {\n    stroke-opacity: 0.25;\n  }\n\n  &:nth-child(12n + 3) {\n    stroke-opacity: 0.33;\n  }\n\n  &:nth-child(12n + 4) {\n    stroke-opacity: 0.42;\n  }\n\n  &:nth-child(12n + 5) {\n    stroke-opacity: 0.5;\n  }\n\n  &:nth-child(12n + 6) {\n    stroke-opacity: 0.58;\n  }\n\n  &:nth-child(12n + 7) {\n    stroke-opacity: 0.66;\n  }\n\n  &:nth-child(12n + 8) {\n    stroke-opacity: 0.75;\n  }\n\n  &:nth-child(12n + 9) {\n    stroke-opacity: 0.83;\n  }\n\n  &:nth-child(12n + 11) {\n    stroke-opacity: 0.92;\n  }\n"],["\n  stroke-width: ","px;\n  stroke-linecap: round;\n\n  &:nth-child(12n + 0) {\n    stroke-opacity: 0.08;\n  }\n\n  &:nth-child(12n + 1) {\n    stroke-opacity: 0.17;\n  }\n\n  &:nth-child(12n + 2) {\n    stroke-opacity: 0.25;\n  }\n\n  &:nth-child(12n + 3) {\n    stroke-opacity: 0.33;\n  }\n\n  &:nth-child(12n + 4) {\n    stroke-opacity: 0.42;\n  }\n\n  &:nth-child(12n + 5) {\n    stroke-opacity: 0.5;\n  }\n\n  &:nth-child(12n + 6) {\n    stroke-opacity: 0.58;\n  }\n\n  &:nth-child(12n + 7) {\n    stroke-opacity: 0.66;\n  }\n\n  &:nth-child(12n + 8) {\n    stroke-opacity: 0.75;\n  }\n\n  &:nth-child(12n + 9) {\n    stroke-opacity: 0.83;\n  }\n\n  &:nth-child(12n + 11) {\n    stroke-opacity: 0.92;\n  }\n"])),(function(e){return e.width}));var uc,dc,hc,pc=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},fc=Xl(uc||(uc=pc(["\n to {\n    stroke-dashoffset: 136;\n  }\n"],["\n to {\n    stroke-dashoffset: 136;\n  }\n"])));Kl.polygon(dc||(dc=pc(["\n  stroke-dasharray: 17;\n  animation: "," 2.5s cubic-bezier(0.35, 0.04, 0.63, 0.95) infinite;\n"],["\n  stroke-dasharray: 17;\n  animation: "," 2.5s cubic-bezier(0.35, 0.04, 0.63, 0.95) infinite;\n"])),fc),Kl.svg(hc||(hc=pc(["\n  transform-origin: 50% 65%;\n"],["\n  transform-origin: 50% 65%;\n"])));const gc="src/assests/images/logingin.png",mc="src/assests/images/working.png",Ac="src/assests/images/workinganimation.gif";function bc(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}function yc(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){bc(o,r,i,a,s,"next",e)}function s(e){bc(o,r,i,a,s,"throw",e)}a(void 0)}))}}const vc=()=>{var[e,t]=(0,n.useState)(!1),[r,i]=(0,n.useState)(gc),[o,a]=(0,n.useState)("START LOGIN"),[s,l]=(0,n.useState)("ON WORK"),[c,u]=(0,n.useState)(0),[d,h]=(0,n.useState)(0),[p,f]=(0,n.useState)(!1),[g,m]=(0,n.useState)(mc),[A,b]=(0,n.useState)(Ac),[y,v]=(0,n.useState)("working"),[w,E]=(0,n.useState)(void 0),[C,x]=localStorage.getItem("id"),[k,B]=(0,n.useState)(""),[S,_]=(0,n.useState)(!1),[z,P]=(0,n.useState)(!1),[O,D]=(0,n.useState)(!0),[M,T]=(0,n.useState)(!1),R=e=>{var t=e=>e<10?"0".concat(e):e,n=Math.floor(e/3600),r=Math.floor(e%3600/60),i=e%60;return"".concat(t(n),":").concat(t(r),":").concat(t(i))};(0,n.useEffect)((()=>{window.electronAPI.receiveDataFromMain((e=>{console.log("Received data:",e),(e=>{var t=function(e){for(var t=e.split(",")[1],n=atob(t),r=new Uint8Array(n.length),i=0;i<n.length;i++)r[i]=n.charCodeAt(i);var o=new Blob([r],{type:"image/png"}),a=Date.now();return new File([o],"".concat(a,".png"),{type:"image/png"})}(e);if(console.log("Converted file:",t),t){var n=localStorage.getItem("id"),r=new FormData,i=(new Date).toString();r.append("image",t),r.append("organization_id",n),r.append("time",i),wt.post("".concat(Et,"users/screenshots"),r,{headers:{"Content-Type":"multipart/form-data"}}).then((e=>{console.log("Screenshot sent successfully")})).catch((e=>{console.error("Error uploading image:",e),E("there has been error check your internet connection")}))}})(e)}))}),[]),(0,n.useEffect)((()=>{window.electronAPI.receivescrendata((e=>{console.log("screen data:",e),I(e)}))}),[]),(0,n.useEffect)((()=>{window.electronAPI.getelapsedtime((e=>{h(e)}))}),[]),(0,n.useEffect)((()=>{window.electronAPI.getideltime((e=>{console.log("apicalled",e),F(R(e))}))}),[]);var I=function(){var e=yc((function*(e){var t=e.screenswitchcount,n=e.screenname;console.log(t,n);var r=localStorage.getItem("id");console.log("sending screen details");try{var i=yield _t.screendetails({screen_count:t,screen_name:n,orgnisation_id:r});if(i.data&&201===i.status)return E("");console.log(i)}catch(e){return console.log(e),e.response?E(e.response.data.msg):E("something went Wrong")}}));return function(t){return e.apply(this,arguments)}}(),N=()=>{window.electronAPI.sendDataToMain("capture-screenshot")},L=()=>{t(!1),f(!1),W(),window.electronAPI.sendDataforstop("stop-tasking")},F=function(){var e=yc((function*(e){console.log("sending idel time");var t=(new Date).toString(),n=localStorage.getItem("id");try{var r=yield _t.ideltime({localtime:t,organization_id:n,idealtime:e});r.data&&201===r.status&&E("idel time updated"),console.log(r)}catch(e){console.log(e),e.response?E("Something went wrong"):E("Something went Wrong")}}));return function(t){return e.apply(this,arguments)}}(),j=function(){var e=yc((function*(e){e&&e.preventDefault(),console.log("sending login details"),T(!0);var n=(new Date).toString();try{var o=yield _t.Attendance({login_time:n,work_status:y,user_id:C});o.data&&201===o.status&&(r===gc?(console.log("starting screenshots"),t(!0),window.electronAPI.sendDatafortasking("capture-details"),q(),i("src/assests/images/logout.png"),a("STOP LOGIN"),P(!0),D(!1)):(a("START LOGIN"),L()),E("logged in successfully")),console.log(o)}catch(e){console.log(e),e.response?E("Something went wrong"):E("Something went Wrong")}finally{T(!1)}}));return function(t){return e.apply(this,arguments)}}(),U=function(){var e=yc((function*(e){e&&e.preventDefault(),console.log("sending logout deatils");var t=R(d),n=(new Date).toString();try{var r=yield _t.loggingout({logout_time:n,endreport:k,user_id:C,total_time:t});if(console.log(k),console.log(r),r.data&&201===r.status)return _(!1),i(gc),b(Ac),P(!1),L(),E("succesfully logout");console.log(r),console.log("logged out")}catch(e){return console.log(e),e.response?E(e.response.data.msg):E("something went Wrong")}}));return function(t){return e.apply(this,arguments)}}(),q=()=>{f(!p)};(0,n.useEffect)((()=>{var t;return e?t=setInterval(N,3e5):clearInterval(t),()=>clearInterval(t)}),[e]);var W=()=>{_(!S)};return n.createElement("div",{className:" w-full h-full totalwidht"},n.createElement("img",{src:A,alt:"Background",className:"backimageset w-full h-full fixed z-2  "}),n.createElement(Ot,null),n.createElement("div",{className:" maindiv flex  justify-center item-center px-5 images z-40  boxShadow-3xl  "},n.createElement("button",{className:"",onClick:()=>{j()}},n.createElement("img",{className:"waves flex hover rounded-full w-10 h-10 loginimage items-center ".concat(O?"visible":"hidden"),src:r,alt:""}),n.createElement("p",{className:"textcolor text-xl ".concat(O?"visible":"hidden")},o)),n.createElement("button",{className:"",onClick:W},n.createElement("img",{className:"waves flex hover rounded-full w-10 h-10 loginimage items-center ".concat(O?"hidden":"visible"),src:r,alt:""}),n.createElement("p",{className:"textcolor text-xl ".concat(O?"hidden":"visible")},o)),M?n.createElement("div",{className:"flex  backgoundcolor "},n.createElement(ws,{height:120,width:120,radius:5,color:"#4fa94d",ariaLabel:"ball-triangle-loading",wrapperClass:{},wrapperStyle:"",visible:!0})):null,n.createElement("button",{className:"",onClick:()=>{g===mc?(t(!1),f(!1),m("src/assests/images/breakout.png"),l(" on break "),b("src/assests/images/bganimation.gif"),window.electronAPI.sendDataforstop("stop-tasking")):(m(mc),t(!0),f(!0),l(" on working "),b(Ac),window.electronAPI.sendDatafortasking("capture-details"))}},n.createElement("img",{className:"waves flex hover rounded-full w-10 h-10 loginimage items-center ".concat(z?"visible":"hidden"),src:g,alt:""}),n.createElement("p",{className:"textcolor text-xl ".concat(z?"visible":"hidden")},s))),n.createElement("div",{className:"textcolor flex justify-center "},n.createElement("p",{className:"textcolor text-3xl"},"Elapsed Time : ",R(d))),n.createElement("p",{className:"flex justify-center text-red-500 "},w),n.createElement("div",null,S&&n.createElement("form",{onSubmit:e=>{e.preventDefault(),U(),a("START LOGIN")},className:"flex flex-col justify-center items-center"},n.createElement("label",{className:"endreportt mt-4 text-color  text-xl font-sans font-bold flex flex-col justify-center items-center"},"End Report",n.createElement("input",{placeholder:"your day end report",className:"inputform rounded",type:"text",value:k,maxLength:100,onChange:e=>{B(e.target.value)}})),n.createElement("button",{className:"reportbutton ",type:"submit"},"Submit")),n.createElement("div",{className:" marginfooter footercolor mx-auto flex justify-center items-center gap-6"},n.createElement("a",{onClick:()=>{window.open("https://www.dianasentinel.com/","_blank")},href:"#"}," ",n.createElement("img",{className:"w-16 h-16 sm:w-16 sm:h-16 mr-16  footerimage",src:zt,alt:"Logo 1"})),n.createElement("img",{className:"w-16 h-16 sm:w-16 sm:h-16 mr-16 rounded-full  footerimage",src:"src/assests/images/help.png",alt:"Logo 2"}),n.createElement("img",{className:"w-16 h-16 sm:w-16 sm:h-16  footerimage",src:"src/assests/images/setting.png",alt:"Logo 3"}))))};var wc=i(379),Ec=i.n(wc),Cc=i(795),xc=i.n(Cc),kc=i(569),Bc=i.n(kc),Sc=i(565),_c=i.n(Sc),zc=i(216),Pc=i.n(zc),Oc=i(589),Dc=i.n(Oc),Mc=i(751),Tc={};function Rc(){var[e,t]=n.useState(null);return(0,n.useEffect)((()=>{var e=localStorage.getItem("user");t(e)}),[e]),n.createElement(n.Fragment,null,n.createElement(F,null,n.createElement("div",null,e?n.createElement(vc,null):n.createElement(As,null))))}Tc.styleTagTransform=Dc(),Tc.setAttributes=_c(),Tc.insert=Bc().bind(null,"head"),Tc.domAPI=xc(),Tc.insertStyleElement=Pc(),Ec()(Mc.Z,Tc),Mc.Z&&Mc.Z.locals&&Mc.Z.locals,document.addEventListener("DOMContentLoaded",(()=>{var e=document.getElementById("root");(0,o.s)(e).render(n.createElement(D,null,n.createElement(Rc,null)))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,